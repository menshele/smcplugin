/* The following code was generated by JFlex 1.4.3 on 20.02.16 7:06 */

package com.smcplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import static com.smcplugin.psi.SmcTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20.02.16 7:06 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_FOR_NEXT_STATE_NAME = 48;
  public static final int WAITING_FOR_ENTRY_EXIT_ARGUMENTS = 36;
  public static final int WAITING_FOR_HEADER = 16;
  public static final int WAITING_FOR_FSM_FILE = 12;
  public static final int WAITING_FOR_ACCESS = 14;
  public static final int WAITING_FOR_ACTIONS = 50;
  public static final int WAITING_FOR_INCLUDE = 20;
  public static final int WAITING_FOR_ARGUMENTS = 28;
  public static final int WAITING_FOR_GUARD_RAW_CODE = 46;
  public static final int WAITING_FOR_ENTRY_EXIT_ACTIONS = 34;
  public static final int WAITING_FOR_MAP = 24;
  public static final int WAITING_FOR_ACTION_NAME = 52;
  public static final int WAITING_FOR_CONTEXT_CLASS = 6;
  public static final int WAITING_FOR_PACKAGE_STATEMENT = 4;
  public static final int WAITING_FOR_IMPORT_CLASS = 8;
  public static final int WAITING_FOR_START = 22;
  public static final int WAITING_FOR_STATE = 26;
  public static final int WAITING_FOR_DECLARE = 18;
  public static final int WAITING_FOR_TRANSITIONS = 38;
  public static final int WAITING_FOR_PARAMETER_NAME = 44;
  public static final int WAITING_FOR_STATE_EXIT = 32;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_PARAMETERS = 40;
  public static final int WAITING_FOR_FSM_CLASS = 10;
  public static final int WAITING_FOR_VERBATIM_CODE = 2;
  public static final int WAITING_FOR_PARAMETER_TYPE = 42;
  public static final int WAITING_FOR_STATE_ENTRY = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\53"+
    "\2\0\1\27\2\0\1\40\1\41\1\25\1\0\1\44\1\0\1\5"+
    "\1\47\12\6\1\7\1\45\1\0\1\46\3\0\4\4\1\50\25\4"+
    "\1\42\1\0\1\43\1\0\1\5\1\0\1\24\1\12\1\15\1\22"+
    "\1\21\1\36\1\33\1\37\1\14\1\4\1\32\1\13\1\34\1\26"+
    "\1\17\1\10\1\4\1\16\1\35\1\20\1\11\1\23\1\4\1\52"+
    "\1\51\1\4\1\30\1\0\1\31\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\1\1\1\2\1\3\3\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\1"+
    "\1\16\1\17\1\20\1\21\1\22\2\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\1\1\40\1\41\1\1\1\42"+
    "\1\43\1\1\1\44\1\43\1\45\1\46\1\47\1\50"+
    "\1\1\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\2\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\1\1\103\1\104\1\105\2\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\10\0\1\115"+
    "\1\116\6\0\1\115\1\117\2\17\2\21\3\23\2\25"+
    "\2\27\2\0\2\32\2\34\2\36\1\0\2\41\1\120"+
    "\2\43\1\121\2\43\2\46\1\0\2\56\2\62\2\66"+
    "\3\70\2\75\2\101\1\0\3\106\2\111\1\0\1\122"+
    "\1\123\12\0\1\23\4\0\2\43\2\0\1\124\2\125"+
    "\1\126\6\0\1\127\3\0\1\23\4\0\1\43\1\130"+
    "\12\0\1\23\4\0\1\131\3\0\1\132\2\0\1\133"+
    "\3\0\1\134\1\135\2\0\1\136\2\0\1\137\1\0"+
    "\1\140\2\0\1\141\1\0\2\136\1\142\1\143\1\144"+
    "\1\0\1\145\1\0\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u0478\0\u04a4\0\u0478\0\u04d0\0\u04fc"+
    "\0\u0528\0\u0478\0\u0478\0\u0478\0\u0478\0\u0478\0\u0478\0\u0478"+
    "\0\u0478\0\u0478\0\u0478\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0478\0\u0a50\0\u0a7c\0\u0aa8\0\u0478\0\u0478\0\u0ad4\0\u0b00"+
    "\0\u0478\0\u0478\0\u0b2c\0\u0b58\0\u0b84\0\u0478\0\u0478\0\u0bb0"+
    "\0\u0bdc\0\u0478\0\u0478\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8"+
    "\0\u0478\0\u0478\0\u0478\0\u0ce4\0\u0d10\0\u0478\0\u0478\0\u0d3c"+
    "\0\u0d68\0\u0478\0\u0d94\0\u0dc0\0\u0d94\0\u0dec\0\u0e18\0\u0e44"+
    "\0\u0478\0\u0e70\0\u0e9c\0\u0478\0\u0478\0\u0478\0\u0ec8\0\u0ef4"+
    "\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u0478\0\u0478"+
    "\0\u1028\0\u1054\0\u1080\0\u10ac\0\u0554\0\u10d8\0\u0554\0\u0554"+
    "\0\u1104\0\u0478\0\u1130\0\u0478\0\u115c\0\u0478\0\u1188\0\u11b4"+
    "\0\u0478\0\u11e0\0\u0478\0\u120c\0\u1238\0\u1264\0\u0478\0\u1290"+
    "\0\u0478\0\u12bc\0\u0478\0\u12e8\0\u1314\0\u0478\0\u0478\0\u1340"+
    "\0\u0478\0\u0478\0\u136c\0\u1398\0\u13c4\0\u0478\0\u13f0\0\u141c"+
    "\0\u0478\0\u1448\0\u0478\0\u1474\0\u0478\0\u14a0\0\u0478\0\u14cc"+
    "\0\u14f8\0\u0478\0\u1524\0\u0478\0\u0d94\0\u1550\0\u0478\0\u157c"+
    "\0\u15a8\0\u0478\0\u15d4\0\u0478\0\u0478\0\u1600\0\u162c\0\u1658"+
    "\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8"+
    "\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918"+
    "\0\u0478\0\u0c8c\0\u0e18\0\u0478\0\u1944\0\u1970\0\u199c\0\u19c8"+
    "\0\u19f4\0\u1a20\0\u0478\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc"+
    "\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u09f8\0\u1bd8\0\u1c04\0\u1c30"+
    "\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\u1d90"+
    "\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u09f8\0\u1e6c\0\u1e98\0\u1ec4"+
    "\0\u0478\0\u1ef0\0\u1f1c\0\u0478\0\u1f48\0\u1f74\0\u1fa0\0\u0688"+
    "\0\u0478\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c\0\u0478\0\u20a8"+
    "\0\u0478\0\u20d4\0\u2100\0\u0478\0\u212c\0\u2158\0\u0478\0\u0478"+
    "\0\u0478\0\u0478\0\u2184\0\u0478\0\u21b0\0\u0478";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\34\3\35\3\34\1\36\1\37\15\34\1\40\1\41"+
    "\1\42\1\43\6\34\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\4\34\27\54\1\55\24\54\1\34"+
    "\3\56\1\57\3\34\15\57\1\34\1\57\3\34\6\57"+
    "\10\34\3\57\2\34\3\60\1\61\3\34\15\61\1\34"+
    "\1\61\3\34\6\61\10\34\3\61\2\34\3\62\1\63"+
    "\3\34\15\63\1\34\1\63\3\34\3\63\1\64\2\63"+
    "\10\34\3\63\2\34\3\65\1\66\3\34\15\66\1\34"+
    "\1\66\3\34\6\66\10\34\3\66\2\34\3\67\1\70"+
    "\3\34\15\70\1\34\1\70\3\34\6\70\10\34\3\70"+
    "\2\34\3\71\4\34\1\72\44\34\3\73\1\74\3\34"+
    "\15\74\1\34\1\74\3\34\6\74\10\34\3\74\2\34"+
    "\3\75\1\76\3\34\15\76\1\34\1\76\3\34\6\76"+
    "\10\34\3\76\2\34\3\77\1\100\3\34\15\100\1\34"+
    "\1\100\3\34\6\100\10\34\3\100\2\34\3\101\1\102"+
    "\3\34\15\102\1\34\1\102\3\34\6\102\10\34\3\102"+
    "\2\34\3\103\1\104\3\34\15\104\1\34\1\104\1\105"+
    "\2\34\6\104\10\34\3\104\2\34\3\106\1\107\3\34"+
    "\15\107\1\34\1\107\1\110\1\111\1\34\6\107\10\34"+
    "\1\112\2\107\2\34\3\113\1\114\3\34\15\114\1\34"+
    "\1\114\3\34\6\114\1\34\1\115\2\34\1\116\3\34"+
    "\3\114\1\117\1\34\3\120\24\34\1\121\1\122\23\34"+
    "\3\123\24\34\1\121\1\122\23\34\3\124\1\125\3\34"+
    "\15\125\1\34\1\125\2\34\1\122\6\125\1\126\4\34"+
    "\1\127\2\34\3\125\2\34\3\130\1\131\3\34\15\131"+
    "\1\34\1\131\3\34\6\131\1\34\1\132\2\34\1\133"+
    "\3\34\3\131\2\34\3\134\1\135\3\34\15\135\1\34"+
    "\1\135\2\34\1\122\6\135\10\34\3\135\2\34\3\136"+
    "\1\137\3\34\15\137\1\34\1\140\1\34\1\141\1\122"+
    "\6\137\1\142\1\34\1\143\5\34\3\137\2\34\3\144"+
    "\1\145\3\34\15\145\1\34\1\145\3\34\6\145\1\34"+
    "\1\146\2\34\1\147\3\34\3\145\2\34\3\150\1\151"+
    "\2\34\1\152\15\151\1\34\1\151\3\34\6\151\10\34"+
    "\3\151\1\34\1\153\3\154\37\153\1\155\10\153\1\34"+
    "\3\156\1\157\3\34\15\157\1\34\1\160\1\34\1\141"+
    "\1\34\6\157\2\34\1\143\1\161\4\34\3\157\2\34"+
    "\3\162\1\163\3\34\15\163\1\34\1\163\2\34\1\164"+
    "\6\163\1\165\4\34\1\166\2\34\3\163\1\34\55\0"+
    "\3\35\61\0\1\167\5\0\1\170\50\0\1\171\47\0"+
    "\1\172\3\0\1\173\1\174\4\0\1\175\1\0\1\176"+
    "\3\0\1\177\1\200\2\0\1\201\1\202\1\203\1\204"+
    "\14\0\27\205\1\206\53\205\1\206\1\207\1\210\22\205"+
    "\1\0\3\56\51\0\1\211\1\212\1\0\3\57\1\0"+
    "\15\57\1\0\1\57\3\0\6\57\10\0\3\57\2\0"+
    "\3\60\51\0\1\213\1\214\1\0\3\61\1\0\15\61"+
    "\1\0\1\61\3\0\6\61\10\0\3\61\2\0\3\62"+
    "\51\0\1\215\1\216\1\0\3\63\1\0\17\63\3\0"+
    "\6\63\10\0\3\63\2\0\1\215\1\216\1\0\3\63"+
    "\1\0\10\63\1\217\6\63\3\0\6\63\10\0\3\63"+
    "\2\0\3\65\51\0\1\220\1\221\1\0\3\66\1\0"+
    "\15\66\1\0\1\66\3\0\6\66\10\0\3\66\2\0"+
    "\3\67\51\0\1\222\1\223\1\0\3\70\1\0\15\70"+
    "\1\0\1\70\3\0\6\70\10\0\3\70\2\0\3\71"+
    "\61\0\1\224\4\0\1\225\36\0\3\73\51\0\1\226"+
    "\1\227\1\0\3\74\1\0\15\74\1\0\1\74\3\0"+
    "\6\74\10\0\3\74\2\0\3\75\51\0\1\230\1\231"+
    "\1\0\3\76\1\0\15\76\1\0\1\76\3\0\6\76"+
    "\10\0\3\76\2\0\3\77\51\0\1\232\1\233\1\0"+
    "\3\100\1\0\15\100\1\0\1\100\3\0\6\100\10\0"+
    "\3\100\2\0\3\101\54\0\1\234\1\0\1\234\1\0"+
    "\15\234\1\0\1\234\3\0\6\234\10\0\3\234\2\0"+
    "\3\103\51\0\1\235\1\236\1\0\3\104\1\0\15\104"+
    "\1\0\1\104\3\0\6\104\10\0\3\104\30\0\1\237"+
    "\25\0\3\106\51\0\1\240\1\241\1\0\3\107\1\0"+
    "\15\107\1\0\1\107\3\0\6\107\10\0\3\107\30\0"+
    "\1\242\25\0\1\240\1\241\1\0\3\107\1\0\15\107"+
    "\1\0\1\243\3\0\6\107\10\0\2\107\1\244\2\0"+
    "\3\113\51\0\1\245\1\246\1\0\3\114\1\0\15\114"+
    "\1\0\1\114\3\0\6\114\10\0\3\114\5\0\1\247"+
    "\3\0\15\247\1\0\1\247\3\0\6\247\10\0\3\247"+
    "\2\0\3\120\51\0\3\123\51\0\3\124\51\0\1\250"+
    "\1\251\1\0\3\125\1\0\15\125\1\0\1\125\3\0"+
    "\6\125\10\0\3\125\2\0\3\130\51\0\1\252\1\253"+
    "\1\0\3\131\1\0\15\131\1\0\1\131\3\0\6\131"+
    "\10\0\3\131\2\0\3\134\51\0\1\254\1\255\1\0"+
    "\3\135\1\0\15\135\1\0\1\135\3\0\6\135\10\0"+
    "\3\135\2\0\3\136\51\0\1\256\1\257\1\0\3\137"+
    "\1\0\15\137\1\0\1\137\3\0\6\137\10\0\3\137"+
    "\2\0\1\256\1\257\1\0\3\137\1\0\4\137\1\260"+
    "\10\137\1\0\1\137\3\0\6\137\10\0\3\137\2\0"+
    "\3\144\51\0\1\261\1\262\1\0\3\145\1\0\15\145"+
    "\1\0\1\145\3\0\6\145\10\0\3\145\2\0\3\150"+
    "\51\0\1\263\1\264\1\0\3\151\1\0\15\151\1\0"+
    "\1\151\3\0\6\151\10\0\3\151\1\0\43\265\1\155"+
    "\11\265\3\154\37\265\1\155\10\265\1\0\3\156\51\0"+
    "\1\266\1\267\1\0\3\157\1\0\15\157\1\0\1\157"+
    "\3\0\6\157\10\0\3\157\2\0\1\266\1\267\1\0"+
    "\3\157\1\0\4\157\1\270\10\157\1\0\1\157\3\0"+
    "\6\157\10\0\3\157\2\0\3\162\51\0\1\271\1\272"+
    "\1\0\3\163\1\0\15\163\1\0\1\163\3\0\6\163"+
    "\10\0\3\163\36\0\1\273\26\0\1\274\56\0\1\275"+
    "\64\0\1\276\55\0\1\277\5\0\1\300\32\0\1\301"+
    "\61\0\1\302\47\0\1\303\62\0\1\304\47\0\1\305"+
    "\70\0\1\306\37\0\1\307\32\0\27\205\1\206\1\205"+
    "\1\210\22\205\2\0\1\212\53\0\1\214\53\0\1\216"+
    "\52\0\1\215\1\216\1\0\3\63\1\0\14\63\1\310"+
    "\2\63\3\0\6\63\10\0\3\63\3\0\1\221\53\0"+
    "\1\223\63\0\1\311\55\0\1\312\2\0\1\313\36\0"+
    "\1\227\53\0\1\231\53\0\1\233\55\0\1\234\1\0"+
    "\1\234\1\314\15\234\1\0\1\234\3\0\6\234\10\0"+
    "\3\234\3\0\1\236\53\0\1\241\52\0\1\240\1\241"+
    "\1\0\3\107\1\0\10\107\1\315\4\107\1\0\1\107"+
    "\3\0\6\107\10\0\3\107\2\0\1\240\1\241\1\0"+
    "\3\107\1\0\4\107\1\316\10\107\1\0\1\107\3\0"+
    "\6\107\10\0\3\107\3\0\1\246\52\0\1\317\1\320"+
    "\1\0\3\247\1\0\15\247\1\0\1\247\3\0\6\247"+
    "\10\0\3\247\1\321\2\0\1\251\53\0\1\253\53\0"+
    "\1\255\53\0\1\257\52\0\1\256\1\257\1\0\3\137"+
    "\1\0\3\137\1\322\11\137\1\0\1\137\3\0\6\137"+
    "\10\0\3\137\3\0\1\262\53\0\1\264\53\0\1\267"+
    "\52\0\1\266\1\267\1\0\3\157\1\0\3\157\1\323"+
    "\11\157\1\0\1\157\3\0\6\157\10\0\3\157\3\0"+
    "\1\272\110\0\1\324\31\0\1\325\53\0\1\326\46\0"+
    "\1\327\67\0\1\330\44\0\1\331\53\0\1\332\46\0"+
    "\1\333\67\0\1\334\63\0\1\335\43\0\1\336\30\0"+
    "\1\215\1\216\1\0\3\63\1\0\10\63\1\337\6\63"+
    "\3\0\6\63\10\0\3\63\14\0\1\340\63\0\1\341"+
    "\50\0\1\342\42\0\1\343\45\0\1\240\1\241\1\0"+
    "\3\107\1\0\6\107\1\344\6\107\1\0\1\107\3\0"+
    "\6\107\10\0\3\107\2\0\1\240\1\241\1\0\3\107"+
    "\1\0\10\107\1\345\4\107\1\0\1\107\3\0\6\107"+
    "\10\0\3\107\3\0\1\320\50\0\1\321\53\0\1\321"+
    "\32\0\1\346\34\0\1\347\57\0\1\350\71\0\1\351"+
    "\31\0\1\352\61\0\1\353\50\0\1\354\52\0\1\355"+
    "\20\0\1\356\37\0\1\357\32\0\1\215\1\216\1\0"+
    "\3\63\1\0\4\63\1\360\12\63\3\0\6\63\10\0"+
    "\3\63\15\0\1\361\63\0\1\362\50\0\1\363\36\0"+
    "\1\364\3\0\15\364\1\0\1\364\3\0\6\364\10\0"+
    "\3\364\2\0\1\240\1\241\1\0\3\107\1\0\15\107"+
    "\1\0\1\107\3\0\6\107\10\0\1\107\1\365\1\107"+
    "\25\0\1\366\40\0\1\367\60\0\1\370\72\0\1\371"+
    "\42\0\1\372\64\0\1\373\36\0\1\374\46\0\1\375"+
    "\54\0\1\376\60\0\1\377\33\0\1\215\1\216\1\0"+
    "\3\63\1\0\5\63\1\u0100\11\63\3\0\6\63\10\0"+
    "\3\63\16\0\1\u0101\56\0\1\u0102\50\0\1\u0103\42\0"+
    "\1\u0104\1\0\1\u0104\1\0\15\u0104\1\0\1\u0104\3\0"+
    "\6\u0104\10\0\3\u0104\34\0\1\u0105\42\0\1\u0106\51\0"+
    "\1\u0107\51\0\1\u0108\72\0\1\u0109\42\0\1\u010a\42\0"+
    "\1\u010b\56\0\1\u010c\56\0\1\u0101\52\0\1\u010d\34\0"+
    "\1\u010e\1\u010f\1\0\1\u0104\1\0\1\u0104\1\0\15\u0104"+
    "\1\0\1\u0104\3\0\6\u0104\10\0\3\u0104\22\0\1\u0110"+
    "\53\0\1\u0111\53\0\1\u0112\67\0\1\u0113\37\0\1\u0114"+
    "\53\0\1\u0115\34\0\1\u010f\106\0\1\u0116\40\0\1\u0101"+
    "\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8668];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\32\0\1\10\1\11\1\1\1\11\3\1\12\11\35\1"+
    "\1\11\3\1\2\11\2\1\2\11\3\1\2\11\2\1"+
    "\2\11\5\1\3\11\2\1\2\11\2\1\1\11\6\1"+
    "\1\11\2\1\3\11\10\0\2\11\6\0\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\1\0"+
    "\1\1\2\11\1\1\2\11\3\1\1\11\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\0\1\1\1\11\2\1\1\11"+
    "\1\0\2\11\12\0\1\1\4\0\2\1\2\0\1\11"+
    "\2\1\1\11\6\0\1\11\3\0\1\1\4\0\2\1"+
    "\12\0\1\1\4\0\1\1\3\0\1\11\2\0\1\11"+
    "\3\0\1\1\1\11\2\0\1\1\2\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\1\4\11\1\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }
  private Stack<Integer> stack = new Stack<Integer>();
  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 101: 
          { yybegin(WAITING_FOR_FSM_FILE); return FSM_FILE_KEYWORD;
          }
        case 103: break;
        case 57: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACE_OPEN;
          }
        case 104: break;
        case 92: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return STATIC_JAVA_KEYWORD;
          }
        case 105: break;
        case 51: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return PARENTHESES_CLOSE;
          }
        case 106: break;
        case 97: 
          { yybegin(WAITING_FOR_HEADER); return HEADER_KEYWORD;
          }
        case 107: break;
        case 46: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return ACTION_NAME;
          }
        case 108: break;
        case 91: 
          { yybegin(WAITING_FOR_START); return START_KEYWORD;
          }
        case 109: break;
        case 25: 
          { yybegin(WAITING_FOR_HEADER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 110: break;
        case 52: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS); return COMMA;
          }
        case 111: break;
        case 95: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return IMPORT_KEYWORD;
          }
        case 112: break;
        case 77: 
          { yybegin(WAITING_FOR_VERBATIM_CODE);  return VERBATIM_OPEN;
          }
        case 113: break;
        case 72: 
          { yybegin(WAITING_FOR_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 114: break;
        case 8: 
          { return BRACKET_OPEN;
          }
        case 115: break;
        case 59: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return BRACKET_OPEN;
          }
        case 116: break;
        case 64: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 117: break;
        case 23: 
          { yybegin(YYINITIAL); return FSM_FILE_NAME;
          }
        case 118: break;
        case 12: 
          { return ASSIGN_OP;
          }
        case 119: break;
        case 3: 
          { return COLON;
          }
        case 120: break;
        case 87: 
          { yybegin(WAITING_FOR_MAP); return MAP_KEYWORD;
          }
        case 121: break;
        case 80: 
          { yybegin(WAITING_FOR_STATE); return MAP_SECTION_BOUND;
          }
        case 122: break;
        case 55: 
          { yybegin(WAITING_FOR_PARAMETERS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 123: break;
        case 98: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return PACKAGE_KEYWORD;
          }
        case 124: break;
        case 34: 
          { yybegin(WAITING_FOR_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 125: break;
        case 35: 
          { yybegin(WAITING_FOR_STATE); return STATE_NAME;
          }
        case 126: break;
        case 32: 
          { yybegin(WAITING_FOR_MAP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 127: break;
        case 49: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 128: break;
        case 28: 
          { yybegin(YYINITIAL); return DECLARE_STATEMENT;
          }
        case 129: break;
        case 37: 
          { yybegin(WAITING_FOR_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 130: break;
        case 9: 
          { return BRACKET_CLOSE;
          }
        case 131: break;
        case 71: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return BRACKET_CLOSE;
          }
        case 132: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 133: break;
        case 18: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 134: break;
        case 30: 
          { yybegin(YYINITIAL); return INCLUDE_FILE_NAME;
          }
        case 135: break;
        case 67: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 136: break;
        case 13: 
          { return SLASH_SIGN;
          }
        case 137: break;
        case 38: 
          { yybegin(WAITING_FOR_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 138: break;
        case 11: 
          { return SEMICOLON;
          }
        case 139: break;
        case 53: 
          { yybegin(WAITING_FOR_TRANSITIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 140: break;
        case 10: 
          { return COMMA;
          }
        case 141: break;
        case 43: 
          { yybegin(WAITING_FOR_STATE); return BRACE_CLOSE;
          }
        case 142: break;
        case 40: 
          { yybegin(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 143: break;
        case 96: 
          { yybegin(WAITING_FOR_ACCESS); return ACCESS_KEYWORD;
          }
        case 144: break;
        case 93: 
          { yybegin(YYINITIAL); return ACCESS_LEVEL;
          }
        case 145: break;
        case 20: 
          { yybegin(WAITING_FOR_FSM_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 146: break;
        case 50: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 147: break;
        case 100: 
          { yybegin(WAITING_FOR_DECLARE); return DECLARE_KEYWORD;
          }
        case 148: break;
        case 68: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME);  yypushback(1); return GUARD_RAW_CODE;
          }
        case 149: break;
        case 60: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 150: break;
        case 26: 
          { yybegin(YYINITIAL); return HEADER_FILE_NAME;
          }
        case 151: break;
        case 58: 
          { yybegin(WAITING_FOR_PARAMETER_NAME);  return PARENTHESES_OPEN;
          }
        case 152: break;
        case 76: 
          { yybegin(WAITING_FOR_ACTIONS); return SEMICOLON;
          }
        case 153: break;
        case 65: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return PARAMETER_NAME;
          }
        case 154: break;
        case 48: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return SEMICOLON;
          }
        case 155: break;
        case 84: 
          { yybegin(WAITING_FOR_ACTIONS); return STRING_LITERAL;
          }
        case 156: break;
        case 42: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return BRACE_OPEN;
          }
        case 157: break;
        case 17: 
          { yybegin(YYINITIAL); return CONTEXT_CLASS_NAME;
          }
        case 158: break;
        case 14: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 159: break;
        case 79: 
          { yybegin(YYINITIAL);  yypushback(2); return VERBATIM_CODE;
          }
        case 160: break;
        case 16: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 161: break;
        case 6: 
          { return PARENTHESES_OPEN;
          }
        case 162: break;
        case 36: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_OPEN;
          }
        case 163: break;
        case 89: 
          { yybegin(WAITING_FOR_STATE_ENTRY); return ENTRY_KEYWORD;
          }
        case 164: break;
        case 63: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return COMMA;
          }
        case 165: break;
        case 66: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return COLON;
          }
        case 166: break;
        case 56: 
          { yybegin(WAITING_FOR_PARAMETERS); return NEXT_STATE_NAME;
          }
        case 167: break;
        case 69: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 168: break;
        case 70: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NEXT_STATE_NAME;
          }
        case 169: break;
        case 45: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 170: break;
        case 7: 
          { return PARENTHESES_CLOSE;
          }
        case 171: break;
        case 33: 
          { yybegin(WAITING_FOR_MAP); return MAP_NAME;
          }
        case 172: break;
        case 21: 
          { yybegin(YYINITIAL); return FSM_CLASS_NAME;
          }
        case 173: break;
        case 5: 
          { return BRACE_CLOSE;
          }
        case 174: break;
        case 29: 
          { yybegin(WAITING_FOR_INCLUDE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 175: break;
        case 62: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return PARENTHESES_CLOSE;
          }
        case 176: break;
        case 39: 
          { yybegin(WAITING_FOR_ACTIONS); return PARENTHESES_CLOSE;
          }
        case 177: break;
        case 31: 
          { yybegin(WAITING_FOR_START); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 178: break;
        case 41: 
          { yybegin(WAITING_FOR_STATE_ENTRY); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 179: break;
        case 15: 
          { yybegin(YYINITIAL); return PACKAGE_STATEMENT;
          }
        case 180: break;
        case 73: 
          { yybegin(WAITING_FOR_ACTIONS); return ACTION_NAME;
          }
        case 181: break;
        case 54: 
          { yybegin(WAITING_FOR_PARAMETERS); return TRANSITION_NAME;
          }
        case 182: break;
        case 19: 
          { yybegin(YYINITIAL); return IMPORT_CLASS_STATEMENT;
          }
        case 183: break;
        case 94: 
          { yybegin(YYINITIAL); return START_STATE_NAME;
          }
        case 184: break;
        case 4: 
          { return BRACE_OPEN;
          }
        case 185: break;
        case 82: 
          { return POP_KEYWORD;
          }
        case 186: break;
        case 74: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_CLOSE;
          }
        case 187: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 188: break;
        case 75: 
          { yybegin(WAITING_FOR_ARGUMENTS);  return PARENTHESES_OPEN;
          }
        case 189: break;
        case 78: 
          { yybegin(YYINITIAL); return VERBATIM_CLOSE;
          }
        case 190: break;
        case 44: 
          { yybegin(WAITING_FOR_STATE_EXIT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 191: break;
        case 22: 
          { yybegin(WAITING_FOR_FSM_FILE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 192: break;
        case 47: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS);  return PARENTHESES_OPEN;
          }
        case 193: break;
        case 90: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return CLASS_KEYWORD;
          }
        case 194: break;
        case 24: 
          { yybegin(WAITING_FOR_ACCESS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 195: break;
        case 99: 
          { yybegin(WAITING_FOR_INCLUDE); return INCLUDE_KEYWORD;
          }
        case 196: break;
        case 102: 
          { yybegin(WAITING_FOR_FSM_CLASS); return FSM_CLASS_KEYWORD;
          }
        case 197: break;
        case 83: 
          { return NIL_KEYWORD;
          }
        case 198: break;
        case 88: 
          { yybegin(WAITING_FOR_STATE_EXIT); return EXIT_KEYWORD;
          }
        case 199: break;
        case 81: 
          { yybegin(WAITING_FOR_MAP); return MAP_SECTION_BOUND;
          }
        case 200: break;
        case 85: 
          { yybegin(WAITING_FOR_PARAMETERS); return NIL_KEYWORD;
          }
        case 201: break;
        case 27: 
          { yybegin(WAITING_FOR_DECLARE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 202: break;
        case 61: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return PARAMETER_TYPE;
          }
        case 203: break;
        case 86: 
          { return PUSH_KEYWORD;
          }
        case 204: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
