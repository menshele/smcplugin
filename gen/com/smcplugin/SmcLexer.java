/* The following code was generated by JFlex 1.4.3 on 18.02.16 6:13 */

package com.smcplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import static com.smcplugin.psi.SmcTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18.02.16 6:13 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_FOR_NEXT_STATE_NAME = 48;
  public static final int WAITING_FOR_ENTRY_EXIT_ARGUMENTS = 36;
  public static final int WAITING_FOR_HEADER = 16;
  public static final int WAITING_FOR_FSM_FILE = 12;
  public static final int WAITING_FOR_ACCESS = 14;
  public static final int WAITING_FOR_ACTIONS = 50;
  public static final int WAITING_FOR_INCLUDE = 20;
  public static final int WAITING_FOR_ARGUMENTS = 28;
  public static final int WAITING_FOR_GUARD_RAW_CODE = 46;
  public static final int WAITING_FOR_ENTRY_EXIT_ACTIONS = 34;
  public static final int WAITING_FOR_MAP = 24;
  public static final int WAITING_FOR_ACTION_NAME = 52;
  public static final int WAITING_FOR_CONTEXT_CLASS = 6;
  public static final int WAITING_FOR_PACKAGE_STATEMENT = 4;
  public static final int WAITING_FOR_IMPORT_CLASS = 8;
  public static final int WAITING_FOR_START = 22;
  public static final int WAITING_FOR_STATE = 26;
  public static final int WAITING_FOR_DECLARE = 18;
  public static final int WAITING_FOR_TRANSITIONS = 38;
  public static final int WAITING_FOR_PARAMETER_NAME = 44;
  public static final int WAITING_FOR_STATE_EXIT = 32;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_PARAMETERS = 40;
  public static final int WAITING_FOR_FSM_CLASS = 10;
  public static final int WAITING_FOR_VERBATIM_CODE = 2;
  public static final int WAITING_FOR_PARAMETER_TYPE = 42;
  public static final int WAITING_FOR_STATE_ENTRY = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\4\0\1\30"+
    "\2\0\1\41\1\26\1\25\1\0\1\44\1\0\1\5\1\47\12\6"+
    "\1\7\1\45\1\0\1\46\3\0\1\66\1\61\1\55\1\71\1\53"+
    "\1\64\1\74\1\70\1\51\1\4\1\62\1\50\1\57\1\52\1\56"+
    "\1\73\1\4\1\63\1\65\1\60\1\72\1\75\1\77\1\67\1\76"+
    "\1\4\1\42\1\0\1\43\1\0\1\54\1\0\1\24\1\12\1\15"+
    "\1\22\1\21\1\37\1\34\1\40\1\14\1\4\1\33\1\13\1\35"+
    "\1\27\1\17\1\10\1\4\1\16\1\36\1\20\1\11\1\23\1\4"+
    "\1\101\1\100\1\4\1\31\1\0\1\32\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\20\1\1\16\1\17\1\20\1\21\1\22\2\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\1\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\1\1\40\1\41\1\1"+
    "\1\42\1\43\1\1\1\44\1\43\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\2\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\1\1\103\1\104\1\105\2\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\10\0\1\115"+
    "\1\116\30\0\1\115\1\117\2\17\2\21\3\23\2\25"+
    "\2\27\2\0\2\32\2\34\2\36\1\0\2\41\1\120"+
    "\2\43\1\121\2\43\2\46\2\56\2\62\2\66\3\70"+
    "\2\75\2\101\1\0\3\106\2\111\1\0\1\122\1\123"+
    "\35\0\1\23\4\0\2\43\2\124\1\125\6\0\1\126"+
    "\10\0\1\127\15\0\1\130\1\23\4\0\1\43\1\131"+
    "\35\0\1\23\4\0\1\132\3\0\1\133\2\0\1\134"+
    "\26\0\1\135\1\136\2\0\1\137\2\0\1\140\1\0"+
    "\1\141\2\0\1\142\24\0\2\137\1\143\1\144\1\145"+
    "\1\0\1\146\5\0\1\147\16\0\1\150\32\0\1\151"+
    "\33\0\1\152\10\0\1\153\16\0\1\154\25\0\1\155"+
    "\1\156\1\157\2\0\1\160\2\0\1\161\12\0\1\162"+
    "\1\0\1\163\3\0\1\164\2\0\1\165\1\0\1\166"+
    "\1\0\1\167\1\0\1\170\1\171\6\0\1\172\1\173";

  private static int [] zzUnpackAction() {
    int [] result = new int[564];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06b4\0\u06f6\0\u06b4\0\u0738\0\u06b4"+
    "\0\u077a\0\u07bc\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u06b4"+
    "\0\u06b4\0\u06b4\0\u06b4\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36"+
    "\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u06b4\0\u1314"+
    "\0\u1356\0\u1398\0\u06b4\0\u06b4\0\u13da\0\u06b4\0\u06b4\0\u141c"+
    "\0\u145e\0\u14a0\0\u06b4\0\u06b4\0\u14e2\0\u1524\0\u06b4\0\u06b4"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u06b4\0\u06b4\0\u06b4"+
    "\0\u16b0\0\u16f2\0\u06b4\0\u06b4\0\u1734\0\u1776\0\u06b4\0\u17b8"+
    "\0\u17fa\0\u17b8\0\u183c\0\u187e\0\u18c0\0\u06b4\0\u1902\0\u1944"+
    "\0\u06b4\0\u06b4\0\u06b4\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e"+
    "\0\u1ad0\0\u1b12\0\u1b54\0\u06b4\0\u06b4\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a"+
    "\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u2100\0\u0b9a\0\u2142\0\u0b9a\0\u0b9a\0\u2184"+
    "\0\u06b4\0\u21c6\0\u06b4\0\u2208\0\u06b4\0\u224a\0\u228c\0\u06b4"+
    "\0\u22ce\0\u06b4\0\u2310\0\u2352\0\u2394\0\u06b4\0\u23d6\0\u06b4"+
    "\0\u2418\0\u06b4\0\u245a\0\u249c\0\u06b4\0\u06b4\0\u24de\0\u06b4"+
    "\0\u06b4\0\u2520\0\u2562\0\u25a4\0\u06b4\0\u25e6\0\u06b4\0\u2628"+
    "\0\u06b4\0\u266a\0\u06b4\0\u26ac\0\u06b4\0\u26ee\0\u2730\0\u06b4"+
    "\0\u2772\0\u06b4\0\u17b8\0\u27b4\0\u06b4\0\u27f6\0\u2838\0\u06b4"+
    "\0\u287a\0\u06b4\0\u06b4\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4"+
    "\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4"+
    "\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4"+
    "\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u162c"+
    "\0\u187e\0\u06b4\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e"+
    "\0\u06b4\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c"+
    "\0\u355e\0\u06b4\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea"+
    "\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u06b4"+
    "\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u1290\0\u3a86"+
    "\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96"+
    "\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6"+
    "\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6"+
    "\0\u40f8\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6"+
    "\0\u4308\0\u1290\0\u434a\0\u438c\0\u43ce\0\u06b4\0\u4410\0\u4452"+
    "\0\u06b4\0\u4494\0\u44d6\0\u4518\0\u455a\0\u459c\0\u45de\0\u4620"+
    "\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830"+
    "\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u0d68"+
    "\0\u06b4\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u06b4\0\u4b8a"+
    "\0\u06b4\0\u4bcc\0\u4c0e\0\u06b4\0\u4c50\0\u4c92\0\u4cd4\0\u4d16"+
    "\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26"+
    "\0\u4f68\0\u4faa\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136"+
    "\0\u5178\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u51ba\0\u06b4\0\u51fc"+
    "\0\u523e\0\u5280\0\u52c2\0\u5304\0\u06b4\0\u5346\0\u5388\0\u53ca"+
    "\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da"+
    "\0\u561c\0\u565e\0\u56a0\0\u06b4\0\u56e2\0\u5724\0\u5766\0\u57a8"+
    "\0\u57ea\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976\0\u59b8"+
    "\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u5b86\0\u5bc8"+
    "\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u06b4\0\u5d96"+
    "\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6"+
    "\0\u5fe8\0\u602a\0\u606c\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u61b6"+
    "\0\u61f8\0\u623a\0\u627c\0\u62be\0\u6300\0\u6342\0\u6384\0\u63c6"+
    "\0\u6408\0\u644a\0\u06b4\0\u648c\0\u64ce\0\u6510\0\u6552\0\u6594"+
    "\0\u65d6\0\u6618\0\u665a\0\u06b4\0\u669c\0\u66de\0\u6720\0\u6762"+
    "\0\u67a4\0\u67e6\0\u6828\0\u686a\0\u68ac\0\u68ee\0\u6930\0\u6972"+
    "\0\u69b4\0\u69f6\0\u06b4\0\u6a38\0\u6a7a\0\u6abc\0\u6afe\0\u6b40"+
    "\0\u6b82\0\u6bc4\0\u6c06\0\u6c48\0\u6c8a\0\u6ccc\0\u6d0e\0\u6d50"+
    "\0\u6d92\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a\0\u6edc\0\u6f1e\0\u6f60"+
    "\0\u06b4\0\u06b4\0\u06b4\0\u6fa2\0\u6fe4\0\u06b4\0\u7026\0\u7068"+
    "\0\u06b4\0\u70aa\0\u70ec\0\u712e\0\u7170\0\u71b2\0\u71f4\0\u7236"+
    "\0\u7278\0\u72ba\0\u72fc\0\u06b4\0\u733e\0\u06b4\0\u7380\0\u73c2"+
    "\0\u7404\0\u06b4\0\u7446\0\u7488\0\u06b4\0\u74ca\0\u06b4\0\u750c"+
    "\0\u06b4\0\u754e\0\u06b4\0\u06b4\0\u7590\0\u75d2\0\u7614\0\u7656"+
    "\0\u7698\0\u76da\0\u06b4\0\u06b4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[564];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\34\3\35\3\34\1\36\1\37\15\34\1\40\1\41"+
    "\1\42\1\43\1\44\6\34\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\2\34\1\57"+
    "\1\34\1\60\1\61\1\62\3\34\1\63\1\64\1\34"+
    "\1\65\1\66\1\34\1\67\1\70\2\34\1\71\2\34"+
    "\30\72\1\73\51\72\1\34\3\74\1\75\3\34\15\75"+
    "\2\34\1\75\3\34\6\75\7\34\4\75\1\34\25\75"+
    "\1\34\3\76\1\77\3\34\15\77\2\34\1\77\3\34"+
    "\6\77\7\34\4\77\1\34\25\77\1\34\3\100\1\101"+
    "\3\34\15\101\2\34\1\101\3\34\3\101\1\102\2\101"+
    "\7\34\4\101\1\34\25\101\1\34\3\103\1\104\3\34"+
    "\15\104\2\34\1\104\3\34\6\104\7\34\4\104\1\34"+
    "\25\104\1\34\3\105\1\106\3\34\15\106\2\34\1\106"+
    "\3\34\6\106\7\34\4\106\1\34\25\106\1\34\3\107"+
    "\4\34\1\110\72\34\3\111\1\112\3\34\15\112\2\34"+
    "\1\112\3\34\6\112\7\34\4\112\1\34\25\112\1\34"+
    "\3\113\1\114\3\34\15\114\2\34\1\114\3\34\6\114"+
    "\7\34\4\114\1\34\25\114\1\34\3\115\1\116\3\34"+
    "\15\116\2\34\1\116\3\34\6\116\7\34\4\116\1\34"+
    "\25\116\1\34\3\117\1\120\3\34\15\120\2\34\1\120"+
    "\3\34\6\120\7\34\4\120\1\34\25\120\1\34\3\121"+
    "\1\122\3\34\15\122\2\34\1\122\1\123\2\34\6\122"+
    "\7\34\4\122\1\34\25\122\1\34\3\124\1\125\3\34"+
    "\15\125\2\34\1\125\1\126\1\127\1\34\6\125\7\34"+
    "\3\125\1\130\1\34\25\125\1\34\3\131\1\132\3\34"+
    "\15\132\1\34\1\133\1\132\3\34\6\132\3\34\1\134"+
    "\3\34\4\132\1\34\25\132\1\34\3\135\25\34\1\136"+
    "\1\137\50\34\3\140\25\34\1\136\1\137\50\34\3\141"+
    "\1\142\3\34\15\142\2\34\1\142\2\34\1\137\6\142"+
    "\1\143\3\34\1\144\2\34\4\142\1\34\25\142\1\34"+
    "\3\145\1\146\3\34\15\146\1\34\1\147\1\146\3\34"+
    "\6\146\3\34\1\150\3\34\4\146\1\34\25\146\1\34"+
    "\3\151\1\152\3\34\15\152\2\34\1\152\2\34\1\137"+
    "\6\152\7\34\4\152\1\34\25\152\1\34\3\153\1\154"+
    "\3\34\15\154\2\34\1\155\1\34\1\156\1\137\6\154"+
    "\1\157\1\160\5\34\4\154\1\34\25\154\1\34\3\161"+
    "\1\162\3\34\15\162\1\34\1\163\1\162\3\34\6\162"+
    "\3\34\1\164\3\34\4\162\1\34\25\162\1\34\3\165"+
    "\1\166\2\34\1\167\15\166\2\34\1\166\3\34\6\166"+
    "\7\34\4\166\1\34\25\166\1\170\3\171\37\170\1\172"+
    "\36\170\1\34\3\173\1\174\3\34\15\174\2\34\1\175"+
    "\1\34\1\156\1\34\6\174\1\34\1\160\1\176\4\34"+
    "\4\174\1\34\25\174\1\34\3\177\1\200\3\34\15\200"+
    "\2\34\1\200\2\34\1\201\6\200\1\202\3\34\1\203"+
    "\2\34\4\200\1\34\25\200\103\0\3\35\107\0\1\204"+
    "\5\0\1\205\76\0\1\206\75\0\1\207\3\0\1\210"+
    "\1\211\4\0\1\212\1\0\1\213\4\0\1\214\1\215"+
    "\2\0\1\216\1\217\1\220\1\221\112\0\1\222\102\0"+
    "\1\223\4\0\1\224\75\0\1\225\104\0\1\226\4\0"+
    "\1\227\104\0\1\230\76\0\1\231\66\0\1\232\111\0"+
    "\1\233\76\0\1\234\5\0\1\235\71\0\1\236\101\0"+
    "\1\237\104\0\1\240\7\0\1\241\105\0\1\242\65\0"+
    "\1\243\23\0\30\244\1\245\101\244\1\245\1\246\1\247"+
    "\47\244\1\0\3\74\77\0\1\250\1\251\1\0\3\75"+
    "\1\0\15\75\2\0\1\75\3\0\6\75\7\0\32\75"+
    "\1\0\3\76\77\0\1\252\1\253\1\0\3\77\1\0"+
    "\15\77\2\0\1\77\3\0\6\77\7\0\32\77\1\0"+
    "\3\100\77\0\1\254\1\255\1\0\3\101\1\0\16\101"+
    "\1\0\1\101\3\0\6\101\7\0\32\101\1\0\1\254"+
    "\1\255\1\0\3\101\1\0\10\101\1\256\5\101\1\0"+
    "\1\101\3\0\6\101\7\0\32\101\1\0\3\103\77\0"+
    "\1\257\1\260\1\0\3\104\1\0\15\104\2\0\1\104"+
    "\3\0\6\104\7\0\32\104\1\0\3\105\77\0\1\261"+
    "\1\262\1\0\3\106\1\0\15\106\2\0\1\106\3\0"+
    "\6\106\7\0\32\106\1\0\3\107\107\0\1\263\4\0"+
    "\1\264\64\0\3\111\77\0\1\265\1\266\1\0\3\112"+
    "\1\0\15\112\2\0\1\112\3\0\6\112\7\0\32\112"+
    "\1\0\3\113\77\0\1\267\1\270\1\0\3\114\1\0"+
    "\15\114\2\0\1\114\3\0\6\114\7\0\32\114\1\0"+
    "\3\115\77\0\1\271\1\272\1\0\3\116\1\0\15\116"+
    "\2\0\1\116\3\0\6\116\7\0\32\116\1\0\3\117"+
    "\102\0\1\273\1\0\1\273\1\0\15\273\2\0\1\273"+
    "\3\0\6\273\7\0\4\273\1\0\25\273\1\0\3\121"+
    "\77\0\1\274\1\275\1\0\3\122\1\0\15\122\2\0"+
    "\1\122\3\0\6\122\7\0\32\122\30\0\1\276\52\0"+
    "\3\124\77\0\1\277\1\300\1\0\3\125\1\0\15\125"+
    "\2\0\1\125\3\0\6\125\7\0\32\125\30\0\1\301"+
    "\52\0\1\277\1\300\1\0\3\125\1\0\15\125\2\0"+
    "\1\302\3\0\6\125\7\0\31\125\1\303\1\0\3\131"+
    "\77\0\1\304\1\305\1\0\3\132\1\0\15\132\2\0"+
    "\1\132\3\0\6\132\7\0\32\132\1\0\3\135\77\0"+
    "\3\140\77\0\3\141\77\0\1\306\1\307\1\0\3\142"+
    "\1\0\15\142\2\0\1\142\3\0\6\142\7\0\32\142"+
    "\1\0\3\145\77\0\1\310\1\311\1\0\3\146\1\0"+
    "\15\146\2\0\1\146\3\0\6\146\7\0\32\146\1\0"+
    "\3\151\77\0\1\312\1\313\1\0\3\152\1\0\15\152"+
    "\2\0\1\152\3\0\6\152\7\0\32\152\1\0\3\153"+
    "\77\0\1\314\1\315\1\0\3\154\1\0\15\154\2\0"+
    "\1\154\3\0\6\154\7\0\32\154\1\0\1\314\1\315"+
    "\1\0\3\154\1\0\4\154\1\316\10\154\2\0\1\154"+
    "\3\0\6\154\7\0\32\154\1\0\3\161\77\0\1\317"+
    "\1\320\1\0\3\162\1\0\15\162\2\0\1\162\3\0"+
    "\6\162\7\0\32\162\1\0\3\165\77\0\1\321\1\322"+
    "\1\0\3\166\1\0\15\166\2\0\1\166\3\0\6\166"+
    "\7\0\32\166\43\323\1\172\37\323\3\171\37\323\1\172"+
    "\36\323\1\0\3\173\77\0\1\324\1\325\1\0\3\174"+
    "\1\0\15\174\2\0\1\174\3\0\6\174\7\0\32\174"+
    "\1\0\1\324\1\325\1\0\3\174\1\0\4\174\1\326"+
    "\10\174\2\0\1\174\3\0\6\174\7\0\32\174\1\0"+
    "\3\177\77\0\1\327\1\330\1\0\3\200\1\0\15\200"+
    "\2\0\1\200\3\0\6\200\7\0\32\200\36\0\1\331"+
    "\53\0\1\332\104\0\1\333\112\0\1\334\104\0\1\335"+
    "\5\0\1\336\57\0\1\337\107\0\1\340\75\0\1\341"+
    "\110\0\1\342\75\0\1\343\117\0\1\344\64\0\1\345"+
    "\132\0\1\346\104\0\1\347\117\0\1\350\75\0\1\351"+
    "\64\0\1\352\77\0\1\353\124\0\1\354\74\0\1\355"+
    "\71\0\1\356\111\0\1\357\70\0\1\360\120\0\1\361"+
    "\73\0\1\362\70\0\1\363\117\0\1\364\63\0\1\365"+
    "\5\0\1\366\104\0\1\367\76\0\1\370\16\0\30\244"+
    "\1\245\1\244\1\247\47\244\2\0\1\251\101\0\1\253"+
    "\101\0\1\255\100\0\1\254\1\255\1\0\3\101\1\0"+
    "\14\101\1\371\1\101\1\0\1\101\3\0\6\101\7\0"+
    "\32\101\2\0\1\260\101\0\1\262\111\0\1\372\103\0"+
    "\1\373\2\0\1\374\64\0\1\266\101\0\1\270\101\0"+
    "\1\272\103\0\1\273\1\0\1\273\1\375\15\273\2\0"+
    "\1\273\3\0\6\273\7\0\4\273\1\0\25\273\2\0"+
    "\1\275\101\0\1\300\100\0\1\277\1\300\1\0\3\125"+
    "\1\0\10\125\1\376\4\125\2\0\1\125\3\0\6\125"+
    "\7\0\32\125\1\0\1\277\1\300\1\0\3\125\1\0"+
    "\4\125\1\377\10\125\2\0\1\125\3\0\6\125\7\0"+
    "\32\125\2\0\1\305\101\0\1\307\101\0\1\311\101\0"+
    "\1\313\101\0\1\315\100\0\1\314\1\315\1\0\3\154"+
    "\1\0\3\154\1\u0100\11\154\2\0\1\154\3\0\6\154"+
    "\7\0\32\154\2\0\1\320\101\0\1\322\101\0\1\325"+
    "\100\0\1\324\1\325\1\0\3\174\1\0\3\174\1\u0101"+
    "\11\174\2\0\1\174\3\0\6\174\7\0\32\174\2\0"+
    "\1\330\137\0\1\u0102\56\0\1\u0103\101\0\1\u0104\74\0"+
    "\1\u0105\115\0\1\u0106\72\0\1\u0107\101\0\1\u0108\74\0"+
    "\1\u0109\115\0\1\u010a\112\0\1\u010b\70\0\1\u010c\130\0"+
    "\1\u010d\76\0\1\u010e\107\0\1\u010f\103\0\1\u0110\101\0"+
    "\1\u0111\105\0\1\u0112\71\0\1\u0113\77\0\1\u0114\104\0"+
    "\1\u0115\104\0\1\u0116\2\0\1\u0117\71\0\1\u0118\120\0"+
    "\1\u0119\100\0\1\u011a\60\0\1\u011b\105\0\1\u011c\107\0"+
    "\1\u011d\105\0\1\u011e\76\0\1\u011f\107\0\1\u0120\11\0"+
    "\1\254\1\255\1\0\3\101\1\0\10\101\1\u0121\5\101"+
    "\1\0\1\101\3\0\6\101\7\0\32\101\13\0\1\u0122"+
    "\111\0\1\u0123\76\0\1\u0124\70\0\1\u0125\73\0\1\277"+
    "\1\300\1\0\3\125\1\0\6\125\1\u0126\6\125\2\0"+
    "\1\125\3\0\6\125\7\0\32\125\1\0\1\277\1\300"+
    "\1\0\3\125\1\0\10\125\1\u0127\4\125\2\0\1\125"+
    "\3\0\6\125\7\0\32\125\33\0\1\u0128\61\0\1\u0129"+
    "\105\0\1\u012a\120\0\1\u012b\56\0\1\u012c\107\0\1\u012d"+
    "\76\0\1\u012e\100\0\1\u012f\21\0\1\u0130\64\0\1\u0131"+
    "\133\0\1\u0132\117\0\1\u0133\72\0\1\u0134\72\0\1\u0135"+
    "\100\0\1\u0136\100\0\1\u0137\12\0\1\u0138\101\0\1\u0139"+
    "\76\0\1\u013a\72\0\1\u013b\106\0\1\u013c\106\0\1\u013d"+
    "\73\0\1\u013e\75\0\1\u013f\114\0\1\u0140\101\0\1\u0141"+
    "\101\0\1\u0142\72\0\1\u0143\113\0\1\u0144\11\0\1\254"+
    "\1\255\1\0\3\101\1\0\4\101\1\u0145\11\101\1\0"+
    "\1\101\3\0\6\101\7\0\32\101\14\0\1\u0146\111\0"+
    "\1\u0147\76\0\1\u0148\64\0\1\u0149\3\0\15\u0149\2\0"+
    "\1\u0149\3\0\6\u0149\7\0\4\u0149\1\0\25\u0149\1\0"+
    "\1\277\1\300\1\0\3\125\1\0\15\125\2\0\1\125"+
    "\3\0\6\125\7\0\30\125\1\u014a\1\125\24\0\1\u014b"+
    "\66\0\1\u014c\106\0\1\u014d\121\0\1\u014e\67\0\1\u014f"+
    "\113\0\1\u0150\63\0\1\u0151\74\0\1\u0152\102\0\1\u0153"+
    "\106\0\1\u0154\135\0\1\u0155\115\0\1\u0156\70\0\1\u0157"+
    "\106\0\1\u0158\103\0\1\u0159\100\0\1\u015a\66\0\1\u015b"+
    "\77\0\1\u015c\104\0\1\u015d\101\0\1\u015e\101\0\1\u015f"+
    "\112\0\1\u0160\67\0\1\u0161\111\0\1\u0162\101\0\1\u0163"+
    "\101\0\1\u0164\112\0\1\u0165\60\0\1\u0166\102\0\1\u0167"+
    "\26\0\1\254\1\255\1\0\3\101\1\0\5\101\1\u0168"+
    "\10\101\1\0\1\101\3\0\6\101\7\0\32\101\15\0"+
    "\1\u0169\104\0\1\u016a\76\0\1\u016b\70\0\1\u016c\1\0"+
    "\1\u016c\1\0\15\u016c\2\0\1\u016c\3\0\6\u016c\7\0"+
    "\4\u016c\1\0\25\u016c\34\0\1\u016d\67\0\1\u016e\77\0"+
    "\1\u016f\77\0\1\u0170\121\0\1\u0171\67\0\1\u0172\70\0"+
    "\1\u0173\104\0\1\u0174\141\0\1\u0175\76\0\1\u0176\102\0"+
    "\1\u0177\105\0\1\u0178\101\0\1\u0179\100\0\1\u017a\77\0"+
    "\1\u017b\104\0\1\u017c\76\0\1\u017d\76\0\1\u017e\114\0"+
    "\1\u017f\70\0\1\u0180\77\0\1\u0181\103\0\1\u0182\100\0"+
    "\1\u0183\122\0\1\u0184\60\0\1\u0185\106\0\1\u0186\104\0"+
    "\1\u0187\37\0\1\u0169\100\0\1\u0188\62\0\1\u0189\1\u018a"+
    "\1\0\1\u016c\1\0\1\u016c\1\0\15\u016c\2\0\1\u016c"+
    "\3\0\6\u016c\7\0\4\u016c\1\0\25\u016c\21\0\1\u018b"+
    "\101\0\1\u018c\101\0\1\u018d\116\0\1\u018e\64\0\1\u018f"+
    "\137\0\1\u0190\76\0\1\u0191\102\0\1\u0192\112\0\1\u0193"+
    "\67\0\1\u0194\100\0\1\u0195\106\0\1\u0196\72\0\1\u0197"+
    "\106\0\1\u0198\111\0\1\u0199\73\0\1\u019a\71\0\1\u019b"+
    "\111\0\1\u019c\105\0\1\u019d\71\0\1\u019e\117\0\1\u019f"+
    "\63\0\1\u01a0\100\0\1\u01a1\114\0\1\u01a2\34\0\1\u01a3"+
    "\62\0\1\u018a\135\0\1\u01a4\122\0\1\u01a5\106\0\1\u01a6"+
    "\65\0\1\u01a7\111\0\1\u01a8\76\0\1\u01a9\75\0\1\u01aa"+
    "\106\0\1\u01ab\102\0\1\u01ac\101\0\1\u01ad\110\0\1\u01ae"+
    "\66\0\1\u01af\102\0\1\u01b0\76\0\1\u01b1\115\0\1\u01b2"+
    "\73\0\1\u01b3\107\0\1\u01b4\77\0\1\u01b5\115\0\1\u01b6"+
    "\24\0\1\u0169\132\0\1\u01b7\77\0\1\u01b8\116\0\1\u01b9"+
    "\66\0\1\u01ba\76\0\1\u01bb\107\0\1\u01bc\75\0\1\u01bd"+
    "\106\0\1\u01be\75\0\1\u01bf\106\0\1\u01c0\116\0\1\u01c1"+
    "\71\0\1\u01c2\64\0\1\u01c3\111\0\1\u01c4\74\0\1\u01c5"+
    "\106\0\1\u01c6\75\0\1\u01c7\101\0\1\u01c8\77\0\1\u01c9"+
    "\77\0\1\u01ca\116\0\1\u01cb\70\0\1\u01cc\113\0\1\u01cd"+
    "\65\0\1\u01ce\103\0\1\u01cf\100\0\1\u01d0\101\0\1\u01d1"+
    "\101\0\1\u01d2\106\0\1\u01d3\74\0\1\u01d4\114\0\1\u01d5"+
    "\65\0\1\u01d6\115\0\1\u01d7\65\0\1\u01d8\5\0\1\u01d9"+
    "\76\0\1\u01da\104\0\1\u01db\74\0\1\u01dc\113\0\1\u01dd"+
    "\66\0\1\u01de\114\0\1\u01df\70\0\1\u01e0\77\0\1\u01e1"+
    "\101\0\1\u01e2\103\0\1\u01e3\75\0\1\u01e4\117\0\1\u01e5"+
    "\67\0\1\u01e6\105\0\1\u01e7\101\0\1\u01e8\101\0\1\u01e9"+
    "\107\0\1\u01ea\111\0\1\u01eb\61\0\1\u01ec\77\0\1\u01ed"+
    "\101\0\1\u01ee\113\0\1\u01ef\100\0\1\u01f0\75\0\1\u01f1"+
    "\106\0\1\u01f2\73\0\1\u01f3\73\0\1\u01f4\107\0\1\u01f5"+
    "\73\0\1\u01f6\102\0\1\u01f7\102\0\1\u01f8\100\0\1\u01f9"+
    "\105\0\1\u01fa\115\0\1\u01fb\77\0\1\u01fc\62\0\1\u01fd"+
    "\114\0\1\u01fe\73\0\1\u01ff\76\0\1\u0200\103\0\1\u0201"+
    "\102\0\1\u0202\110\0\1\u0203\66\0\1\u0204\114\0\1\u0205"+
    "\72\0\1\u0206\105\0\1\u0207\75\0\1\u0208\75\0\1\u0209"+
    "\101\0\1\u020a\101\0\1\u020b\114\0\1\u020c\73\0\1\u020d"+
    "\74\0\1\u020e\100\0\1\u020f\121\0\1\u0210\62\0\1\u0211"+
    "\105\0\1\u0212\101\0\1\u0213\101\0\1\u0214\75\0\1\u0215"+
    "\114\0\1\u0216\66\0\1\u0217\105\0\1\u0218\110\0\1\u0219"+
    "\101\0\1\u021a\65\0\1\u021b\102\0\1\u021c\101\0\1\u021d"+
    "\101\0\1\u021e\100\0\1\u021f\126\0\1\u0220\54\0\1\u0221"+
    "\102\0\1\u0222\106\0\1\u0223\100\0\1\u0224\113\0\1\u0225"+
    "\62\0\1\u0226\107\0\1\u0227\75\0\1\u0228\105\0\1\u0229"+
    "\74\0\1\u022a\101\0\1\u022b\106\0\1\u022c\76\0\1\u022d"+
    "\103\0\1\u022e\100\0\1\u022f\76\0\1\u0230\117\0\1\u0231"+
    "\62\0\1\u0232\102\0\1\u0233\106\0\1\u0234\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30492];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\32\0\1\10\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\11\11\53\1\1\11\3\1\2\11\1\1\2\11\3\1"+
    "\2\11\2\1\2\11\5\1\3\11\2\1\2\11\2\1"+
    "\1\11\6\1\1\11\2\1\3\11\10\0\2\11\30\0"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\2\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\0\1\1\2\11\1\1\2\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\0\1\1\1\11\2\1"+
    "\1\11\1\0\2\11\35\0\1\1\4\0\4\1\1\11"+
    "\6\0\1\11\10\0\1\11\15\0\1\11\1\1\4\0"+
    "\2\1\35\0\1\1\4\0\1\1\3\0\1\11\2\0"+
    "\1\11\26\0\1\1\1\11\2\0\1\1\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\24\0\1\1\4\11\1\0"+
    "\1\11\5\0\1\11\16\0\1\11\32\0\1\11\33\0"+
    "\1\11\10\0\1\11\16\0\1\11\25\0\3\11\2\0"+
    "\1\11\2\0\1\11\12\0\1\11\1\0\1\11\3\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\2\11\6\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[564];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }
  private Stack<Integer> stack = new Stack<Integer>();
  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 102: 
          { yybegin(WAITING_FOR_FSM_FILE); return FSM_FILE_KEYWORD;
          }
        case 124: break;
        case 57: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACE_OPEN;
          }
        case 125: break;
        case 51: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return BRACKET_CLOSE;
          }
        case 126: break;
        case 108: 
          { return BLOCK_COMMENT;
          }
        case 127: break;
        case 93: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return STATIC_JAVA_KEYWORD;
          }
        case 128: break;
        case 98: 
          { yybegin(WAITING_FOR_HEADER); return HEADER_KEYWORD;
          }
        case 129: break;
        case 46: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return ACTION_NAME;
          }
        case 130: break;
        case 92: 
          { yybegin(WAITING_FOR_START); return START_KEYWORD;
          }
        case 131: break;
        case 25: 
          { yybegin(WAITING_FOR_HEADER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 132: break;
        case 52: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS); return COMMA;
          }
        case 133: break;
        case 96: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return IMPORT_KEYWORD;
          }
        case 134: break;
        case 77: 
          { yybegin(WAITING_FOR_VERBATIM_CODE);  return VERBATIM_OPEN;
          }
        case 135: break;
        case 72: 
          { yybegin(WAITING_FOR_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 136: break;
        case 7: 
          { return BRACKET_OPEN;
          }
        case 137: break;
        case 64: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 138: break;
        case 23: 
          { yybegin(YYINITIAL); return FSM_FILE_NAME;
          }
        case 139: break;
        case 12: 
          { return ASSIGN_OP;
          }
        case 140: break;
        case 3: 
          { return COLON;
          }
        case 141: break;
        case 115: 
          { return HEADER_FILE_NAME;
          }
        case 142: break;
        case 86: 
          { yybegin(WAITING_FOR_MAP); return MAP_KEYWORD;
          }
        case 143: break;
        case 80: 
          { yybegin(WAITING_FOR_STATE); return MAP_SECTION_BOUND;
          }
        case 144: break;
        case 103: 
          { return MAP_NAME;
          }
        case 145: break;
        case 55: 
          { yybegin(WAITING_FOR_PARAMETERS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 146: break;
        case 117: 
          { return MAP_SECTION_BOUND;
          }
        case 147: break;
        case 99: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return PACKAGE_KEYWORD;
          }
        case 148: break;
        case 34: 
          { yybegin(WAITING_FOR_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 149: break;
        case 35: 
          { yybegin(WAITING_FOR_STATE); return STATE_NAME;
          }
        case 150: break;
        case 32: 
          { yybegin(WAITING_FOR_MAP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 151: break;
        case 109: 
          { return PARAMETER_NAME;
          }
        case 152: break;
        case 49: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 153: break;
        case 28: 
          { yybegin(YYINITIAL); return DECLARE_STATEMENT;
          }
        case 154: break;
        case 37: 
          { yybegin(WAITING_FOR_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 155: break;
        case 4: 
          { return BRACKET_CLOSE;
          }
        case 156: break;
        case 62: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return BRACKET_CLOSE;
          }
        case 157: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 158: break;
        case 18: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 159: break;
        case 30: 
          { yybegin(YYINITIAL); return INCLUDE_FILE_NAME;
          }
        case 160: break;
        case 67: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 161: break;
        case 122: 
          { return POP_ARGUMENT_RAW_CODE;
          }
        case 162: break;
        case 13: 
          { return SLASH_SIGN;
          }
        case 163: break;
        case 38: 
          { yybegin(WAITING_FOR_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 164: break;
        case 59: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return GUARD_OPEN;
          }
        case 165: break;
        case 11: 
          { return SEMICOLON;
          }
        case 166: break;
        case 53: 
          { yybegin(WAITING_FOR_TRANSITIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 167: break;
        case 118: 
          { return DECLARE_STATEMENT;
          }
        case 168: break;
        case 10: 
          { return COMMA;
          }
        case 169: break;
        case 43: 
          { yybegin(WAITING_FOR_STATE); return BRACE_CLOSE;
          }
        case 170: break;
        case 40: 
          { yybegin(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 171: break;
        case 97: 
          { yybegin(WAITING_FOR_ACCESS); return ACCESS_KEYWORD;
          }
        case 172: break;
        case 116: 
          { return INCLUDE_FILE_NAME;
          }
        case 173: break;
        case 94: 
          { yybegin(YYINITIAL); return ACCESS_LEVEL;
          }
        case 174: break;
        case 20: 
          { yybegin(WAITING_FOR_FSM_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 175: break;
        case 50: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 176: break;
        case 111: 
          { return GUARD_RAW_CODE;
          }
        case 177: break;
        case 101: 
          { yybegin(WAITING_FOR_DECLARE); return DECLARE_KEYWORD;
          }
        case 178: break;
        case 114: 
          { return START_STATE_NAME;
          }
        case 179: break;
        case 120: 
          { return CONTEXT_CLASS_NAME;
          }
        case 180: break;
        case 68: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME);  yypushback(1); return GUARD_RAW_CODE;
          }
        case 181: break;
        case 60: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 182: break;
        case 26: 
          { yybegin(YYINITIAL); return HEADER_FILE_NAME;
          }
        case 183: break;
        case 87: 
          { return CRLF;
          }
        case 184: break;
        case 76: 
          { yybegin(WAITING_FOR_ACTIONS); return SEMICOLON;
          }
        case 185: break;
        case 75: 
          { yybegin(WAITING_FOR_ARGUMENTS);  return BRACKET_OPEN;
          }
        case 186: break;
        case 65: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return PARAMETER_NAME;
          }
        case 187: break;
        case 48: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return SEMICOLON;
          }
        case 188: break;
        case 42: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return BRACE_OPEN;
          }
        case 189: break;
        case 17: 
          { yybegin(YYINITIAL); return CONTEXT_CLASS_NAME;
          }
        case 190: break;
        case 14: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 191: break;
        case 79: 
          { yybegin(YYINITIAL);  yypushback(2); return VERBATIM_CODE;
          }
        case 192: break;
        case 16: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 193: break;
        case 47: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS);  return BRACKET_OPEN;
          }
        case 194: break;
        case 105: 
          { return STATE_NAME;
          }
        case 195: break;
        case 71: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return GUARD_CLOSE;
          }
        case 196: break;
        case 36: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_OPEN;
          }
        case 197: break;
        case 90: 
          { yybegin(WAITING_FOR_STATE_ENTRY); return ENTRY_KEYWORD;
          }
        case 198: break;
        case 121: 
          { return ARGUMENT_STATEMENT;
          }
        case 199: break;
        case 63: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return COMMA;
          }
        case 200: break;
        case 58: 
          { yybegin(WAITING_FOR_PARAMETER_NAME);  return BRACKET_OPEN;
          }
        case 201: break;
        case 8: 
          { return GUARD_OPEN;
          }
        case 202: break;
        case 66: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return COLON;
          }
        case 203: break;
        case 56: 
          { yybegin(WAITING_FOR_PARAMETERS); return NEXT_STATE_NAME;
          }
        case 204: break;
        case 69: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 205: break;
        case 70: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NEXT_STATE_NAME;
          }
        case 206: break;
        case 45: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 207: break;
        case 33: 
          { yybegin(WAITING_FOR_MAP); return MAP_NAME;
          }
        case 208: break;
        case 106: 
          { return LINE_COMMENT;
          }
        case 209: break;
        case 21: 
          { yybegin(YYINITIAL); return FSM_CLASS_NAME;
          }
        case 210: break;
        case 123: 
          { return IMPORT_CLASS_STATEMENT;
          }
        case 211: break;
        case 9: 
          { return GUARD_CLOSE;
          }
        case 212: break;
        case 110: 
          { return PARAMETER_TYPE;
          }
        case 213: break;
        case 6: 
          { return BRACE_CLOSE;
          }
        case 214: break;
        case 29: 
          { yybegin(WAITING_FOR_INCLUDE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 215: break;
        case 107: 
          { return ACCESS_LEVEL;
          }
        case 216: break;
        case 88: 
          { return WORD;
          }
        case 217: break;
        case 31: 
          { yybegin(WAITING_FOR_START); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 218: break;
        case 112: 
          { return NEXT_STATE_NAME;
          }
        case 219: break;
        case 41: 
          { yybegin(WAITING_FOR_STATE_ENTRY); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 220: break;
        case 15: 
          { yybegin(YYINITIAL); return PACKAGE_STATEMENT;
          }
        case 221: break;
        case 73: 
          { yybegin(WAITING_FOR_ACTIONS); return ACTION_NAME;
          }
        case 222: break;
        case 54: 
          { yybegin(WAITING_FOR_PARAMETERS); return TRANSITION_NAME;
          }
        case 223: break;
        case 39: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACKET_CLOSE;
          }
        case 224: break;
        case 19: 
          { yybegin(YYINITIAL); return IMPORT_CLASS_STATEMENT;
          }
        case 225: break;
        case 95: 
          { yybegin(YYINITIAL); return START_STATE_NAME;
          }
        case 226: break;
        case 5: 
          { return BRACE_OPEN;
          }
        case 227: break;
        case 119: 
          { return PACKAGE_STATEMENT;
          }
        case 228: break;
        case 82: 
          { return POP_KEYWORD;
          }
        case 229: break;
        case 74: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_CLOSE;
          }
        case 230: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 231: break;
        case 78: 
          { yybegin(YYINITIAL); return VERBATIM_CLOSE;
          }
        case 232: break;
        case 44: 
          { yybegin(WAITING_FOR_STATE_EXIT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 233: break;
        case 22: 
          { yybegin(WAITING_FOR_FSM_FILE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 234: break;
        case 91: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return CLASS_KEYWORD;
          }
        case 235: break;
        case 24: 
          { yybegin(WAITING_FOR_ACCESS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 236: break;
        case 100: 
          { yybegin(WAITING_FOR_INCLUDE); return INCLUDE_KEYWORD;
          }
        case 237: break;
        case 104: 
          { yybegin(WAITING_FOR_FSM_CLASS); return FSM_CLASS_KEYWORD;
          }
        case 238: break;
        case 83: 
          { return NIL_KEYWORD;
          }
        case 239: break;
        case 89: 
          { yybegin(WAITING_FOR_STATE_EXIT); return EXIT_KEYWORD;
          }
        case 240: break;
        case 81: 
          { yybegin(WAITING_FOR_MAP); return MAP_SECTION_BOUND;
          }
        case 241: break;
        case 84: 
          { yybegin(WAITING_FOR_PARAMETERS); return NIL_KEYWORD;
          }
        case 242: break;
        case 27: 
          { yybegin(WAITING_FOR_DECLARE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 243: break;
        case 61: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return PARAMETER_TYPE;
          }
        case 244: break;
        case 85: 
          { return PUSH_KEYWORD;
          }
        case 245: break;
        case 113: 
          { return TRANSITION_NAME;
          }
        case 246: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
