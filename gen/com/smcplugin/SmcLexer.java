/* The following code was generated by JFlex 1.4.3 on 17.02.16 6:35 */

package com.smcplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import static com.smcplugin.psi.SmcTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17.02.16 6:35 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_FOR_NEXT_STATE_NAME = 42;
  public static final int WAITING_FOR_HEADER = 16;
  public static final int WAITING_FOR_FSM_FILE = 12;
  public static final int WAITING_FOR_ACCESS = 14;
  public static final int WAITING_FOR_ACTIONS = 44;
  public static final int WAITING_FOR_INCLUDE = 20;
  public static final int WAITING_FOR_ARGUMENTS = 28;
  public static final int WAITING_FOR_MAP = 24;
  public static final int WAITING_FOR_ACTION_NAME = 46;
  public static final int WAITING_FOR_CONTEXT_CLASS = 6;
  public static final int WAITING_FOR_PACKAGE_STATEMENT = 4;
  public static final int WAITING_FOR_IMPORT_CLASS = 8;
  public static final int WAITING_FOR_START = 22;
  public static final int WAITING_FOR_STATE = 26;
  public static final int WAITING_FOR_DECLARE = 18;
  public static final int WAITING_FOR_TRANSITIONS = 34;
  public static final int WAITING_FOR_PARAMETER_NAME = 40;
  public static final int WAITING_FOR_STATE_EXIT = 32;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_PARAMETERS = 36;
  public static final int WAITING_FOR_FSM_CLASS = 10;
  public static final int WAITING_FOR_VERBATIM_CODE = 2;
  public static final int WAITING_FOR_PARAMETER_TYPE = 38;
  public static final int WAITING_FOR_STATE_ENTRY = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\4\0\1\27"+
    "\2\0\1\41\1\26\1\25\1\0\1\44\1\0\1\5\1\47\12\6"+
    "\1\7\1\45\1\0\1\46\3\0\1\66\1\61\1\55\1\71\1\53"+
    "\1\64\1\74\1\70\1\51\1\4\1\62\1\50\1\57\1\52\1\56"+
    "\1\73\1\4\1\63\1\65\1\60\1\72\1\75\1\77\1\67\1\76"+
    "\1\4\1\42\1\0\1\43\1\0\1\54\1\0\1\24\1\12\1\15"+
    "\1\22\1\21\1\36\1\33\1\37\1\14\1\4\1\32\1\13\1\34"+
    "\1\40\1\17\1\10\1\4\1\16\1\35\1\20\1\11\1\23\1\4"+
    "\1\101\1\100\1\4\1\30\1\0\1\31\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\30\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\20\1\1\16\1\17\1\20\1\21\1\22\2\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\1\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\1\1\40\1\41"+
    "\1\1\1\42\1\43\1\1\1\44\1\43\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\7\0\1\101\1\102\31\0\1\101\1\103"+
    "\2\17\2\21\3\23\2\25\2\27\2\0\2\32\2\34"+
    "\2\36\1\0\2\41\1\104\2\43\1\105\2\43\2\46"+
    "\2\57\2\61\2\65\2\70\2\73\2\75\1\0\1\106"+
    "\12\0\1\107\23\0\1\23\4\0\2\43\1\110\6\0"+
    "\1\111\10\0\1\112\15\0\1\113\1\23\4\0\1\43"+
    "\1\114\35\0\1\23\4\0\1\115\3\0\1\116\2\0"+
    "\1\117\26\0\1\120\1\121\2\0\1\122\1\0\1\123"+
    "\2\0\1\124\2\0\1\125\24\0\2\122\1\126\1\127"+
    "\1\130\1\0\1\131\5\0\1\132\16\0\1\133\32\0"+
    "\1\134\33\0\1\135\10\0\1\136\16\0\1\137\25\0"+
    "\1\140\1\141\1\142\2\0\1\143\2\0\1\144\12\0"+
    "\1\145\1\0\1\146\3\0\1\147\2\0\1\150\1\0"+
    "\1\151\1\0\1\152\1\0\1\153\1\154\6\0\1\155"+
    "\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u05ee\0\u0630\0\u05ee\0\u0672\0\u05ee\0\u06b4\0\u05ee\0\u05ee"+
    "\0\u06f6\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee"+
    "\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36"+
    "\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u05ee\0\u124e\0\u1290\0\u12d2\0\u05ee"+
    "\0\u05ee\0\u1314\0\u05ee\0\u05ee\0\u1356\0\u05ee\0\u1398\0\u13da"+
    "\0\u141c\0\u145e\0\u05ee\0\u05ee\0\u14a0\0\u14e2\0\u05ee\0\u1524"+
    "\0\u1566\0\u05ee\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u05ee\0\u05ee"+
    "\0\u05ee\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c"+
    "\0\u05ee\0\u05ee\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8"+
    "\0\u1e2a\0\u0ad4\0\u1e6c\0\u0ad4\0\u0ad4\0\u1eae\0\u05ee\0\u1ef0"+
    "\0\u05ee\0\u1f32\0\u05ee\0\u1f74\0\u1fb6\0\u05ee\0\u1ff8\0\u05ee"+
    "\0\u203a\0\u207c\0\u20be\0\u05ee\0\u2100\0\u05ee\0\u2142\0\u05ee"+
    "\0\u2184\0\u21c6\0\u05ee\0\u05ee\0\u2208\0\u05ee\0\u05ee\0\u224a"+
    "\0\u228c\0\u22ce\0\u05ee\0\u2310\0\u05ee\0\u2352\0\u05ee\0\u2394"+
    "\0\u05ee\0\u23d6\0\u05ee\0\u2418\0\u05ee\0\u245a\0\u05ee\0\u249c"+
    "\0\u05ee\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u05ee\0\u2772\0\u27b4\0\u27f6\0\u2838"+
    "\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48"+
    "\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58"+
    "\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u05ee\0\u2e26"+
    "\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u05ee\0\u2fb2\0\u2ff4"+
    "\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u05ee\0\u31c2"+
    "\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2"+
    "\0\u3414\0\u3456\0\u3498\0\u34da\0\u05ee\0\u351c\0\u355e\0\u35a0"+
    "\0\u35e2\0\u3624\0\u3666\0\u11ca\0\u36a8\0\u36ea\0\u372c\0\u376e"+
    "\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e"+
    "\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e"+
    "\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e"+
    "\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u11ca\0\u3f6c"+
    "\0\u3fae\0\u3ff0\0\u05ee\0\u4032\0\u4074\0\u05ee\0\u40b6\0\u40f8"+
    "\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308"+
    "\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518"+
    "\0\u455a\0\u459c\0\u45de\0\u4620\0\u0ca2\0\u05ee\0\u4662\0\u46a4"+
    "\0\u46e6\0\u4728\0\u05ee\0\u476a\0\u47ac\0\u05ee\0\u47ee\0\u4830"+
    "\0\u05ee\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a\0\u49bc\0\u49fe"+
    "\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a\0\u4bcc\0\u4c0e"+
    "\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a\0\u05ee\0\u05ee"+
    "\0\u05ee\0\u05ee\0\u4ddc\0\u05ee\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4"+
    "\0\u4f26\0\u05ee\0\u4f68\0\u4faa\0\u4fec\0\u502e\0\u5070\0\u50b2"+
    "\0\u50f4\0\u5136\0\u5178\0\u51ba\0\u51fc\0\u523e\0\u5280\0\u52c2"+
    "\0\u05ee\0\u5304\0\u5346\0\u5388\0\u53ca\0\u540c\0\u544e\0\u5490"+
    "\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da\0\u561c\0\u565e\0\u56a0"+
    "\0\u56e2\0\u5724\0\u5766\0\u57a8\0\u57ea\0\u582c\0\u586e\0\u58b0"+
    "\0\u58f2\0\u5934\0\u5976\0\u05ee\0\u59b8\0\u59fa\0\u5a3c\0\u5a7e"+
    "\0\u5ac0\0\u5b02\0\u5b44\0\u5b86\0\u5bc8\0\u5c0a\0\u5c4c\0\u5c8e"+
    "\0\u5cd0\0\u5d12\0\u5d54\0\u5d96\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e"+
    "\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6\0\u5fe8\0\u602a\0\u606c\0\u05ee"+
    "\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u61b6\0\u61f8\0\u623a\0\u627c"+
    "\0\u05ee\0\u62be\0\u6300\0\u6342\0\u6384\0\u63c6\0\u6408\0\u644a"+
    "\0\u648c\0\u64ce\0\u6510\0\u6552\0\u6594\0\u65d6\0\u6618\0\u05ee"+
    "\0\u665a\0\u669c\0\u66de\0\u6720\0\u6762\0\u67a4\0\u67e6\0\u6828"+
    "\0\u686a\0\u68ac\0\u68ee\0\u6930\0\u6972\0\u69b4\0\u69f6\0\u6a38"+
    "\0\u6a7a\0\u6abc\0\u6afe\0\u6b40\0\u6b82\0\u05ee\0\u05ee\0\u05ee"+
    "\0\u6bc4\0\u6c06\0\u05ee\0\u6c48\0\u6c8a\0\u05ee\0\u6ccc\0\u6d0e"+
    "\0\u6d50\0\u6d92\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a\0\u6edc\0\u6f1e"+
    "\0\u05ee\0\u6f60\0\u05ee\0\u6fa2\0\u6fe4\0\u7026\0\u05ee\0\u7068"+
    "\0\u70aa\0\u05ee\0\u70ec\0\u05ee\0\u712e\0\u05ee\0\u7170\0\u05ee"+
    "\0\u05ee\0\u71b2\0\u71f4\0\u7236\0\u7278\0\u72ba\0\u72fc\0\u05ee"+
    "\0\u05ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\31\3\32\3\31\1\33\1\34\15\31\1\35\1\36"+
    "\1\37\1\40\6\31\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\2\31\1\54"+
    "\1\31\1\55\1\56\1\57\3\31\1\60\1\61\1\31"+
    "\1\62\1\63\1\31\1\64\1\65\2\31\1\66\2\31"+
    "\27\67\1\70\52\67\1\31\3\71\1\72\3\31\15\72"+
    "\5\31\7\72\7\31\4\72\1\31\25\72\1\31\3\73"+
    "\1\74\3\31\15\74\5\31\7\74\7\31\4\74\1\31"+
    "\25\74\1\31\3\75\1\76\3\31\15\76\5\31\3\76"+
    "\1\77\3\76\7\31\4\76\1\31\25\76\1\31\3\100"+
    "\1\101\3\31\15\101\5\31\7\101\7\31\4\101\1\31"+
    "\25\101\1\31\3\102\1\103\3\31\15\103\5\31\7\103"+
    "\7\31\4\103\1\31\25\103\1\31\3\104\4\31\1\105"+
    "\72\31\3\106\1\107\3\31\15\107\5\31\7\107\7\31"+
    "\4\107\1\31\25\107\1\31\3\110\1\111\3\31\15\111"+
    "\5\31\7\111\7\31\4\111\1\31\25\111\1\31\3\112"+
    "\1\113\3\31\15\113\5\31\7\113\7\31\4\113\1\31"+
    "\25\113\1\31\3\114\1\115\3\31\15\115\5\31\7\115"+
    "\7\31\4\115\1\31\25\115\1\31\3\116\1\117\3\31"+
    "\15\117\2\31\1\120\2\31\7\117\7\31\4\117\1\31"+
    "\25\117\1\31\3\121\1\122\3\31\15\122\2\31\1\123"+
    "\1\124\1\31\7\122\7\31\3\122\1\125\1\31\25\122"+
    "\1\31\3\126\1\127\3\31\15\127\1\31\1\130\3\31"+
    "\7\127\3\31\1\131\3\31\4\127\1\31\25\127\1\31"+
    "\3\132\24\31\1\133\1\134\51\31\3\135\24\31\1\136"+
    "\1\134\51\31\3\137\1\140\3\31\15\140\4\31\1\134"+
    "\7\140\7\31\4\140\1\31\25\140\1\31\3\141\1\142"+
    "\3\31\15\142\3\31\1\143\1\134\7\142\1\144\6\31"+
    "\4\142\1\31\25\142\1\31\3\145\1\146\3\31\15\146"+
    "\1\31\1\147\3\31\7\146\7\31\4\146\1\31\25\146"+
    "\1\31\3\150\1\151\2\31\1\152\15\151\5\31\7\151"+
    "\7\31\4\151\1\31\25\151\1\31\3\153\1\154\3\31"+
    "\15\154\3\31\1\143\1\31\7\154\7\31\4\154\1\31"+
    "\25\154\1\31\3\155\1\156\3\31\15\156\4\31\1\157"+
    "\7\156\1\160\3\31\1\161\2\31\4\156\1\31\25\156"+
    "\103\0\3\32\107\0\1\162\5\0\1\163\72\0\1\164"+
    "\3\0\1\165\1\166\4\0\1\167\1\0\1\170\3\0"+
    "\1\171\1\172\2\0\1\173\1\174\1\175\1\176\56\0"+
    "\1\177\136\0\1\200\102\0\1\201\4\0\1\202\75\0"+
    "\1\203\104\0\1\204\4\0\1\205\104\0\1\206\76\0"+
    "\1\207\66\0\1\210\111\0\1\211\76\0\1\212\5\0"+
    "\1\213\71\0\1\214\101\0\1\215\104\0\1\216\7\0"+
    "\1\217\105\0\1\220\65\0\1\221\23\0\27\222\1\223"+
    "\101\222\1\223\1\224\1\225\50\222\1\0\3\71\77\0"+
    "\1\226\1\227\1\0\3\72\1\0\15\72\5\0\7\72"+
    "\7\0\32\72\1\0\3\73\77\0\1\230\1\231\1\0"+
    "\3\74\1\0\15\74\5\0\7\74\7\0\32\74\1\0"+
    "\3\75\77\0\1\232\1\233\1\0\3\76\1\0\16\76"+
    "\4\0\7\76\7\0\32\76\1\0\1\232\1\233\1\0"+
    "\3\76\1\0\10\76\1\234\5\76\4\0\7\76\7\0"+
    "\32\76\1\0\3\100\77\0\1\235\1\236\1\0\3\101"+
    "\1\0\15\101\5\0\7\101\7\0\32\101\1\0\3\102"+
    "\77\0\1\237\1\240\1\0\3\103\1\0\15\103\5\0"+
    "\7\103\7\0\32\103\1\0\3\104\107\0\1\241\4\0"+
    "\1\242\64\0\3\106\77\0\1\243\1\244\1\0\3\107"+
    "\1\0\15\107\5\0\7\107\7\0\32\107\1\0\3\110"+
    "\77\0\1\245\1\246\1\0\3\111\1\0\15\111\5\0"+
    "\7\111\7\0\32\111\1\0\3\112\77\0\1\247\1\250"+
    "\1\0\3\113\1\0\15\113\5\0\7\113\7\0\32\113"+
    "\1\0\3\114\102\0\1\251\1\0\1\251\1\0\15\251"+
    "\5\0\7\251\7\0\4\251\1\0\25\251\1\0\3\116"+
    "\77\0\1\252\1\253\1\0\3\117\1\0\15\117\5\0"+
    "\7\117\7\0\32\117\27\0\1\254\53\0\3\121\77\0"+
    "\1\255\1\256\1\0\3\122\1\0\15\122\5\0\7\122"+
    "\7\0\32\122\27\0\1\257\53\0\1\255\1\256\1\0"+
    "\3\122\1\0\15\122\5\0\6\122\1\260\7\0\31\122"+
    "\1\261\1\0\3\126\77\0\1\262\1\263\1\0\3\127"+
    "\1\0\15\127\5\0\7\127\7\0\32\127\1\0\3\132"+
    "\77\0\3\135\77\0\3\137\77\0\1\264\1\265\1\0"+
    "\3\140\1\0\15\140\5\0\7\140\7\0\32\140\1\0"+
    "\3\141\77\0\1\266\1\267\1\0\3\142\1\0\15\142"+
    "\5\0\7\142\7\0\32\142\1\0\3\145\77\0\1\270"+
    "\1\271\1\0\3\146\1\0\15\146\5\0\7\146\7\0"+
    "\32\146\1\0\3\150\77\0\1\272\1\273\1\0\3\151"+
    "\1\0\15\151\5\0\7\151\7\0\32\151\1\0\3\153"+
    "\77\0\1\274\1\275\1\0\3\154\1\0\15\154\5\0"+
    "\7\154\7\0\32\154\1\0\3\155\77\0\1\276\1\277"+
    "\1\0\3\156\1\0\15\156\5\0\7\156\7\0\32\156"+
    "\35\0\1\300\54\0\1\301\115\0\1\302\111\0\1\303"+
    "\3\0\1\304\54\0\1\305\107\0\1\306\75\0\1\307"+
    "\110\0\1\310\75\0\1\311\116\0\1\312\65\0\1\313"+
    "\73\0\1\314\140\0\1\315\104\0\1\316\117\0\1\317"+
    "\75\0\1\320\64\0\1\321\77\0\1\322\124\0\1\323"+
    "\74\0\1\324\71\0\1\325\111\0\1\326\70\0\1\327"+
    "\120\0\1\330\73\0\1\331\70\0\1\332\117\0\1\333"+
    "\63\0\1\334\5\0\1\335\104\0\1\336\76\0\1\337"+
    "\16\0\27\222\1\223\1\222\1\225\50\222\2\0\1\227"+
    "\101\0\1\231\101\0\1\233\100\0\1\232\1\233\1\0"+
    "\3\76\1\0\14\76\1\340\1\76\4\0\7\76\7\0"+
    "\32\76\2\0\1\236\101\0\1\240\111\0\1\341\103\0"+
    "\1\342\2\0\1\343\64\0\1\244\101\0\1\246\101\0"+
    "\1\250\103\0\1\251\1\0\1\251\1\344\15\251\5\0"+
    "\7\251\7\0\4\251\1\0\25\251\2\0\1\253\101\0"+
    "\1\256\100\0\1\255\1\256\1\0\3\122\1\0\10\122"+
    "\1\345\4\122\5\0\7\122\7\0\32\122\1\0\1\255"+
    "\1\256\1\0\3\122\1\0\4\122\1\346\10\122\5\0"+
    "\7\122\7\0\32\122\2\0\1\263\101\0\1\265\101\0"+
    "\1\267\101\0\1\271\101\0\1\273\101\0\1\275\101\0"+
    "\1\277\136\0\1\347\57\0\1\350\74\0\1\351\106\0"+
    "\1\352\110\0\1\353\72\0\1\354\101\0\1\355\74\0"+
    "\1\356\115\0\1\357\111\0\1\360\71\0\1\361\130\0"+
    "\1\362\76\0\1\363\107\0\1\364\103\0\1\365\101\0"+
    "\1\366\105\0\1\367\71\0\1\370\77\0\1\371\104\0"+
    "\1\372\104\0\1\373\2\0\1\374\71\0\1\375\120\0"+
    "\1\376\100\0\1\377\60\0\1\u0100\105\0\1\u0101\107\0"+
    "\1\u0102\105\0\1\u0103\76\0\1\u0104\107\0\1\u0105\11\0"+
    "\1\232\1\233\1\0\3\76\1\0\10\76\1\u0106\5\76"+
    "\4\0\7\76\7\0\32\76\13\0\1\u0107\111\0\1\u0108"+
    "\76\0\1\u0109\70\0\1\u010a\73\0\1\255\1\256\1\0"+
    "\3\122\1\0\6\122\1\u010b\6\122\5\0\7\122\7\0"+
    "\32\122\1\0\1\255\1\256\1\0\3\122\1\0\10\122"+
    "\1\u010c\4\122\5\0\7\122\7\0\32\122\32\0\1\u010d"+
    "\66\0\1\u010e\75\0\1\u010f\123\0\1\u0110\57\0\1\u0111"+
    "\107\0\1\u0112\76\0\1\u0113\100\0\1\u0114\20\0\1\u0115"+
    "\65\0\1\u0116\133\0\1\u0117\117\0\1\u0118\72\0\1\u0119"+
    "\72\0\1\u011a\100\0\1\u011b\100\0\1\u011c\12\0\1\u011d"+
    "\101\0\1\u011e\76\0\1\u011f\72\0\1\u0120\106\0\1\u0121"+
    "\106\0\1\u0122\73\0\1\u0123\75\0\1\u0124\114\0\1\u0125"+
    "\101\0\1\u0126\101\0\1\u0127\72\0\1\u0128\113\0\1\u0129"+
    "\11\0\1\232\1\233\1\0\3\76\1\0\4\76\1\u012a"+
    "\11\76\4\0\7\76\7\0\32\76\14\0\1\u012b\111\0"+
    "\1\u012c\76\0\1\u012d\64\0\1\u012e\3\0\15\u012e\5\0"+
    "\7\u012e\7\0\4\u012e\1\0\25\u012e\1\0\1\255\1\256"+
    "\1\0\3\122\1\0\15\122\5\0\7\122\7\0\30\122"+
    "\1\u012f\1\122\24\0\1\u0130\73\0\1\u0131\74\0\1\u0132"+
    "\125\0\1\u0133\70\0\1\u0134\112\0\1\u0135\64\0\1\u0136"+
    "\74\0\1\u0137\102\0\1\u0138\106\0\1\u0139\135\0\1\u013a"+
    "\115\0\1\u013b\70\0\1\u013c\106\0\1\u013d\103\0\1\u013e"+
    "\100\0\1\u013f\66\0\1\u0140\77\0\1\u0141\104\0\1\u0142"+
    "\101\0\1\u0143\101\0\1\u0144\112\0\1\u0145\67\0\1\u0146"+
    "\111\0\1\u0147\101\0\1\u0148\101\0\1\u0149\112\0\1\u014a"+
    "\60\0\1\u014b\102\0\1\u014c\26\0\1\232\1\233\1\0"+
    "\3\76\1\0\5\76\1\u014d\10\76\4\0\7\76\7\0"+
    "\32\76\15\0\1\u014e\104\0\1\u014f\76\0\1\u0150\70\0"+
    "\1\u0151\1\0\1\u0151\1\0\15\u0151\5\0\7\u0151\7\0"+
    "\4\u0151\1\0\25\u0151\33\0\1\u0152\66\0\1\u0153\103\0"+
    "\1\u0154\75\0\1\u0155\120\0\1\u0156\70\0\1\u0157\70\0"+
    "\1\u0158\104\0\1\u0159\141\0\1\u015a\76\0\1\u015b\102\0"+
    "\1\u015c\105\0\1\u015d\101\0\1\u015e\100\0\1\u015f\77\0"+
    "\1\u0160\104\0\1\u0161\76\0\1\u0162\76\0\1\u0163\114\0"+
    "\1\u0164\70\0\1\u0165\77\0\1\u0166\103\0\1\u0167\100\0"+
    "\1\u0168\122\0\1\u0169\60\0\1\u016a\106\0\1\u016b\104\0"+
    "\1\u016c\37\0\1\u014e\100\0\1\u016d\62\0\1\u016e\1\u016f"+
    "\1\0\1\u0151\1\0\1\u0151\1\0\15\u0151\5\0\7\u0151"+
    "\7\0\4\u0151\1\0\25\u0151\21\0\1\u0170\101\0\1\u0171"+
    "\101\0\1\u0172\115\0\1\u0173\65\0\1\u0174\137\0\1\u0175"+
    "\76\0\1\u0176\102\0\1\u0177\112\0\1\u0178\67\0\1\u0179"+
    "\100\0\1\u017a\106\0\1\u017b\72\0\1\u017c\106\0\1\u017d"+
    "\111\0\1\u017e\73\0\1\u017f\71\0\1\u0180\111\0\1\u0181"+
    "\105\0\1\u0182\71\0\1\u0183\117\0\1\u0184\63\0\1\u0185"+
    "\100\0\1\u0186\114\0\1\u0187\34\0\1\u0188\62\0\1\u016f"+
    "\134\0\1\u0189\123\0\1\u018a\106\0\1\u018b\65\0\1\u018c"+
    "\111\0\1\u018d\76\0\1\u018e\75\0\1\u018f\106\0\1\u0190"+
    "\102\0\1\u0191\101\0\1\u0192\110\0\1\u0193\66\0\1\u0194"+
    "\102\0\1\u0195\76\0\1\u0196\115\0\1\u0197\73\0\1\u0198"+
    "\107\0\1\u0199\77\0\1\u019a\115\0\1\u019b\24\0\1\u014e"+
    "\132\0\1\u019c\77\0\1\u019d\116\0\1\u019e\66\0\1\u019f"+
    "\76\0\1\u01a0\107\0\1\u01a1\75\0\1\u01a2\106\0\1\u01a3"+
    "\75\0\1\u01a4\106\0\1\u01a5\116\0\1\u01a6\71\0\1\u01a7"+
    "\64\0\1\u01a8\111\0\1\u01a9\74\0\1\u01aa\106\0\1\u01ab"+
    "\75\0\1\u01ac\101\0\1\u01ad\77\0\1\u01ae\77\0\1\u01af"+
    "\116\0\1\u01b0\70\0\1\u01b1\113\0\1\u01b2\65\0\1\u01b3"+
    "\103\0\1\u01b4\100\0\1\u01b5\101\0\1\u01b6\101\0\1\u01b7"+
    "\106\0\1\u01b8\74\0\1\u01b9\114\0\1\u01ba\65\0\1\u01bb"+
    "\115\0\1\u01bc\65\0\1\u01bd\5\0\1\u01be\76\0\1\u01bf"+
    "\104\0\1\u01c0\74\0\1\u01c1\113\0\1\u01c2\66\0\1\u01c3"+
    "\114\0\1\u01c4\70\0\1\u01c5\77\0\1\u01c6\101\0\1\u01c7"+
    "\103\0\1\u01c8\75\0\1\u01c9\117\0\1\u01ca\67\0\1\u01cb"+
    "\105\0\1\u01cc\101\0\1\u01cd\101\0\1\u01ce\107\0\1\u01cf"+
    "\111\0\1\u01d0\61\0\1\u01d1\77\0\1\u01d2\101\0\1\u01d3"+
    "\113\0\1\u01d4\100\0\1\u01d5\75\0\1\u01d6\106\0\1\u01d7"+
    "\73\0\1\u01d8\73\0\1\u01d9\107\0\1\u01da\73\0\1\u01db"+
    "\102\0\1\u01dc\102\0\1\u01dd\100\0\1\u01de\105\0\1\u01df"+
    "\115\0\1\u01e0\77\0\1\u01e1\62\0\1\u01e2\114\0\1\u01e3"+
    "\73\0\1\u01e4\76\0\1\u01e5\103\0\1\u01e6\102\0\1\u01e7"+
    "\110\0\1\u01e8\66\0\1\u01e9\114\0\1\u01ea\72\0\1\u01eb"+
    "\105\0\1\u01ec\75\0\1\u01ed\75\0\1\u01ee\101\0\1\u01ef"+
    "\101\0\1\u01f0\114\0\1\u01f1\73\0\1\u01f2\74\0\1\u01f3"+
    "\100\0\1\u01f4\121\0\1\u01f5\62\0\1\u01f6\105\0\1\u01f7"+
    "\101\0\1\u01f8\101\0\1\u01f9\75\0\1\u01fa\114\0\1\u01fb"+
    "\66\0\1\u01fc\105\0\1\u01fd\110\0\1\u01fe\101\0\1\u01ff"+
    "\65\0\1\u0200\102\0\1\u0201\101\0\1\u0202\101\0\1\u0203"+
    "\100\0\1\u0204\126\0\1\u0205\54\0\1\u0206\102\0\1\u0207"+
    "\106\0\1\u0208\100\0\1\u0209\113\0\1\u020a\62\0\1\u020b"+
    "\107\0\1\u020c\75\0\1\u020d\105\0\1\u020e\74\0\1\u020f"+
    "\101\0\1\u0210\106\0\1\u0211\76\0\1\u0212\103\0\1\u0213"+
    "\100\0\1\u0214\76\0\1\u0215\117\0\1\u0216\62\0\1\u0217"+
    "\102\0\1\u0218\106\0\1\u0219\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29502];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\1\10\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\1\1\7\11\53\1\1\11\3\1\2\11\1\1"+
    "\2\11\1\1\1\11\4\1\2\11\2\1\1\11\2\1"+
    "\1\11\4\1\3\11\7\0\2\11\31\0\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\1\0"+
    "\1\1\2\11\1\1\2\11\3\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\0\1\11\12\0\1\11\23\0\1\1"+
    "\4\0\2\1\1\11\6\0\1\11\10\0\1\11\15\0"+
    "\1\11\1\1\4\0\2\1\35\0\1\1\4\0\1\1"+
    "\3\0\1\11\2\0\1\11\26\0\1\1\1\11\2\0"+
    "\1\1\1\0\1\11\2\0\1\11\2\0\1\11\24\0"+
    "\1\1\4\11\1\0\1\11\5\0\1\11\16\0\1\11"+
    "\32\0\1\11\33\0\1\11\10\0\1\11\16\0\1\11"+
    "\25\0\3\11\2\0\1\11\2\0\1\11\12\0\1\11"+
    "\1\0\1\11\3\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\2\11\6\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }
  private Stack<Integer> stack = new Stack<Integer>();
  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 89: 
          { yybegin(WAITING_FOR_FSM_FILE); return FSM_FILE_KEYWORD;
          }
        case 111: break;
        case 50: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACE_OPEN;
          }
        case 112: break;
        case 95: 
          { return BLOCK_COMMENT;
          }
        case 113: break;
        case 80: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return STATIC_JAVA_KEYWORD;
          }
        case 114: break;
        case 85: 
          { yybegin(WAITING_FOR_HEADER); return HEADER_KEYWORD;
          }
        case 115: break;
        case 79: 
          { yybegin(WAITING_FOR_START); return START_KEYWORD;
          }
        case 116: break;
        case 25: 
          { yybegin(WAITING_FOR_HEADER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 117: break;
        case 83: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return IMPORT_KEYWORD;
          }
        case 118: break;
        case 65: 
          { yybegin(WAITING_FOR_VERBATIM_CODE);  return VERBATIM_OPEN;
          }
        case 119: break;
        case 60: 
          { yybegin(WAITING_FOR_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 120: break;
        case 7: 
          { return BRACKET_OPEN;
          }
        case 121: break;
        case 55: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 122: break;
        case 23: 
          { yybegin(YYINITIAL); return FSM_FILE_NAME;
          }
        case 123: break;
        case 12: 
          { return ASSIGN_OP;
          }
        case 124: break;
        case 3: 
          { return COLON;
          }
        case 125: break;
        case 102: 
          { return HEADER_FILE_NAME;
          }
        case 126: break;
        case 73: 
          { yybegin(WAITING_FOR_MAP); return MAP_KEYWORD;
          }
        case 127: break;
        case 68: 
          { yybegin(WAITING_FOR_STATE); return MAP_SECTION_BOUND;
          }
        case 128: break;
        case 90: 
          { return MAP_NAME;
          }
        case 129: break;
        case 48: 
          { yybegin(WAITING_FOR_PARAMETERS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 130: break;
        case 104: 
          { return MAP_SECTION_BOUND;
          }
        case 131: break;
        case 86: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return PACKAGE_KEYWORD;
          }
        case 132: break;
        case 34: 
          { yybegin(WAITING_FOR_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 133: break;
        case 35: 
          { yybegin(WAITING_FOR_STATE); return STATE_NAME;
          }
        case 134: break;
        case 32: 
          { yybegin(WAITING_FOR_MAP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 135: break;
        case 96: 
          { return PARAMETER_NAME;
          }
        case 136: break;
        case 28: 
          { yybegin(YYINITIAL); return DECLARE_STATEMENT;
          }
        case 137: break;
        case 37: 
          { yybegin(WAITING_FOR_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 138: break;
        case 4: 
          { return BRACKET_CLOSE;
          }
        case 139: break;
        case 54: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return BRACKET_CLOSE;
          }
        case 140: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 141: break;
        case 18: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 142: break;
        case 30: 
          { yybegin(YYINITIAL); return INCLUDE_FILE_NAME;
          }
        case 143: break;
        case 109: 
          { return POP_ARGUMENT_RAW_CODE;
          }
        case 144: break;
        case 13: 
          { return SLASH_SIGN;
          }
        case 145: break;
        case 38: 
          { yybegin(WAITING_FOR_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 146: break;
        case 11: 
          { return SEMICOLON;
          }
        case 147: break;
        case 46: 
          { yybegin(WAITING_FOR_TRANSITIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 148: break;
        case 105: 
          { return DECLARE_STATEMENT;
          }
        case 149: break;
        case 10: 
          { return COMMA;
          }
        case 150: break;
        case 43: 
          { yybegin(WAITING_FOR_STATE); return BRACE_CLOSE;
          }
        case 151: break;
        case 40: 
          { yybegin(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 152: break;
        case 84: 
          { yybegin(WAITING_FOR_ACCESS); return ACCESS_KEYWORD;
          }
        case 153: break;
        case 103: 
          { return INCLUDE_FILE_NAME;
          }
        case 154: break;
        case 81: 
          { yybegin(YYINITIAL); return ACCESS_LEVEL;
          }
        case 155: break;
        case 20: 
          { yybegin(WAITING_FOR_FSM_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 156: break;
        case 98: 
          { return GUARD_RAW_CODE;
          }
        case 157: break;
        case 88: 
          { yybegin(WAITING_FOR_DECLARE); return DECLARE_KEYWORD;
          }
        case 158: break;
        case 101: 
          { return START_STATE_NAME;
          }
        case 159: break;
        case 107: 
          { return CONTEXT_CLASS_NAME;
          }
        case 160: break;
        case 52: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 161: break;
        case 26: 
          { yybegin(YYINITIAL); return HEADER_FILE_NAME;
          }
        case 162: break;
        case 74: 
          { return CRLF;
          }
        case 163: break;
        case 64: 
          { yybegin(WAITING_FOR_ACTIONS); return SEMICOLON;
          }
        case 164: break;
        case 63: 
          { yybegin(WAITING_FOR_ARGUMENTS);  return BRACKET_OPEN;
          }
        case 165: break;
        case 56: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return PARAMETER_NAME;
          }
        case 166: break;
        case 45: 
          { yybegin(WAITING_FOR_STATE_EXIT); return BRACE_OPEN;
          }
        case 167: break;
        case 17: 
          { yybegin(YYINITIAL); return CONTEXT_CLASS_NAME;
          }
        case 168: break;
        case 14: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 169: break;
        case 67: 
          { yybegin(YYINITIAL);  yypushback(2); return VERBATIM_CODE;
          }
        case 170: break;
        case 16: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 171: break;
        case 92: 
          { return STATE_NAME;
          }
        case 172: break;
        case 36: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_OPEN;
          }
        case 173: break;
        case 77: 
          { yybegin(WAITING_FOR_STATE_ENTRY); return ENTRY_KEYWORD;
          }
        case 174: break;
        case 108: 
          { return ARGUMENT_STATEMENT;
          }
        case 175: break;
        case 51: 
          { yybegin(WAITING_FOR_PARAMETER_NAME);  return BRACKET_OPEN;
          }
        case 176: break;
        case 8: 
          { return GUARD_OPEN;
          }
        case 177: break;
        case 57: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return COLON;
          }
        case 178: break;
        case 53: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return PARAMETER_NAME;
          }
        case 179: break;
        case 49: 
          { yybegin(WAITING_FOR_PARAMETERS); return NEXT_STATE_NAME;
          }
        case 180: break;
        case 58: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 181: break;
        case 59: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NEXT_STATE_NAME;
          }
        case 182: break;
        case 33: 
          { yybegin(WAITING_FOR_MAP); return MAP_NAME;
          }
        case 183: break;
        case 93: 
          { return LINE_COMMENT;
          }
        case 184: break;
        case 21: 
          { yybegin(YYINITIAL); return FSM_CLASS_NAME;
          }
        case 185: break;
        case 110: 
          { return IMPORT_CLASS_STATEMENT;
          }
        case 186: break;
        case 9: 
          { return GUARD_CLOSE;
          }
        case 187: break;
        case 97: 
          { return PARAMETER_TYPE;
          }
        case 188: break;
        case 6: 
          { return BRACE_CLOSE;
          }
        case 189: break;
        case 29: 
          { yybegin(WAITING_FOR_INCLUDE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 190: break;
        case 94: 
          { return ACCESS_LEVEL;
          }
        case 191: break;
        case 75: 
          { return WORD;
          }
        case 192: break;
        case 31: 
          { yybegin(WAITING_FOR_START); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 193: break;
        case 99: 
          { return NEXT_STATE_NAME;
          }
        case 194: break;
        case 41: 
          { yybegin(WAITING_FOR_STATE_ENTRY); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 195: break;
        case 15: 
          { yybegin(YYINITIAL); return PACKAGE_STATEMENT;
          }
        case 196: break;
        case 61: 
          { yybegin(WAITING_FOR_ACTIONS); return ACTION_NAME;
          }
        case 197: break;
        case 47: 
          { yybegin(WAITING_FOR_PARAMETERS); return TRANSITION_NAME;
          }
        case 198: break;
        case 39: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACKET_CLOSE;
          }
        case 199: break;
        case 19: 
          { yybegin(YYINITIAL); return IMPORT_CLASS_STATEMENT;
          }
        case 200: break;
        case 82: 
          { yybegin(YYINITIAL); return START_STATE_NAME;
          }
        case 201: break;
        case 5: 
          { return BRACE_OPEN;
          }
        case 202: break;
        case 106: 
          { return PACKAGE_STATEMENT;
          }
        case 203: break;
        case 70: 
          { return POP_KEYWORD;
          }
        case 204: break;
        case 62: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_CLOSE;
          }
        case 205: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 206: break;
        case 44: 
          { yybegin(WAITING_FOR_STATE_EXIT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 207: break;
        case 22: 
          { yybegin(WAITING_FOR_FSM_FILE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 208: break;
        case 66: 
          { yybegin(YYINITIAL); return VERBATIM_CLOSE;
          }
        case 209: break;
        case 78: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return CLASS_KEYWORD;
          }
        case 210: break;
        case 42: 
          { yybegin(WAITING_FOR_STATE_ENTRY); return BRACE_OPEN;
          }
        case 211: break;
        case 24: 
          { yybegin(WAITING_FOR_ACCESS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 212: break;
        case 87: 
          { yybegin(WAITING_FOR_INCLUDE); return INCLUDE_KEYWORD;
          }
        case 213: break;
        case 91: 
          { yybegin(WAITING_FOR_FSM_CLASS); return FSM_CLASS_KEYWORD;
          }
        case 214: break;
        case 71: 
          { return NIL_KEYWORD;
          }
        case 215: break;
        case 76: 
          { yybegin(WAITING_FOR_STATE_EXIT); return EXIT_KEYWORD;
          }
        case 216: break;
        case 69: 
          { yybegin(WAITING_FOR_MAP); return MAP_SECTION_BOUND;
          }
        case 217: break;
        case 27: 
          { yybegin(WAITING_FOR_DECLARE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 218: break;
        case 72: 
          { return PUSH_KEYWORD;
          }
        case 219: break;
        case 100: 
          { return TRANSITION_NAME;
          }
        case 220: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
