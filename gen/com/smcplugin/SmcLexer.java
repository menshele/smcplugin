/* The following code was generated by JFlex 1.4.3 on 14.02.16 21:06 */

package com.smcplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.smcplugin.psi.SmcTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14.02.16 21:06 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_FOR_FSM_FILE = 12;
  public static final int WAITING_FOR_FSM_CLASS = 10;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_IMPORT_CLASS = 8;
  public static final int WAITING_FOR_CONTEXT_CLASS = 6;
  public static final int WAITING_FOR_PACKAGE_STATEMENT = 4;
  public static final int WAITING_FOR_VERBATIM_CODE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\40\4\0\1\7"+
    "\2\0\1\34\1\35\1\6\1\0\1\45\1\0\1\5\1\50\12\5"+
    "\1\44\1\46\1\0\1\47\3\0\1\66\1\61\1\55\1\71\1\36"+
    "\1\64\1\74\1\70\1\52\1\4\1\62\1\51\1\57\1\53\1\56"+
    "\1\73\1\4\1\63\1\65\1\60\1\72\1\75\1\77\1\67\1\76"+
    "\1\4\1\42\1\0\1\43\1\0\1\54\1\0\1\13\1\4\1\14"+
    "\1\31\1\17\1\27\1\16\1\30\1\20\1\4\1\15\1\25\1\21"+
    "\1\32\1\22\1\12\1\4\1\23\1\26\1\24\1\33\2\4\1\41"+
    "\1\37\1\4\1\10\1\0\1\11\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\1\1\3\1\4\2\1\1\5"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\20\1\1\16\1\17\1\20\1\21\1\22\2\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\42\0\1\30"+
    "\1\32\2\17\2\21\3\23\2\25\2\27\12\0\1\33"+
    "\1\0\1\34\25\0\1\23\5\0\1\35\4\0\1\36"+
    "\7\0\1\37\15\0\1\40\1\23\13\0\1\41\23\0"+
    "\1\23\2\0\1\42\2\0\1\43\4\0\1\44\23\0"+
    "\1\45\1\0\1\46\1\47\3\0\1\50\24\0\1\51"+
    "\1\52\1\0\1\53\1\54\5\0\1\55\15\0\1\56"+
    "\32\0\1\57\33\0\1\60\10\0\1\61\16\0\1\62"+
    "\25\0\1\63\1\64\1\65\2\0\1\66\2\0\1\67"+
    "\12\0\1\70\1\0\1\71\3\0\1\72\2\0\1\73"+
    "\1\0\1\74\1\0\1\75\1\0\1\76\1\77\6\0"+
    "\1\100\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u01c0\0\u01c0\0\u0280\0\u02c0\0\u01c0\0\u01c0"+
    "\0\u0300\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u01c0"+
    "\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\u0980\0\u09c0\0\u01c0\0\u01c0\0\u0a00\0\u0a40\0\u0a80"+
    "\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80"+
    "\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80"+
    "\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u06c0\0\u1200\0\u06c0"+
    "\0\u06c0\0\u1240\0\u01c0\0\u1280\0\u01c0\0\u12c0\0\u01c0\0\u1300"+
    "\0\u1340\0\u01c0\0\u1380\0\u01c0\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u01c0\0\u1640"+
    "\0\u01c0\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800"+
    "\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00"+
    "\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00"+
    "\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u01c0\0\u1d40\0\u1d80\0\u1dc0"+
    "\0\u1e00\0\u01c0\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80"+
    "\0\u1fc0\0\u01c0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140"+
    "\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u01c0"+
    "\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500"+
    "\0\u2540\0\u2580\0\u25c0\0\u2600\0\u01c0\0\u2640\0\u2680\0\u26c0"+
    "\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0"+
    "\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0"+
    "\0\u2b00\0\u2b40\0\u2b80\0\u01c0\0\u2bc0\0\u2c00\0\u01c0\0\u2c40"+
    "\0\u2c80\0\u2cc0\0\u2d00\0\u01c0\0\u2d40\0\u2d80\0\u2dc0\0\u2e00"+
    "\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000"+
    "\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u0880"+
    "\0\u3200\0\u01c0\0\u01c0\0\u3240\0\u3280\0\u32c0\0\u01c0\0\u3300"+
    "\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500"+
    "\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700"+
    "\0\u3740\0\u3780\0\u37c0\0\u01c0\0\u01c0\0\u3800\0\u01c0\0\u01c0"+
    "\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u01c0\0\u3980\0\u39c0"+
    "\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0"+
    "\0\u3c00\0\u3c40\0\u3c80\0\u01c0\0\u3cc0\0\u3d00\0\u3d40\0\u3d80"+
    "\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u3f40\0\u3f80"+
    "\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180"+
    "\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300\0\u01c0\0\u4340"+
    "\0\u4380\0\u43c0\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540"+
    "\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700\0\u4740"+
    "\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880\0\u48c0\0\u4900\0\u4940"+
    "\0\u4980\0\u49c0\0\u01c0\0\u4a00\0\u4a40\0\u4a80\0\u4ac0\0\u4b00"+
    "\0\u4b40\0\u4b80\0\u4bc0\0\u01c0\0\u4c00\0\u4c40\0\u4c80\0\u4cc0"+
    "\0\u4d00\0\u4d40\0\u4d80\0\u4dc0\0\u4e00\0\u4e40\0\u4e80\0\u4ec0"+
    "\0\u4f00\0\u4f40\0\u01c0\0\u4f80\0\u4fc0\0\u5000\0\u5040\0\u5080"+
    "\0\u50c0\0\u5100\0\u5140\0\u5180\0\u51c0\0\u5200\0\u5240\0\u5280"+
    "\0\u52c0\0\u5300\0\u5340\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480"+
    "\0\u01c0\0\u01c0\0\u01c0\0\u54c0\0\u5500\0\u01c0\0\u5540\0\u5580"+
    "\0\u01c0\0\u55c0\0\u5600\0\u5640\0\u5680\0\u56c0\0\u5700\0\u5740"+
    "\0\u5780\0\u57c0\0\u5800\0\u01c0\0\u5840\0\u01c0\0\u5880\0\u58c0"+
    "\0\u5900\0\u01c0\0\u5940\0\u5980\0\u01c0\0\u59c0\0\u01c0\0\u5a00"+
    "\0\u01c0\0\u5a40\0\u01c0\0\u01c0\0\u5a80\0\u5ac0\0\u5b00\0\u5b40"+
    "\0\u5b80\0\u5bc0\0\u01c0\0\u01c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\3\10\1\12\1\13\1\14\1\15\17\10"+
    "\1\16\1\10\1\17\1\20\1\21\1\10\1\11\1\10"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\10\1\34\1\10\1\35\1\36\1\37"+
    "\3\10\1\40\1\41\1\10\1\42\1\43\1\10\1\44"+
    "\1\45\2\10\1\46\7\47\1\50\70\47\1\10\3\51"+
    "\1\52\5\10\22\52\2\10\2\52\1\51\1\52\7\10"+
    "\3\52\1\10\23\52\1\10\3\53\1\54\5\10\22\54"+
    "\2\10\2\54\1\53\1\54\7\10\3\54\1\10\23\54"+
    "\1\10\3\55\1\56\5\10\14\56\1\57\5\56\2\10"+
    "\2\56\1\55\1\56\7\10\3\56\1\10\23\56\1\10"+
    "\3\60\1\61\5\10\22\61\2\10\2\61\1\60\1\61"+
    "\7\10\3\61\1\10\23\61\1\10\3\62\1\63\5\10"+
    "\22\63\2\10\2\63\1\62\1\63\7\10\3\63\1\10"+
    "\23\63\101\0\3\11\34\0\1\11\47\0\1\64\1\65"+
    "\1\66\1\67\1\70\3\0\1\71\1\72\4\0\1\73"+
    "\1\74\1\75\1\76\70\0\1\77\10\0\1\100\64\0"+
    "\1\101\111\0\1\102\6\0\1\103\110\0\1\104\100\0"+
    "\1\105\3\0\1\106\56\0\1\107\117\0\1\110\4\0"+
    "\1\111\102\0\1\112\74\0\1\113\65\0\1\114\106\0"+
    "\1\115\74\0\1\116\5\0\1\117\52\0\1\120\77\0"+
    "\1\121\117\0\1\122\7\0\1\123\103\0\1\124\63\0"+
    "\1\125\21\0\7\126\1\127\77\126\1\127\1\130\1\131"+
    "\66\126\1\0\3\51\34\0\1\51\40\0\1\132\1\133"+
    "\1\0\2\52\4\0\22\52\2\0\2\52\1\0\1\52"+
    "\7\0\27\52\1\0\3\53\34\0\1\53\40\0\1\134"+
    "\1\135\1\0\2\54\4\0\22\54\2\0\2\54\1\0"+
    "\1\54\7\0\27\54\1\0\3\55\34\0\1\55\40\0"+
    "\1\136\1\137\1\0\3\56\3\0\22\56\2\0\2\56"+
    "\1\0\1\56\7\0\27\56\1\0\1\136\1\137\1\0"+
    "\3\56\3\0\12\56\1\140\7\56\2\0\2\56\1\0"+
    "\1\56\7\0\27\56\1\0\3\60\34\0\1\60\40\0"+
    "\1\141\1\142\1\0\2\61\4\0\22\61\2\0\2\61"+
    "\1\0\1\61\7\0\27\61\1\0\3\62\34\0\1\62"+
    "\40\0\1\143\1\144\1\0\2\63\4\0\22\63\2\0"+
    "\2\63\1\0\1\63\7\0\27\63\13\0\1\145\100\0"+
    "\1\146\110\0\1\147\73\0\1\150\10\0\1\151\60\0"+
    "\1\152\110\0\1\153\101\0\1\154\70\0\1\155\77\0"+
    "\1\156\72\0\1\157\113\0\1\160\76\0\1\161\76\0"+
    "\1\162\73\0\1\163\132\0\1\164\101\0\1\165\115\0"+
    "\1\166\73\0\1\167\63\0\1\170\75\0\1\171\121\0"+
    "\1\172\72\0\1\173\67\0\1\174\107\0\1\175\66\0"+
    "\1\176\116\0\1\177\71\0\1\200\66\0\1\201\115\0"+
    "\1\202\61\0\1\203\5\0\1\204\102\0\1\205\74\0"+
    "\1\206\14\0\7\126\1\127\1\126\1\131\66\126\2\0"+
    "\1\133\77\0\1\135\77\0\1\137\76\0\1\136\1\137"+
    "\1\0\3\56\3\0\1\56\1\207\20\56\2\0\2\56"+
    "\1\0\1\56\7\0\27\56\2\0\1\142\77\0\1\144"+
    "\111\0\1\210\77\0\1\211\76\0\1\212\76\0\1\213"+
    "\101\0\1\214\75\0\1\215\100\0\1\216\105\0\1\217"+
    "\71\0\1\220\100\0\1\221\113\0\1\222\72\0\1\223"+
    "\100\0\1\224\111\0\1\225\112\0\1\226\104\0\1\227"+
    "\101\0\1\230\77\0\1\231\103\0\1\232\67\0\1\233"+
    "\76\0\1\234\101\0\1\235\102\0\1\236\2\0\1\237"+
    "\52\0\1\240\133\0\1\241\76\0\1\242\57\0\1\243"+
    "\102\0\1\244\105\0\1\245\103\0\1\246\74\0\1\247"+
    "\105\0\1\250\7\0\1\136\1\137\1\0\3\56\3\0"+
    "\12\56\1\251\7\56\2\0\2\56\1\0\1\56\7\0"+
    "\27\56\15\0\1\252\101\0\1\253\106\0\1\254\73\0"+
    "\1\255\102\0\1\256\75\0\1\257\70\0\1\260\12\0"+
    "\1\261\101\0\1\262\73\0\1\263\111\0\1\264\100\0"+
    "\1\265\113\0\1\266\115\0\1\267\70\0\1\270\70\0"+
    "\1\271\61\0\1\272\114\0\1\273\11\0\1\274\77\0"+
    "\1\275\74\0\1\276\53\0\1\277\121\0\1\300\104\0"+
    "\1\301\71\0\1\302\56\0\1\303\127\0\1\304\77\0"+
    "\1\305\77\0\1\306\70\0\1\307\111\0\1\310\7\0"+
    "\1\136\1\137\1\0\3\56\3\0\6\56\1\311\13\56"+
    "\2\0\2\56\1\0\1\56\7\0\27\56\13\0\1\312"+
    "\112\0\1\313\77\0\1\314\74\0\1\315\107\0\1\316"+
    "\70\0\1\317\100\0\1\320\72\0\1\321\76\0\1\322"+
    "\73\0\1\323\124\0\1\324\114\0\1\325\113\0\1\326"+
    "\66\0\1\327\104\0\1\330\101\0\1\331\76\0\1\332"+
    "\47\0\1\333\113\0\1\334\101\0\1\335\77\0\1\336"+
    "\77\0\1\337\110\0\1\340\50\0\1\341\124\0\1\342"+
    "\77\0\1\343\77\0\1\344\110\0\1\345\41\0\1\346"+
    "\115\0\1\347\24\0\1\136\1\137\1\0\3\56\3\0"+
    "\2\56\1\350\17\56\2\0\2\56\1\0\1\56\7\0"+
    "\27\56\16\0\1\351\107\0\1\352\75\0\1\353\104\0"+
    "\1\354\61\0\1\355\111\0\1\356\75\0\1\357\77\0"+
    "\1\360\132\0\1\361\57\0\1\362\115\0\1\363\103\0"+
    "\1\364\77\0\1\365\76\0\1\366\75\0\1\367\102\0"+
    "\1\370\74\0\1\371\75\0\1\372\111\0\1\373\66\0"+
    "\1\374\76\0\1\375\100\0\1\376\61\0\1\377\135\0"+
    "\1\u0100\41\0\1\u0101\121\0\1\u0102\102\0\1\u0103\33\0"+
    "\1\u0104\77\0\1\u0105\106\0\1\u0106\70\0\1\u0107\77\0"+
    "\1\u0108\137\0\1\u0109\74\0\1\u010a\100\0\1\u010b\110\0"+
    "\1\u010c\65\0\1\u010d\61\0\1\u010e\121\0\1\u010f\71\0"+
    "\1\u0110\103\0\1\u0111\107\0\1\u0112\71\0\1\u0113\70\0"+
    "\1\u0114\106\0\1\u0115\103\0\1\u0116\67\0\1\u0117\115\0"+
    "\1\u0118\61\0\1\u0119\61\0\1\u011a\127\0\1\u011b\37\0"+
    "\1\u011c\130\0\1\u011d\104\0\1\u011e\64\0\1\u011f\106\0"+
    "\1\u0120\74\0\1\u0121\74\0\1\u0122\103\0\1\u0123\100\0"+
    "\1\u0124\77\0\1\u0125\106\0\1\u0126\47\0\1\u0127\115\0"+
    "\1\u0128\75\0\1\u0129\112\0\1\u012a\71\0\1\u012b\105\0"+
    "\1\u012c\75\0\1\u012d\113\0\1\u012e\36\0\1\u012f\113\0"+
    "\1\u0130\113\0\1\u0131\47\0\1\u0132\112\0\1\u0133\104\0"+
    "\1\u0134\74\0\1\u0135\103\0\1\u0136\56\0\1\u0137\121\0"+
    "\1\u0138\114\0\1\u0139\67\0\1\u013a\63\0\1\u013b\106\0"+
    "\1\u013c\55\0\1\u013d\121\0\1\u013e\73\0\1\u013f\77\0"+
    "\1\u0140\76\0\1\u0141\75\0\1\u0142\113\0\1\u0143\66\0"+
    "\1\u0144\111\0\1\u0145\64\0\1\u0146\100\0\1\u0147\61\0"+
    "\1\u0148\77\0\1\u0149\77\0\1\u014a\121\0\1\u014b\55\0"+
    "\1\u014c\127\0\1\u014d\64\0\1\u014e\112\0\1\u014f\64\0"+
    "\1\u0150\4\0\1\u0151\74\0\1\u0152\102\0\1\u0153\55\0"+
    "\1\u0154\126\0\1\u0155\65\0\1\u0156\111\0\1\u0157\66\0"+
    "\1\u0158\76\0\1\u0159\77\0\1\u015a\100\0\1\u015b\74\0"+
    "\1\u015c\114\0\1\u015d\65\0\1\u015e\103\0\1\u015f\77\0"+
    "\1\u0160\77\0\1\u0161\105\0\1\u0162\107\0\1\u0163\57\0"+
    "\1\u0164\75\0\1\u0165\77\0\1\u0166\111\0\1\u0167\76\0"+
    "\1\u0168\73\0\1\u0169\104\0\1\u016a\71\0\1\u016b\72\0"+
    "\1\u016c\104\0\1\u016d\72\0\1\u016e\62\0\1\u016f\115\0"+
    "\1\u0170\61\0\1\u0171\120\0\1\u0172\113\0\1\u0173\75\0"+
    "\1\u0174\61\0\1\u0175\111\0\1\u0176\71\0\1\u0177\74\0"+
    "\1\u0178\101\0\1\u0179\100\0\1\u017a\106\0\1\u017b\47\0"+
    "\1\u017c\127\0\1\u017d\70\0\1\u017e\103\0\1\u017f\73\0"+
    "\1\u0180\56\0\1\u0181\77\0\1\u0182\77\0\1\u0183\127\0"+
    "\1\u0184\71\0\1\u0185\55\0\1\u0186\114\0\1\u0187\116\0"+
    "\1\u0188\43\0\1\u0189\120\0\1\u018a\77\0\1\u018b\77\0"+
    "\1\u018c\56\0\1\u018d\127\0\1\u018e\47\0\1\u018f\120\0"+
    "\1\u0190\106\0\1\u0191\77\0\1\u0192\64\0\1\u0193\62\0"+
    "\1\u0194\77\0\1\u0195\77\0\1\u0196\114\0\1\u0197\123\0"+
    "\1\u0198\53\0\1\u0199\62\0\1\u019a\121\0\1\u019b\76\0"+
    "\1\u019c\111\0\1\u019d\61\0\1\u019e\104\0\1\u019f\73\0"+
    "\1\u01a0\103\0\1\u01a1\55\0\1\u01a2\77\0\1\u01a3\121\0"+
    "\1\u01a4\74\0\1\u01a5\101\0\1\u01a6\76\0\1\u01a7\57\0"+
    "\1\u01a8\132\0\1\u01a9\61\0\1\u01aa\62\0\1\u01ab\121\0"+
    "\1\u01ac\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\2\1\2\11\2\1\2\11\1\1\7\11"+
    "\33\1\2\11\42\0\3\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\12\0\1\11\1\0"+
    "\1\11\25\0\1\1\5\0\1\11\4\0\1\11\7\0"+
    "\1\11\15\0\1\11\1\1\13\0\1\11\23\0\1\1"+
    "\2\0\1\11\2\0\1\11\4\0\1\11\23\0\1\1"+
    "\1\0\2\11\3\0\1\11\24\0\2\11\1\0\2\11"+
    "\5\0\1\11\15\0\1\11\32\0\1\11\33\0\1\11"+
    "\10\0\1\11\16\0\1\11\25\0\3\11\2\0\1\11"+
    "\2\0\1\11\12\0\1\11\1\0\1\11\3\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11"+
    "\6\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { return INCLUDE_KEYWORD;
          }
        case 66: break;
        case 23: 
          { yybegin(YYINITIAL); return FSM_FILE_NAME;
          }
        case 67: break;
        case 41: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return PACKAGE_KEYWORD;
          }
        case 68: break;
        case 44: 
          { return DECLARE_KEYWORD;
          }
        case 69: break;
        case 17: 
          { yybegin(YYINITIAL); return CONTEXT_CLASS_NAME;
          }
        case 70: break;
        case 25: 
          { yybegin(YYINITIAL); return VERBATIM_CLOSE;
          }
        case 71: break;
        case 8: 
          { return GUARD_CLOSE;
          }
        case 72: break;
        case 11: 
          { return SEMICOLON;
          }
        case 73: break;
        case 26: 
          { yybegin(YYINITIAL);  yypushback(2); return VERBATIM_CODE;
          }
        case 74: break;
        case 36: 
          { return ENTRY_KEYWORD;
          }
        case 75: break;
        case 7: 
          { return GUARD_OPEN;
          }
        case 76: break;
        case 59: 
          { return MAP_SECTION_BOUND;
          }
        case 77: break;
        case 56: 
          { return START_STATE_NAME;
          }
        case 78: break;
        case 31: 
          { return CRLF;
          }
        case 79: break;
        case 55: 
          { return TRANSITION_NAME;
          }
        case 80: break;
        case 3: 
          { return BRACE_OPEN;
          }
        case 81: break;
        case 27: 
          { return POP_KEYWORD;
          }
        case 82: break;
        case 5: 
          { return BRACKET_OPEN;
          }
        case 83: break;
        case 35: 
          { return START_KEYWORD;
          }
        case 84: break;
        case 54: 
          { return NEXT_STATE_NAME;
          }
        case 85: break;
        case 12: 
          { return ASSIGN_OP;
          }
        case 86: break;
        case 52: 
          { return PARAMETER_TYPE;
          }
        case 87: break;
        case 10: 
          { return COMMA;
          }
        case 88: break;
        case 49: 
          { return ACCESS_LEVEL;
          }
        case 89: break;
        case 43: 
          { yybegin(WAITING_FOR_FSM_FILE); return FSM_FILE_KEYWORD;
          }
        case 90: break;
        case 39: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return IMPORT_KEYWORD;
          }
        case 91: break;
        case 37: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return STATIC_JAVA_KEYWORD;
          }
        case 92: break;
        case 61: 
          { return PACKAGE_STATEMENT;
          }
        case 93: break;
        case 46: 
          { yybegin(WAITING_FOR_FSM_CLASS); return FSM_CLASS_KEYWORD;
          }
        case 94: break;
        case 45: 
          { return MAP_NAME;
          }
        case 95: break;
        case 13: 
          { return SLASH_SIGN;
          }
        case 96: break;
        case 16: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 97: break;
        case 51: 
          { return PARAMETER_NAME;
          }
        case 98: break;
        case 40: 
          { return HEADER_KEYWORD;
          }
        case 99: break;
        case 18: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 100: break;
        case 9: 
          { return COLON;
          }
        case 101: break;
        case 32: 
          { return WORD;
          }
        case 102: break;
        case 50: 
          { return BLOCK_COMMENT;
          }
        case 103: break;
        case 57: 
          { return HEADER_FILE_NAME;
          }
        case 104: break;
        case 47: 
          { return STATE_NAME;
          }
        case 105: break;
        case 29: 
          { return MAP_KEYWORD;
          }
        case 106: break;
        case 62: 
          { return CONTEXT_CLASS_NAME;
          }
        case 107: break;
        case 30: 
          { return PUSH_KEYWORD;
          }
        case 108: break;
        case 48: 
          { return LINE_COMMENT;
          }
        case 109: break;
        case 20: 
          { yybegin(WAITING_FOR_FSM_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 110: break;
        case 60: 
          { return DECLARE_STATEMENT;
          }
        case 111: break;
        case 33: 
          { return EXIT_KEYWORD;
          }
        case 112: break;
        case 58: 
          { return INCLUDE_FILE_NAME;
          }
        case 113: break;
        case 24: 
          { yybegin(WAITING_FOR_VERBATIM_CODE);  return VERBATIM_OPEN;
          }
        case 114: break;
        case 22: 
          { yybegin(WAITING_FOR_FSM_FILE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 115: break;
        case 21: 
          { yybegin(YYINITIAL); return FSM_CLASS_NAME;
          }
        case 116: break;
        case 28: 
          { return NIL_KEYWORD;
          }
        case 117: break;
        case 14: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 118: break;
        case 4: 
          { return BRACE_CLOSE;
          }
        case 119: break;
        case 64: 
          { return POP_ARGUMENT_RAW_CODE;
          }
        case 120: break;
        case 65: 
          { return IMPORT_CLASS_STATEMENT;
          }
        case 121: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 122: break;
        case 63: 
          { return ARGUMENT_STATEMENT;
          }
        case 123: break;
        case 34: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return CLASS_KEYWORD;
          }
        case 124: break;
        case 53: 
          { return GUARD_RAW_CODE;
          }
        case 125: break;
        case 6: 
          { return BRACKET_CLOSE;
          }
        case 126: break;
        case 19: 
          { yybegin(YYINITIAL); return IMPORT_CLASS_STATEMENT;
          }
        case 127: break;
        case 38: 
          { return ACCESS_KEYWORD;
          }
        case 128: break;
        case 15: 
          { yybegin(YYINITIAL); return PACKAGE_STATEMENT;
          }
        case 129: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 130: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
