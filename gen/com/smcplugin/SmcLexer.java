/* The following code was generated by JFlex 1.4.3 on 20.02.16 7:52 */

package com.smcplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import static com.smcplugin.psi.SmcTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20.02.16 7:52 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_FOR_NEXT_STATE_NAME = 48;
  public static final int WAITING_FOR_ENTRY_EXIT_ARGUMENTS = 36;
  public static final int WAITING_FOR_HEADER = 16;
  public static final int WAITING_FOR_FSM_FILE = 12;
  public static final int WAITING_FOR_ACCESS = 14;
  public static final int WAITING_FOR_ACTIONS = 50;
  public static final int WAITING_FOR_INCLUDE = 20;
  public static final int WAITING_FOR_ARGUMENTS = 28;
  public static final int WAITING_FOR_GUARD_RAW_CODE = 46;
  public static final int WAITING_FOR_ENTRY_EXIT_ACTIONS = 34;
  public static final int WAITING_FOR_MAP = 24;
  public static final int WAITING_FOR_ACTION_NAME = 52;
  public static final int WAITING_FOR_CONTEXT_CLASS = 6;
  public static final int WAITING_FOR_PACKAGE_STATEMENT = 4;
  public static final int WAITING_FOR_IMPORT_CLASS = 8;
  public static final int WAITING_FOR_START = 22;
  public static final int WAITING_FOR_STATE = 26;
  public static final int WAITING_FOR_DECLARE = 18;
  public static final int WAITING_FOR_TRANSITIONS = 38;
  public static final int WAITING_FOR_PARAMETER_NAME = 44;
  public static final int WAITING_FOR_STATE_EXIT = 32;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_PARAMETERS = 40;
  public static final int WAITING_FOR_FSM_CLASS = 10;
  public static final int WAITING_FOR_VERBATIM_CODE = 2;
  public static final int WAITING_FOR_PARAMETER_TYPE = 42;
  public static final int WAITING_FOR_STATE_ENTRY = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\6"+
    "\2\0\1\32\1\0\1\7\1\43\1\44\1\27\1\0\1\47\1\0"+
    "\1\5\1\31\12\10\1\11\1\50\1\0\1\51\3\0\4\4\1\52"+
    "\25\4\1\45\1\7\1\46\1\0\1\5\1\0\1\26\1\14\1\17"+
    "\1\24\1\23\1\41\1\36\1\42\1\16\1\4\1\35\1\15\1\37"+
    "\1\30\1\21\1\12\1\4\1\20\1\40\1\22\1\13\1\25\1\4"+
    "\1\54\1\53\1\4\1\33\1\0\1\34\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\1\1\1\2\1\3\2\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\1\1\16\1\17\1\20\1\21\1\22\2\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\1\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\1\1\40\1\41\1\1"+
    "\1\42\1\43\1\1\1\44\1\43\1\45\1\46\1\1"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\2\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\1\1\103\1\104\1\105"+
    "\2\106\1\107\1\110\1\111\1\112\1\113\1\114\4\0"+
    "\1\115\5\0\1\116\1\117\6\0\1\116\1\120\2\17"+
    "\2\21\3\23\2\25\2\27\2\0\2\32\2\34\2\36"+
    "\1\0\2\41\1\121\2\43\1\122\2\43\2\46\1\0"+
    "\1\123\2\56\2\62\2\66\3\70\2\75\2\101\1\0"+
    "\3\106\2\111\1\0\1\124\1\125\13\0\1\23\4\0"+
    "\2\43\2\126\1\127\1\130\6\0\1\131\3\0\1\23"+
    "\4\0\1\43\1\132\12\0\1\23\4\0\1\133\3\0"+
    "\1\134\2\0\1\135\3\0\1\136\1\137\2\0\1\140"+
    "\2\0\1\141\1\0\1\142\2\0\1\143\1\0\2\140"+
    "\1\144\1\145\1\146\1\0\1\147\1\0\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u0492\0\u04bf\0\u0492\0\u04ec\0\u0519"+
    "\0\u0546\0\u0573\0\u0492\0\u0492\0\u0492\0\u0492\0\u0492\0\u0492"+
    "\0\u0492\0\u0492\0\u0492\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654"+
    "\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\u0492\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0492\0\u0492\0\u0b6d"+
    "\0\u0492\0\u0492\0\u0b9a\0\u0bc7\0\u0bf4\0\u0492\0\u0492\0\u0c21"+
    "\0\u0c4e\0\u0492\0\u0492\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f"+
    "\0\u0492\0\u0492\0\u0492\0\u0d5c\0\u0d89\0\u0492\0\u0492\0\u0db6"+
    "\0\u0de3\0\u0492\0\u0e10\0\u0e3d\0\u0e10\0\u0e6a\0\u0e97\0\u0ec4"+
    "\0\u0492\0\u0ef1\0\u0f1e\0\u0492\0\u0492\0\u0492\0\u0f4b\0\u0f78"+
    "\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0"+
    "\0\u0492\0\u0492\0\u110d\0\u113a\0\u1167\0\u1194\0\u05a0\0\u11c1"+
    "\0\u05a0\0\u05a0\0\u11ee\0\u0492\0\u121b\0\u0492\0\u1248\0\u0492"+
    "\0\u1275\0\u12a2\0\u0492\0\u12cf\0\u0492\0\u12fc\0\u1329\0\u1356"+
    "\0\u0492\0\u1383\0\u0492\0\u13b0\0\u0492\0\u13dd\0\u140a\0\u0492"+
    "\0\u0492\0\u1437\0\u0492\0\u0492\0\u1464\0\u1491\0\u14be\0\u0492"+
    "\0\u0b40\0\u0b40\0\u14eb\0\u0492\0\u1518\0\u0492\0\u1545\0\u0492"+
    "\0\u1572\0\u0492\0\u159f\0\u15cc\0\u0492\0\u15f9\0\u0492\0\u0e10"+
    "\0\u1626\0\u0492\0\u1653\0\u1680\0\u0492\0\u16ad\0\u0492\0\u0492"+
    "\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815"+
    "\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d"+
    "\0\u19aa\0\u19d7\0\u0d02\0\u0e97\0\u0492\0\u0fd2\0\u1a04\0\u1a31"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u0492\0\u1b12\0\u1b3f\0\u1b6c"+
    "\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u0a5f\0\u1ca7"+
    "\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f"+
    "\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u0a5f\0\u1f4a"+
    "\0\u1f77\0\u1fa4\0\u0492\0\u1fd1\0\u1ffe\0\u0492\0\u202b\0\u2058"+
    "\0\u2085\0\u06db\0\u0492\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166"+
    "\0\u0492\0\u2193\0\u0492\0\u21c0\0\u21ed\0\u0492\0\u221a\0\u2247"+
    "\0\u0492\0\u0492\0\u0492\0\u0492\0\u2274\0\u0492\0\u22a1\0\u0492";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\34\3\35\5\34\1\36\1\37\15\34\1\40\1\41"+
    "\1\42\1\43\1\44\6\34\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\3\34\32\54\1\55\22\54\1\34"+
    "\3\56\1\57\5\34\15\57\1\34\1\57\4\34\6\57"+
    "\7\34\3\57\1\34\3\60\1\61\5\34\15\61\1\34"+
    "\1\61\4\34\6\61\7\34\3\61\1\34\3\62\1\63"+
    "\5\34\15\63\1\34\1\63\4\34\3\63\1\64\2\63"+
    "\7\34\3\63\1\34\3\65\1\66\5\34\15\66\1\34"+
    "\1\66\4\34\6\66\7\34\3\66\1\34\3\67\1\70"+
    "\5\34\15\70\1\34\1\70\4\34\6\70\7\34\3\70"+
    "\1\34\3\71\6\34\1\72\43\34\3\73\1\74\5\34"+
    "\15\74\1\34\1\74\4\34\6\74\7\34\3\74\1\34"+
    "\3\75\1\76\5\34\15\76\1\34\1\76\4\34\6\76"+
    "\7\34\3\76\1\34\3\77\1\100\5\34\15\100\1\34"+
    "\1\100\4\34\6\100\7\34\3\100\1\34\3\101\1\102"+
    "\5\34\15\102\1\34\1\102\4\34\6\102\7\34\3\102"+
    "\1\34\3\103\1\104\5\34\15\104\1\34\1\104\1\34"+
    "\1\105\2\34\6\104\7\34\3\104\1\34\3\106\1\107"+
    "\5\34\15\107\1\34\1\107\1\34\1\110\1\111\1\34"+
    "\6\107\7\34\1\112\2\107\1\34\3\113\1\114\1\34"+
    "\1\115\3\34\15\114\1\34\1\114\4\34\6\114\1\34"+
    "\1\116\2\34\1\117\2\34\3\114\1\34\3\120\27\34"+
    "\1\121\1\122\21\34\3\123\27\34\1\121\1\122\21\34"+
    "\3\124\1\125\5\34\15\125\1\34\1\125\3\34\1\122"+
    "\6\125\1\126\4\34\1\127\1\34\3\125\1\34\3\130"+
    "\1\131\5\34\15\131\1\34\1\131\4\34\6\131\1\34"+
    "\1\132\2\34\1\133\2\34\3\131\1\34\3\134\1\135"+
    "\5\34\15\135\1\34\1\135\3\34\1\122\6\135\7\34"+
    "\3\135\1\34\3\136\1\137\5\34\15\137\1\34\1\140"+
    "\2\34\1\141\1\122\6\137\1\142\1\34\1\143\4\34"+
    "\3\137\1\34\3\144\1\145\5\34\15\145\1\34\1\145"+
    "\4\34\6\145\1\34\1\146\2\34\1\147\2\34\3\145"+
    "\1\34\3\150\1\151\4\34\1\152\15\151\1\34\1\151"+
    "\4\34\6\151\7\34\3\151\1\153\3\154\42\153\1\155"+
    "\6\153\1\34\3\156\1\157\5\34\15\157\1\34\1\160"+
    "\2\34\1\141\1\34\6\157\2\34\1\143\1\161\3\34"+
    "\3\157\1\34\3\162\1\163\5\34\15\163\1\34\1\163"+
    "\3\34\1\164\6\163\1\165\4\34\1\166\1\34\3\163"+
    "\56\0\3\35\64\0\1\167\5\0\1\170\51\0\1\171"+
    "\65\0\1\172\1\0\1\173\35\0\1\174\3\0\1\175"+
    "\1\176\4\0\1\177\1\0\1\200\4\0\1\201\1\202"+
    "\2\0\1\203\1\204\1\205\1\206\12\0\32\207\1\210"+
    "\54\207\1\210\1\211\1\212\20\207\1\0\3\56\52\0"+
    "\1\213\1\214\1\0\2\57\2\0\1\57\1\0\15\57"+
    "\1\0\1\57\4\0\6\57\7\0\3\57\1\0\3\60"+
    "\52\0\1\215\1\216\1\0\2\61\2\0\1\61\1\0"+
    "\15\61\1\0\1\61\4\0\6\61\7\0\3\61\1\0"+
    "\3\62\52\0\1\217\1\220\1\0\2\63\2\0\1\63"+
    "\1\0\17\63\4\0\6\63\7\0\3\63\1\0\1\217"+
    "\1\220\1\0\2\63\2\0\1\63\1\0\10\63\1\221"+
    "\6\63\4\0\6\63\7\0\3\63\1\0\3\65\52\0"+
    "\1\222\1\223\1\0\2\66\2\0\1\66\1\0\15\66"+
    "\1\0\1\66\4\0\6\66\7\0\3\66\1\0\3\67"+
    "\52\0\1\224\1\225\1\0\2\70\2\0\1\70\1\0"+
    "\15\70\1\0\1\70\4\0\6\70\7\0\3\70\1\0"+
    "\3\71\64\0\1\226\4\0\1\227\35\0\3\73\52\0"+
    "\1\230\1\231\1\0\2\74\2\0\1\74\1\0\15\74"+
    "\1\0\1\74\4\0\6\74\7\0\3\74\1\0\3\75"+
    "\52\0\1\232\1\233\1\0\2\76\2\0\1\76\1\0"+
    "\15\76\1\0\1\76\4\0\6\76\7\0\3\76\1\0"+
    "\3\77\52\0\1\234\1\235\1\0\2\100\2\0\1\100"+
    "\1\0\15\100\1\0\1\100\4\0\6\100\7\0\3\100"+
    "\1\0\3\101\55\0\1\236\3\0\1\236\1\0\15\236"+
    "\1\0\1\236\4\0\6\236\7\0\3\236\1\0\3\103"+
    "\52\0\1\237\1\240\1\0\2\104\2\0\1\104\1\0"+
    "\15\104\1\0\1\104\4\0\6\104\7\0\3\104\32\0"+
    "\1\241\23\0\3\106\52\0\1\242\1\243\1\0\2\107"+
    "\2\0\1\107\1\0\15\107\1\0\1\107\4\0\6\107"+
    "\7\0\3\107\32\0\1\244\23\0\1\242\1\243\1\0"+
    "\2\107\2\0\1\107\1\0\15\107\1\0\1\245\4\0"+
    "\6\107\7\0\2\107\1\246\1\0\3\113\52\0\1\247"+
    "\1\250\1\0\2\114\2\0\1\114\1\0\15\114\1\0"+
    "\1\114\4\0\6\114\7\0\3\114\4\0\2\251\1\252"+
    "\22\251\4\0\6\251\4\0\2\251\1\0\3\251\1\0"+
    "\3\120\52\0\3\123\52\0\3\124\52\0\1\253\1\254"+
    "\1\0\2\125\2\0\1\125\1\0\15\125\1\0\1\125"+
    "\4\0\6\125\7\0\3\125\1\0\3\130\52\0\1\255"+
    "\1\256\1\0\2\131\2\0\1\131\1\0\15\131\1\0"+
    "\1\131\4\0\6\131\7\0\3\131\1\0\3\134\52\0"+
    "\1\257\1\260\1\0\2\135\2\0\1\135\1\0\15\135"+
    "\1\0\1\135\4\0\6\135\7\0\3\135\1\0\3\136"+
    "\52\0\1\261\1\262\1\0\2\137\2\0\1\137\1\0"+
    "\15\137\1\0\1\137\4\0\6\137\7\0\3\137\1\0"+
    "\1\261\1\262\1\0\2\137\2\0\1\137\1\0\4\137"+
    "\1\263\10\137\1\0\1\137\4\0\6\137\7\0\3\137"+
    "\1\0\3\144\52\0\1\264\1\265\1\0\2\145\2\0"+
    "\1\145\1\0\15\145\1\0\1\145\4\0\6\145\7\0"+
    "\3\145\1\0\3\150\52\0\1\266\1\267\1\0\2\151"+
    "\2\0\1\151\1\0\15\151\1\0\1\151\4\0\6\151"+
    "\7\0\3\151\46\270\1\155\7\270\3\154\42\270\1\155"+
    "\6\270\1\0\3\156\52\0\1\271\1\272\1\0\2\157"+
    "\2\0\1\157\1\0\15\157\1\0\1\157\4\0\6\157"+
    "\7\0\3\157\1\0\1\271\1\272\1\0\2\157\2\0"+
    "\1\157\1\0\4\157\1\273\10\157\1\0\1\157\4\0"+
    "\6\157\7\0\3\157\1\0\3\162\52\0\1\274\1\275"+
    "\1\0\2\163\2\0\1\163\1\0\15\163\1\0\1\163"+
    "\4\0\6\163\7\0\3\163\40\0\1\276\26\0\1\277"+
    "\57\0\1\300\37\0\27\172\1\301\25\172\2\173\1\0"+
    "\52\173\26\0\1\302\56\0\1\303\6\0\1\304\32\0"+
    "\1\305\62\0\1\306\50\0\1\307\63\0\1\310\50\0"+
    "\1\311\72\0\1\312\37\0\1\313\31\0\32\207\1\210"+
    "\1\207\1\212\20\207\2\0\1\214\54\0\1\216\54\0"+
    "\1\220\53\0\1\217\1\220\1\0\2\63\2\0\1\63"+
    "\1\0\14\63\1\314\2\63\4\0\6\63\7\0\3\63"+
    "\2\0\1\223\54\0\1\225\66\0\1\315\56\0\1\316"+
    "\2\0\1\317\35\0\1\231\54\0\1\233\54\0\1\235"+
    "\56\0\1\236\3\0\1\236\1\320\15\236\1\0\1\236"+
    "\4\0\6\236\7\0\3\236\2\0\1\240\54\0\1\243"+
    "\53\0\1\242\1\243\1\0\2\107\2\0\1\107\1\0"+
    "\10\107\1\321\4\107\1\0\1\107\4\0\6\107\7\0"+
    "\3\107\1\0\1\242\1\243\1\0\2\107\2\0\1\107"+
    "\1\0\4\107\1\322\10\107\1\0\1\107\4\0\6\107"+
    "\7\0\3\107\2\0\1\250\54\0\1\254\54\0\1\256"+
    "\54\0\1\260\54\0\1\262\53\0\1\261\1\262\1\0"+
    "\2\137\2\0\1\137\1\0\3\137\1\323\11\137\1\0"+
    "\1\137\4\0\6\137\7\0\3\137\2\0\1\265\54\0"+
    "\1\267\54\0\1\272\53\0\1\271\1\272\1\0\2\157"+
    "\2\0\1\157\1\0\3\157\1\324\11\157\1\0\1\157"+
    "\4\0\6\157\7\0\3\157\2\0\1\275\114\0\1\325"+
    "\12\0\27\172\1\301\1\172\1\326\23\172\17\0\1\327"+
    "\54\0\1\330\47\0\1\331\70\0\1\332\45\0\1\333"+
    "\54\0\1\334\47\0\1\335\70\0\1\336\65\0\1\337"+
    "\43\0\1\340\27\0\1\217\1\220\1\0\2\63\2\0"+
    "\1\63\1\0\10\63\1\341\6\63\4\0\6\63\7\0"+
    "\3\63\15\0\1\342\64\0\1\343\51\0\1\344\43\0"+
    "\1\345\44\0\1\242\1\243\1\0\2\107\2\0\1\107"+
    "\1\0\6\107\1\346\6\107\1\0\1\107\4\0\6\107"+
    "\7\0\3\107\1\0\1\242\1\243\1\0\2\107\2\0"+
    "\1\107\1\0\10\107\1\347\4\107\1\0\1\107\4\0"+
    "\6\107\7\0\3\107\35\0\1\350\34\0\1\351\60\0"+
    "\1\352\73\0\1\353\31\0\1\354\62\0\1\355\51\0"+
    "\1\356\53\0\1\357\21\0\1\360\37\0\1\361\31\0"+
    "\1\217\1\220\1\0\2\63\2\0\1\63\1\0\4\63"+
    "\1\362\12\63\4\0\6\63\7\0\3\63\16\0\1\363"+
    "\64\0\1\364\51\0\1\365\35\0\1\366\5\0\15\366"+
    "\1\0\1\366\4\0\6\366\7\0\3\366\1\0\1\242"+
    "\1\243\1\0\2\107\2\0\1\107\1\0\15\107\1\0"+
    "\1\107\4\0\6\107\7\0\1\107\1\367\1\107\26\0"+
    "\1\370\41\0\1\371\61\0\1\372\74\0\1\373\42\0"+
    "\1\374\66\0\1\375\36\0\1\376\47\0\1\377\55\0"+
    "\1\u0100\61\0\1\u0101\32\0\1\217\1\220\1\0\2\63"+
    "\2\0\1\63\1\0\5\63\1\u0102\11\63\4\0\6\63"+
    "\7\0\3\63\17\0\1\u0103\57\0\1\u0104\51\0\1\u0105"+
    "\41\0\1\u0106\3\0\1\u0106\1\0\15\u0106\1\0\1\u0106"+
    "\4\0\6\u0106\7\0\3\u0106\36\0\1\u0107\42\0\1\u0108"+
    "\52\0\1\u0109\52\0\1\u010a\74\0\1\u010b\42\0\1\u010c"+
    "\43\0\1\u010d\57\0\1\u010e\57\0\1\u0103\53\0\1\u010f"+
    "\33\0\1\u0110\1\u0111\1\0\1\u0106\3\0\1\u0106\1\0"+
    "\15\u0106\1\0\1\u0106\4\0\6\u0106\7\0\3\u0106\23\0"+
    "\1\u0112\54\0\1\u0113\54\0\1\u0114\71\0\1\u0115\37\0"+
    "\1\u0116\54\0\1\u0117\33\0\1\u0111\112\0\1\u0118\40\0"+
    "\1\u0103\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8910];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\32\0\1\10\1\11\1\1\1\11\4\1\11\11\35\1"+
    "\1\11\4\1\2\11\1\1\2\11\3\1\2\11\2\1"+
    "\2\11\5\1\3\11\2\1\2\11\2\1\1\11\6\1"+
    "\1\11\2\1\3\11\4\0\1\1\5\0\2\11\6\0"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\2\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\0\1\1\2\11\1\1\2\11\3\1\1\11"+
    "\1\0\2\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\1\0\1\1\1\11"+
    "\2\1\1\11\1\0\2\11\13\0\1\1\4\0\4\1"+
    "\1\11\1\1\6\0\1\11\3\0\1\1\4\0\2\1"+
    "\12\0\1\1\4\0\1\1\3\0\1\11\2\0\1\11"+
    "\3\0\1\1\1\11\2\0\1\1\2\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\1\4\11\1\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }
  private Stack<Integer> stack = new Stack<Integer>();
  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 103: 
          { yybegin(WAITING_FOR_FSM_FILE); return FSM_FILE_KEYWORD;
          }
        case 105: break;
        case 57: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACE_OPEN;
          }
        case 106: break;
        case 94: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return STATIC_JAVA_KEYWORD;
          }
        case 107: break;
        case 88: 
          { return BLOCK_COMMENT;
          }
        case 108: break;
        case 51: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return PARENTHESES_CLOSE;
          }
        case 109: break;
        case 99: 
          { yybegin(WAITING_FOR_HEADER); return HEADER_KEYWORD;
          }
        case 110: break;
        case 46: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return ACTION_NAME;
          }
        case 111: break;
        case 93: 
          { yybegin(WAITING_FOR_START); return START_KEYWORD;
          }
        case 112: break;
        case 25: 
          { yybegin(WAITING_FOR_HEADER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 113: break;
        case 52: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS); return COMMA;
          }
        case 114: break;
        case 97: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return IMPORT_KEYWORD;
          }
        case 115: break;
        case 78: 
          { yybegin(WAITING_FOR_VERBATIM_CODE);  return VERBATIM_OPEN;
          }
        case 116: break;
        case 72: 
          { yybegin(WAITING_FOR_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 117: break;
        case 9: 
          { return BRACKET_OPEN;
          }
        case 118: break;
        case 59: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return BRACKET_OPEN;
          }
        case 119: break;
        case 64: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 120: break;
        case 23: 
          { yybegin(YYINITIAL); return FSM_FILE_NAME;
          }
        case 121: break;
        case 13: 
          { return ASSIGN_OP;
          }
        case 122: break;
        case 3: 
          { return COLON;
          }
        case 123: break;
        case 89: 
          { yybegin(WAITING_FOR_MAP); return MAP_KEYWORD;
          }
        case 124: break;
        case 81: 
          { yybegin(WAITING_FOR_STATE); return MAP_SECTION_BOUND;
          }
        case 125: break;
        case 55: 
          { yybegin(WAITING_FOR_PARAMETERS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 126: break;
        case 100: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return PACKAGE_KEYWORD;
          }
        case 127: break;
        case 34: 
          { yybegin(WAITING_FOR_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 128: break;
        case 35: 
          { yybegin(WAITING_FOR_STATE); return STATE_NAME;
          }
        case 129: break;
        case 32: 
          { yybegin(WAITING_FOR_MAP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 130: break;
        case 49: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 131: break;
        case 28: 
          { yybegin(YYINITIAL); return DECLARE_STATEMENT;
          }
        case 132: break;
        case 37: 
          { yybegin(WAITING_FOR_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 133: break;
        case 10: 
          { return BRACKET_CLOSE;
          }
        case 134: break;
        case 71: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return BRACKET_CLOSE;
          }
        case 135: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 136: break;
        case 18: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 137: break;
        case 30: 
          { yybegin(YYINITIAL); return INCLUDE_FILE_NAME;
          }
        case 138: break;
        case 67: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 139: break;
        case 4: 
          { return SLASH_SIGN;
          }
        case 140: break;
        case 38: 
          { yybegin(WAITING_FOR_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 141: break;
        case 12: 
          { return SEMICOLON;
          }
        case 142: break;
        case 53: 
          { yybegin(WAITING_FOR_TRANSITIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 143: break;
        case 11: 
          { return COMMA;
          }
        case 144: break;
        case 43: 
          { yybegin(WAITING_FOR_STATE); return BRACE_CLOSE;
          }
        case 145: break;
        case 40: 
          { yybegin(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 146: break;
        case 98: 
          { yybegin(WAITING_FOR_ACCESS); return ACCESS_KEYWORD;
          }
        case 147: break;
        case 95: 
          { yybegin(YYINITIAL); return ACCESS_LEVEL;
          }
        case 148: break;
        case 20: 
          { yybegin(WAITING_FOR_FSM_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 149: break;
        case 50: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 150: break;
        case 102: 
          { yybegin(WAITING_FOR_DECLARE); return DECLARE_KEYWORD;
          }
        case 151: break;
        case 68: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME);  yypushback(1); return GUARD_RAW_CODE;
          }
        case 152: break;
        case 60: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 153: break;
        case 26: 
          { yybegin(YYINITIAL); return HEADER_FILE_NAME;
          }
        case 154: break;
        case 58: 
          { yybegin(WAITING_FOR_PARAMETER_NAME);  return PARENTHESES_OPEN;
          }
        case 155: break;
        case 76: 
          { yybegin(WAITING_FOR_ACTIONS); return SEMICOLON;
          }
        case 156: break;
        case 65: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return PARAMETER_NAME;
          }
        case 157: break;
        case 48: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return SEMICOLON;
          }
        case 158: break;
        case 42: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return BRACE_OPEN;
          }
        case 159: break;
        case 17: 
          { yybegin(YYINITIAL); return CONTEXT_CLASS_NAME;
          }
        case 160: break;
        case 14: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 161: break;
        case 80: 
          { yybegin(YYINITIAL);  yypushback(2); return VERBATIM_CODE;
          }
        case 162: break;
        case 16: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 163: break;
        case 7: 
          { return PARENTHESES_OPEN;
          }
        case 164: break;
        case 36: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_OPEN;
          }
        case 165: break;
        case 91: 
          { yybegin(WAITING_FOR_STATE_ENTRY); return ENTRY_KEYWORD;
          }
        case 166: break;
        case 63: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return COMMA;
          }
        case 167: break;
        case 66: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return COLON;
          }
        case 168: break;
        case 56: 
          { yybegin(WAITING_FOR_PARAMETERS); return NEXT_STATE_NAME;
          }
        case 169: break;
        case 69: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 170: break;
        case 70: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NEXT_STATE_NAME;
          }
        case 171: break;
        case 45: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 172: break;
        case 8: 
          { return PARENTHESES_CLOSE;
          }
        case 173: break;
        case 33: 
          { yybegin(WAITING_FOR_MAP); return MAP_NAME;
          }
        case 174: break;
        case 77: 
          { return LINE_COMMENT;
          }
        case 175: break;
        case 21: 
          { yybegin(YYINITIAL); return FSM_CLASS_NAME;
          }
        case 176: break;
        case 6: 
          { return BRACE_CLOSE;
          }
        case 177: break;
        case 29: 
          { yybegin(WAITING_FOR_INCLUDE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 178: break;
        case 62: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return PARENTHESES_CLOSE;
          }
        case 179: break;
        case 39: 
          { yybegin(WAITING_FOR_ACTIONS); return PARENTHESES_CLOSE;
          }
        case 180: break;
        case 31: 
          { yybegin(WAITING_FOR_START); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 181: break;
        case 41: 
          { yybegin(WAITING_FOR_STATE_ENTRY); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 182: break;
        case 15: 
          { yybegin(YYINITIAL); return PACKAGE_STATEMENT;
          }
        case 183: break;
        case 73: 
          { yybegin(WAITING_FOR_ACTIONS); return ACTION_NAME;
          }
        case 184: break;
        case 54: 
          { yybegin(WAITING_FOR_PARAMETERS); return TRANSITION_NAME;
          }
        case 185: break;
        case 19: 
          { yybegin(YYINITIAL); return IMPORT_CLASS_STATEMENT;
          }
        case 186: break;
        case 96: 
          { yybegin(YYINITIAL); return START_STATE_NAME;
          }
        case 187: break;
        case 5: 
          { return BRACE_OPEN;
          }
        case 188: break;
        case 83: 
          { yybegin(WAITING_FOR_ARGUMENTS); return STRING_LITERAL;
          }
        case 189: break;
        case 84: 
          { return POP_KEYWORD;
          }
        case 190: break;
        case 74: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_CLOSE;
          }
        case 191: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 192: break;
        case 75: 
          { yybegin(WAITING_FOR_ARGUMENTS);  return PARENTHESES_OPEN;
          }
        case 193: break;
        case 79: 
          { yybegin(YYINITIAL); return VERBATIM_CLOSE;
          }
        case 194: break;
        case 44: 
          { yybegin(WAITING_FOR_STATE_EXIT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 195: break;
        case 22: 
          { yybegin(WAITING_FOR_FSM_FILE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 196: break;
        case 47: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ARGUMENTS);  return PARENTHESES_OPEN;
          }
        case 197: break;
        case 92: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return CLASS_KEYWORD;
          }
        case 198: break;
        case 24: 
          { yybegin(WAITING_FOR_ACCESS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 199: break;
        case 101: 
          { yybegin(WAITING_FOR_INCLUDE); return INCLUDE_KEYWORD;
          }
        case 200: break;
        case 104: 
          { yybegin(WAITING_FOR_FSM_CLASS); return FSM_CLASS_KEYWORD;
          }
        case 201: break;
        case 85: 
          { return NIL_KEYWORD;
          }
        case 202: break;
        case 90: 
          { yybegin(WAITING_FOR_STATE_EXIT); return EXIT_KEYWORD;
          }
        case 203: break;
        case 82: 
          { yybegin(WAITING_FOR_MAP); return MAP_SECTION_BOUND;
          }
        case 204: break;
        case 86: 
          { yybegin(WAITING_FOR_PARAMETERS); return NIL_KEYWORD;
          }
        case 205: break;
        case 27: 
          { yybegin(WAITING_FOR_DECLARE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 206: break;
        case 61: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return PARAMETER_TYPE;
          }
        case 207: break;
        case 87: 
          { return PUSH_KEYWORD;
          }
        case 208: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
