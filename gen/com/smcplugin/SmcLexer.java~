/* The following code was generated by JFlex 1.4.3 on 05.02.16 23:18 */

package com.smcplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.smcplugin.psi.SmcTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05.02.16 23:18 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int RAW_CODE_WAITING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\7\1\1\22\0\1\13\4\0\1\14"+
    "\2\0\1\41\1\42\1\11\1\0\1\51\1\0\1\5\1\10\12\5"+
    "\1\50\1\52\1\0\1\53\3\0\4\4\1\43\25\4\1\46\1\12"+
    "\1\47\1\0\1\6\1\0\1\21\1\4\1\17\1\33\1\26\1\27"+
    "\1\25\1\32\1\31\1\4\1\24\1\20\1\30\1\37\1\35\1\23"+
    "\1\4\1\34\1\22\1\36\1\40\2\4\1\45\1\44\1\4\1\15"+
    "\1\0\1\16\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\2\3\1\7\1\10\1\3\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\20\3\0\1\21\1\0"+
    "\1\22\1\23\1\24\11\0\5\3\1\17\15\0\1\25"+
    "\1\3\1\26\2\3\1\27\3\0\1\30\5\0\1\31"+
    "\4\0\1\32\2\3\1\27\1\30\12\0\1\3\1\33"+
    "\1\34\1\0\1\35\7\0\1\36\1\37\3\0\1\40"+
    "\1\0\1\41\1\0\1\42\1\0\1\43\1\44\1\45"+
    "\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\130\0\130\0\u018c\0\u01b8\0\130\0\130\0\u01e4"+
    "\0\130\0\130\0\130\0\130\0\130\0\130\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\130\0\u02c0\0\u02ec\0\u0318\0\130\0\130"+
    "\0\130\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c"+
    "\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac"+
    "\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c"+
    "\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\334\0\u0814\0\334"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0318\0\u0948"+
    "\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\130\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\334\0\u0ad4\0\u0b00\0\u08c4\0\u08c4\0\u0b2c\0\u0b58"+
    "\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8"+
    "\0\u0ce4\0\130\0\130\0\u0d10\0\130\0\u0d3c\0\u0d68\0\u0d94"+
    "\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\130\0\130\0\u0e70\0\u0e9c"+
    "\0\u0ec8\0\130\0\u0ef4\0\130\0\u0f20\0\130\0\u0f4c\0\130"+
    "\0\130\0\130\0\130";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\3\1\7\1\4"+
    "\1\10\2\3\1\4\1\11\1\12\1\13\4\6\1\14"+
    "\13\6\1\15\1\6\1\16\1\17\1\20\2\6\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\30\1\31"+
    "\3\27\1\30\2\27\1\32\1\30\40\27\2\33\1\34"+
    "\52\33\1\4\1\5\1\4\3\33\1\4\3\33\1\4"+
    "\40\33\1\0\3\5\3\0\1\5\3\0\1\5\40\0"+
    "\2\33\1\34\1\33\3\6\10\33\22\6\2\33\3\6"+
    "\10\33\1\34\1\33\1\6\12\33\22\6\2\33\3\6"+
    "\10\33\1\34\5\33\1\35\1\36\44\33\1\34\11\33"+
    "\1\37\1\40\1\41\1\42\1\33\1\43\1\44\1\45"+
    "\3\33\1\46\1\47\1\50\1\51\1\52\22\33\1\34"+
    "\1\33\3\6\10\33\16\6\1\53\2\6\1\54\2\33"+
    "\3\6\10\33\1\34\1\33\3\6\10\33\12\6\1\55"+
    "\7\6\2\33\3\6\10\33\1\34\1\33\3\6\10\33"+
    "\20\6\1\56\1\6\2\33\2\6\1\57\6\33\1\27"+
    "\2\0\4\27\1\0\2\27\1\32\41\27\1\0\3\30"+
    "\3\0\1\30\3\0\1\30\40\0\1\27\2\30\1\31"+
    "\3\27\1\30\2\27\1\32\1\31\41\27\1\60\52\27"+
    "\1\0\1\61\52\0\2\35\1\34\51\35\2\36\1\62"+
    "\6\36\1\63\42\36\2\33\1\34\15\33\1\64\35\33"+
    "\1\34\14\33\1\65\36\33\1\34\33\33\1\66\17\33"+
    "\1\34\16\33\1\67\34\33\1\34\17\33\1\70\33\33"+
    "\1\34\16\33\1\71\34\33\1\34\25\33\1\72\6\33"+
    "\1\73\16\33\1\34\23\33\1\74\27\33\1\34\23\33"+
    "\1\75\27\33\1\34\1\33\3\6\10\33\4\6\1\76"+
    "\15\6\2\33\3\6\10\33\1\34\1\33\3\6\10\33"+
    "\3\6\1\77\16\6\2\33\3\6\10\33\1\34\1\33"+
    "\3\6\10\33\1\6\1\100\20\6\2\33\3\6\10\33"+
    "\1\34\1\33\3\6\10\33\17\6\1\101\2\6\2\33"+
    "\3\6\10\33\1\34\1\33\3\6\10\33\12\6\1\102"+
    "\7\6\2\33\3\6\6\33\1\27\1\0\5\27\1\0"+
    "\2\27\1\32\41\27\7\0\1\103\44\0\1\104\1\105"+
    "\7\104\1\106\42\104\2\36\1\62\5\36\1\107\1\63"+
    "\42\36\2\33\1\34\16\33\1\110\34\33\1\34\14\33"+
    "\1\111\36\33\1\34\16\33\1\112\34\33\1\34\14\33"+
    "\1\113\36\33\1\34\25\33\1\114\25\33\1\34\20\33"+
    "\1\115\32\33\1\34\20\33\1\116\32\33\1\34\14\33"+
    "\1\117\36\33\1\34\16\33\1\120\34\33\1\34\14\33"+
    "\1\121\36\33\1\34\1\33\3\6\10\33\13\6\1\122"+
    "\6\6\2\33\3\6\10\33\1\34\1\33\3\6\10\33"+
    "\15\6\1\123\4\6\2\33\3\6\10\33\1\34\1\33"+
    "\3\6\10\33\17\6\1\124\2\6\2\33\3\6\6\33"+
    "\54\0\11\104\1\106\51\104\1\125\1\104\1\106\52\104"+
    "\1\126\1\106\42\104\2\33\1\34\17\33\1\127\33\33"+
    "\1\34\23\33\1\130\27\33\1\34\31\33\1\131\21\33"+
    "\1\34\21\33\1\132\31\33\1\34\14\33\1\133\7\33"+
    "\1\134\26\33\1\34\32\33\1\135\20\33\1\34\15\33"+
    "\1\136\35\33\1\34\30\33\1\137\22\33\1\34\15\33"+
    "\1\140\35\33\1\34\1\33\3\6\10\33\22\6\2\33"+
    "\1\6\1\141\1\6\10\33\1\34\1\33\3\6\4\33"+
    "\1\142\3\33\22\6\2\33\3\6\10\33\1\34\17\33"+
    "\1\143\33\33\1\34\17\33\1\144\33\33\1\34\33\33"+
    "\1\145\17\33\1\34\16\33\1\146\34\33\1\34\15\33"+
    "\1\147\35\33\1\34\26\33\1\150\24\33\1\34\31\33"+
    "\1\151\21\33\1\34\35\33\1\152\15\33\1\34\23\33"+
    "\1\153\27\33\1\34\16\33\1\154\34\33\1\34\1\33"+
    "\3\6\4\33\1\155\3\33\22\6\2\33\3\6\10\33"+
    "\1\34\17\33\1\156\33\33\1\34\22\33\1\157\30\33"+
    "\1\34\16\33\1\160\34\33\1\34\15\33\1\161\35\33"+
    "\1\34\33\33\1\162\17\33\1\34\30\33\1\163\22\33"+
    "\1\34\31\33\1\164\21\33\1\34\31\33\1\165\21\33"+
    "\1\34\23\33\1\166\27\33\1\34\17\33\1\167\33\33"+
    "\1\34\23\33\1\170\27\33\1\34\23\33\1\171\27\33"+
    "\1\34\23\33\1\172\27\33\1\34\17\33\1\173\31\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\27\1\3\0\1\1\1\0\3\1\11\0\6\1"+
    "\15\0\5\1\1\11\3\0\1\1\5\0\1\1\4\0"+
    "\5\1\12\0\3\1\1\0\1\1\7\0\2\1\3\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return FSM_FILE_KEYWORD;
          }
        case 39: break;
        case 36: 
          { return INCLUDE_KEYWORD;
          }
        case 40: break;
        case 37: 
          { return DECLARE_KEYWORD;
          }
        case 41: break;
        case 10: 
          { return GUARD_CLOSE;
          }
        case 42: break;
        case 13: 
          { return SEMICOLON;
          }
        case 43: break;
        case 30: 
          { return ENTRY_KEYWORD;
          }
        case 44: break;
        case 15: 
          { yybegin(YYINITIAL); return RAW_CODE;
          }
        case 45: break;
        case 9: 
          { return GUARD_OPEN;
          }
        case 46: break;
        case 18: 
          { return MAP_SECTION_BOUND;
          }
        case 47: break;
        case 5: 
          { return BRACE_OPEN;
          }
        case 48: break;
        case 28: 
          { return CLASS_KEYWORD;
          }
        case 49: break;
        case 21: 
          { return POP_KEYWORD;
          }
        case 50: break;
        case 19: 
          { yybegin(RAW_CODE_WAITING); return VERBATIM_OPEN;
          }
        case 51: break;
        case 7: 
          { return BRACKET_OPEN;
          }
        case 52: break;
        case 29: 
          { return START_KEYWORD;
          }
        case 53: break;
        case 14: 
          { return ASSIGN_OP;
          }
        case 54: break;
        case 12: 
          { return COMMA;
          }
        case 55: break;
        case 32: 
          { return IMPORT_KEYWORD;
          }
        case 56: break;
        case 4: 
          { return SLASH_SIGN;
          }
        case 57: break;
        case 33: 
          { return HEADER_KEYWORD;
          }
        case 58: break;
        case 11: 
          { return COLON;
          }
        case 59: break;
        case 3: 
          { return WORD;
          }
        case 60: break;
        case 24: 
          { return BLOCK_COMMENT;
          }
        case 61: break;
        case 25: 
          { return MAP_KEYWORD;
          }
        case 62: break;
        case 38: 
          { return FSM_CLASS_KEYWORD;
          }
        case 63: break;
        case 20: 
          { return VERBATIM_CLOSE;
          }
        case 64: break;
        case 26: 
          { return PUSH_KEYWORD;
          }
        case 65: break;
        case 17: 
          { return LINE_COMMENT;
          }
        case 66: break;
        case 34: 
          { return PACKAGE_KEYWORD;
          }
        case 67: break;
        case 27: 
          { return EXIT_KEYWORD;
          }
        case 68: break;
        case 23: 
          { return RAW_CODE_LINE;
          }
        case 69: break;
        case 22: 
          { return NIL_KEYWORD;
          }
        case 70: break;
        case 6: 
          { return BRACE_CLOSE;
          }
        case 71: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 72: break;
        case 16: 
          { yybegin(RAW_CODE_WAITING); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 73: break;
        case 8: 
          { return BRACKET_CLOSE;
          }
        case 74: break;
        case 31: 
          { return ACCESS_KEYWORD;
          }
        case 75: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 76: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
