/* The following code was generated by JFlex 1.4.3 on 22.03.16 7:38 */

package com.smcplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;
import java.util.regex.Matcher;

import static com.smcplugin.psi.SmcTypes.*;
import static com.smcplugin.util.SmcStringUtils.JAVA_LITERAL_PATTERN;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22.03.16 7:38 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/grammar/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_FOR_NEXT_STATE_NAME = 50;
  public static final int WAITING_FOR_START_STATE_NAME = 24;
  public static final int INSIDE_GUARD_BRACKET = 48;
  public static final int WAITING_FOR_HEADER = 16;
  public static final int WAITING_FOR_FSM_FILE = 12;
  public static final int WAITING_FOR_ACCESS = 14;
  public static final int WAITING_FOR_ACTIONS = 52;
  public static final int WAITING_FOR_INCLUDE = 20;
  public static final int WAITING_FOR_PUSH_STATE_NAME = 60;
  public static final int IN_BLOCK_COMMENT = 54;
  public static final int WAITING_FOR_ARGUMENTS = 30;
  public static final int WAITING_FOR_GUARD_RAW_CODE = 46;
  public static final int WAITING_FOR_ENTRY_EXIT_ACTIONS = 36;
  public static final int WAITING_FOR_MAP = 26;
  public static final int WAITING_FOR_CONTEXT_CLASS = 6;
  public static final int WAITING_FOR_PACKAGE_STATEMENT = 4;
  public static final int WAITING_FOR_IMPORT_CLASS = 8;
  public static final int WAITING_FOR_PUSH = 58;
  public static final int WAITING_FOR_START = 22;
  public static final int WAITING_FOR_STATE = 28;
  public static final int WAITING_FOR_DECLARE = 18;
  public static final int WAITING_FOR_STATE_ENTRY_EXIT = 32;
  public static final int WAITING_FOR_TRANSITIONS = 38;
  public static final int WAITING_FOR_PROXY_STATE = 64;
  public static final int WAITING_FOR_PARAMETER_NAME = 44;
  public static final int WAITING_FOR_POP = 56;
  public static final int WAITING_FOR_STATE_EXIT = 34;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_PARAMETERS = 40;
  public static final int WAITING_FOR_FSM_CLASS = 10;
  public static final int WAITING_FOR_VERBATIM_CODE = 2;
  public static final int WAITING_FOR_PARAMETER_TYPE = 42;
  public static final int WAITING_FOR_PUSH_MAP_NAME = 62;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 17, 17, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\7"+
    "\2\0\1\32\1\0\1\0\1\43\1\44\1\30\1\0\1\45\1\0"+
    "\1\6\1\31\10\12\2\12\1\36\1\46\5\0\4\5\1\37\25\5"+
    "\1\47\1\10\1\4\1\0\1\12\1\0\1\27\1\15\1\20\1\25"+
    "\1\24\1\11\1\52\1\50\1\17\1\5\1\51\1\16\1\53\1\40"+
    "\1\22\1\13\1\5\1\21\1\35\1\23\1\14\1\26\1\5\1\42"+
    "\1\41\1\5\1\33\1\0\1\34\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\24\0\1\2\1\3\2\0\1\4\5\0"+
    "\1\5\1\6\2\5\1\1\1\5\1\7\1\10\1\11"+
    "\1\12\1\13\3\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\5\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\5\1\34\1\35\1\5\1\36"+
    "\1\37\1\5\1\40\1\37\1\41\1\42\1\5\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\2\1\65\1\66\1\67\1\3\1\70\1\71"+
    "\1\72\2\73\1\74\1\73\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\4\1\5\1\4\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\5\1\112\1\5\1\113"+
    "\1\114\2\115\1\116\1\117\1\5\1\120\1\121\1\122"+
    "\1\123\6\0\1\124\4\0\1\125\1\126\1\0\1\14"+
    "\2\0\1\127\1\130\1\131\2\37\1\0\1\132\3\0"+
    "\3\73\1\0\1\133\1\134\4\0\1\115\1\135\12\0"+
    "\1\14\3\0\2\37\1\132\1\0\1\73\1\136\1\137"+
    "\1\0\1\140\1\141\1\142\11\0\1\143\1\14\3\0"+
    "\1\37\1\144\1\0\1\145\1\146\12\0\1\14\3\0"+
    "\1\147\6\0\1\150\2\0\1\151\1\0\1\152\1\153"+
    "\2\0\1\154\4\0\1\155\1\0\1\156\1\157\1\0"+
    "\1\160\1\0\1\161\1\162\1\163\1\0\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554"+
    "\0\u02ec\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688"+
    "\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u02ec\0\u0764\0\u0790\0\u07bc"+
    "\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u02ec\0\u0b84\0\u0bb0"+
    "\0\u0bdc\0\u0c08\0\u02ec\0\u02ec\0\u0c34\0\u02ec\0\u02ec\0\u0c60"+
    "\0\u0c8c\0\u02ec\0\u02ec\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u02ec"+
    "\0\u02ec\0\u0d68\0\u0d94\0\u02ec\0\u0dc0\0\u0dec\0\u02ec\0\u02ec"+
    "\0\u0e18\0\u0e44\0\u02ec\0\u0e70\0\u0e9c\0\u0ec8\0\u02ec\0\u0ef4"+
    "\0\u02ec\0\u02ec\0\u0f20\0\u0f4c\0\u02ec\0\u02ec\0\u0f78\0\u0fa4"+
    "\0\u0fd0\0\u0ffc\0\u1028\0\u02ec\0\u02ec\0\u02ec\0\u02ec\0\u1054"+
    "\0\u1080\0\u05ac\0\u10ac\0\u02ec\0\u10d8\0\u1104\0\u1130\0\u115c"+
    "\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u02ec\0\u1238\0\u1264\0\u1290"+
    "\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u02ec\0\u136c\0\u1398\0\u13c4"+
    "\0\u13f0\0\u0604\0\u02ec\0\u141c\0\u1448\0\u1474\0\u14a0\0\u02ec"+
    "\0\u02ec\0\u02ec\0\u14cc\0\u14f8\0\u0c08\0\u02ec\0\u1524\0\u1550"+
    "\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u02ec\0\u162c\0\u1658"+
    "\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u02ec\0\u1734\0\u1760\0\u178c"+
    "\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec"+
    "\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8\0\u0c08\0\u19f4\0\u1a20"+
    "\0\u0e9c\0\u0e9c\0\u1a4c\0\u02ec\0\u02ec\0\u1104\0\u1a78\0\u1aa4"+
    "\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8\0\u02ec"+
    "\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u0b2c\0\u1ce0\0\u0e9c"+
    "\0\u02ec\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14"+
    "\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u0b2c"+
    "\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u02ec\0\u207c"+
    "\0\u20a8\0\u02ec\0\u20d4\0\u0738\0\u02ec\0\u2100\0\u212c\0\u02ec"+
    "\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u02ec\0\u2208\0\u02ec\0\u02ec"+
    "\0\u2234\0\u02ec\0\u2260\0\u02ec\0\u02ec\0\u02ec\0\u228c\0\u02ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\41\3\42\25\41\1\43\1\44\21\41\32\45\1\46"+
    "\21\45\1\41\3\47\1\41\1\50\3\41\1\50\1\41"+
    "\15\50\1\41\1\43\3\41\1\50\1\41\4\50\5\41"+
    "\4\50\1\41\3\51\1\41\1\52\3\41\1\52\1\41"+
    "\15\52\1\41\1\43\3\41\1\52\1\41\4\52\5\41"+
    "\4\52\1\41\3\53\1\41\1\54\3\41\1\54\1\41"+
    "\15\54\1\55\1\43\3\41\1\56\1\41\4\54\5\41"+
    "\4\54\1\41\3\57\1\41\1\60\3\41\1\60\1\41"+
    "\15\60\1\41\1\43\3\41\1\60\1\41\4\60\5\41"+
    "\4\60\1\41\3\61\1\41\1\62\3\41\1\62\1\41"+
    "\15\62\1\41\1\43\3\41\1\62\1\41\4\62\5\41"+
    "\4\62\1\41\3\63\7\41\1\64\15\41\1\43\23\41"+
    "\3\65\1\41\1\66\3\41\1\66\1\41\15\66\1\41"+
    "\1\43\3\41\1\66\1\41\4\66\5\41\4\66\1\41"+
    "\3\67\1\41\1\70\3\41\1\70\1\41\15\70\1\41"+
    "\1\43\3\41\1\70\1\41\4\70\5\41\4\70\1\41"+
    "\3\71\1\41\1\72\3\41\1\72\1\41\15\72\1\41"+
    "\1\43\3\41\1\72\1\41\4\72\5\41\4\72\1\41"+
    "\3\73\1\41\1\74\3\41\1\74\1\41\15\74\1\41"+
    "\1\43\3\41\1\74\1\41\4\74\5\41\4\74\1\41"+
    "\3\75\1\41\1\76\3\41\1\76\1\41\15\76\1\41"+
    "\1\43\3\41\1\76\1\77\4\76\5\41\4\76\1\41"+
    "\3\100\1\41\1\101\3\41\1\101\1\41\15\101\1\41"+
    "\1\43\1\102\2\41\1\101\1\41\4\101\5\41\4\101"+
    "\1\41\3\103\1\41\1\104\3\41\1\104\1\41\15\104"+
    "\1\41\1\43\1\105\1\106\1\41\1\104\1\41\1\107"+
    "\3\104\5\41\4\104\1\41\3\110\1\41\1\111\1\41"+
    "\1\112\1\41\1\111\1\41\15\111\1\41\1\43\3\41"+
    "\1\111\1\41\4\111\1\41\1\113\1\114\2\41\4\111"+
    "\1\41\3\115\25\41\1\43\1\41\1\116\1\117\17\41"+
    "\54\0\1\41\3\120\1\41\1\121\3\41\1\121\1\41"+
    "\15\121\1\41\1\43\2\41\1\117\1\121\1\41\4\121"+
    "\1\122\2\41\1\123\1\41\4\121\1\41\3\124\1\41"+
    "\1\125\3\41\1\125\1\41\15\125\1\41\1\43\2\41"+
    "\1\117\1\125\1\41\4\125\5\41\4\125\1\41\3\126"+
    "\1\41\1\127\3\41\1\127\1\41\15\127\1\41\1\43"+
    "\3\41\1\127\1\41\4\127\1\41\1\130\1\131\2\41"+
    "\4\127\1\41\3\132\1\41\1\133\3\41\1\133\1\41"+
    "\15\133\1\41\1\43\3\41\1\133\1\134\4\133\5\41"+
    "\4\133\1\135\3\136\1\137\42\135\1\140\4\135\1\141"+
    "\3\142\1\143\42\141\1\140\4\141\1\41\3\144\1\137"+
    "\1\145\3\41\1\145\1\41\1\146\14\145\1\41\1\43"+
    "\1\41\1\147\1\117\1\145\1\41\1\145\1\150\2\145"+
    "\1\151\3\41\1\152\4\145\1\41\3\153\1\41\1\154"+
    "\3\41\1\154\1\41\15\154\1\41\1\43\2\41\1\155"+
    "\1\154\1\41\4\154\1\122\2\41\1\156\1\41\4\154"+
    "\30\157\1\160\1\161\22\157\1\41\3\162\1\41\1\163"+
    "\3\41\1\163\1\41\15\163\1\41\1\43\1\41\1\164"+
    "\1\41\1\163\1\41\4\163\1\165\1\166\1\167\2\41"+
    "\4\163\1\41\3\170\7\41\1\171\15\41\1\172\6\41"+
    "\1\173\2\41\1\174\11\41\3\175\1\41\1\176\3\41"+
    "\1\176\1\41\15\176\1\41\1\43\3\41\1\176\1\41"+
    "\1\176\1\177\2\176\1\41\1\130\3\41\4\176\1\41"+
    "\3\200\1\41\1\201\3\41\1\201\1\41\15\201\1\41"+
    "\1\43\3\41\1\201\1\202\4\201\5\41\4\201\1\41"+
    "\3\203\1\41\1\204\3\41\1\204\1\41\15\204\1\41"+
    "\1\43\3\41\1\204\1\41\4\204\5\41\4\204\1\0"+
    "\3\42\100\0\1\205\1\206\33\0\1\207\1\0\1\210"+
    "\3\0\1\211\1\212\4\0\1\213\1\0\1\214\3\0"+
    "\1\215\1\0\1\216\12\0\1\217\2\0\1\220\32\45"+
    "\1\221\53\45\1\221\1\222\1\223\17\45\1\0\3\47"+
    "\55\0\2\50\2\0\17\50\5\0\1\50\1\0\4\50"+
    "\5\0\4\50\1\0\3\51\55\0\2\52\2\0\17\52"+
    "\5\0\1\52\1\0\4\52\5\0\4\52\1\0\3\53"+
    "\55\0\1\54\1\224\2\0\17\54\5\0\1\54\1\0"+
    "\4\54\5\0\4\54\5\0\1\54\1\224\2\0\12\54"+
    "\1\225\4\54\5\0\1\54\1\0\4\54\5\0\4\54"+
    "\1\0\3\57\55\0\2\60\2\0\17\60\5\0\1\60"+
    "\1\0\4\60\5\0\4\60\1\0\3\61\55\0\2\62"+
    "\2\0\17\62\5\0\1\62\1\0\4\62\5\0\4\62"+
    "\1\0\3\63\64\0\1\226\4\0\1\227\33\0\3\65"+
    "\55\0\2\66\2\0\17\66\5\0\1\66\1\0\4\66"+
    "\5\0\4\66\1\0\3\67\55\0\2\70\2\0\17\70"+
    "\5\0\1\70\1\0\4\70\5\0\4\70\1\0\3\71"+
    "\55\0\2\72\2\0\17\72\5\0\1\72\1\0\4\72"+
    "\5\0\4\72\1\0\3\73\55\0\2\74\2\0\17\74"+
    "\5\0\1\74\1\0\4\74\5\0\4\74\1\0\3\75"+
    "\55\0\2\76\2\0\17\76\5\0\1\76\1\0\4\76"+
    "\5\0\4\76\36\0\1\230\16\0\3\100\55\0\2\101"+
    "\2\0\17\101\5\0\1\101\1\0\4\101\5\0\4\101"+
    "\32\0\1\231\22\0\3\103\55\0\2\104\2\0\17\104"+
    "\5\0\1\104\1\0\4\104\5\0\4\104\32\0\1\232"+
    "\26\0\2\104\2\0\17\104\5\0\1\104\1\0\1\104"+
    "\1\233\1\104\1\234\5\0\4\104\1\0\3\110\55\0"+
    "\2\111\2\0\17\111\5\0\1\111\1\0\4\111\5\0"+
    "\4\111\1\235\2\0\4\235\1\236\1\237\43\235\1\0"+
    "\3\115\51\0\3\120\55\0\2\121\2\0\17\121\5\0"+
    "\1\121\1\0\4\121\5\0\4\121\1\0\3\124\55\0"+
    "\2\125\2\0\17\125\5\0\1\125\1\0\4\125\5\0"+
    "\4\125\1\0\3\126\55\0\2\127\2\0\17\127\5\0"+
    "\1\127\1\0\4\127\5\0\4\127\1\0\3\132\55\0"+
    "\2\133\2\0\17\133\5\0\1\133\1\0\4\133\5\0"+
    "\4\133\4\135\1\0\42\135\1\0\5\135\3\136\1\0"+
    "\42\135\1\0\4\135\4\141\1\0\42\141\1\0\5\141"+
    "\3\142\1\0\42\141\1\0\4\141\1\0\3\144\51\0"+
    "\3\240\1\0\2\145\2\0\17\145\1\0\1\241\3\0"+
    "\1\145\1\0\4\145\5\0\4\145\1\0\3\240\1\0"+
    "\2\145\2\0\3\145\1\242\5\145\1\243\5\145\1\0"+
    "\1\241\3\0\1\145\1\0\4\145\5\0\4\145\1\0"+
    "\3\240\1\0\2\145\2\0\6\145\1\244\10\145\1\0"+
    "\1\241\3\0\1\145\1\0\4\145\5\0\4\145\1\0"+
    "\3\153\55\0\2\154\2\0\17\154\5\0\1\154\1\0"+
    "\4\154\5\0\4\154\30\157\1\245\53\157\1\245\1\246"+
    "\52\157\1\247\23\157\1\0\3\162\55\0\2\163\2\0"+
    "\17\163\5\0\1\163\1\0\4\163\5\0\4\163\1\0"+
    "\3\170\64\0\1\250\56\0\1\251\35\0\3\175\51\0"+
    "\3\252\1\0\2\176\2\0\17\176\5\0\1\176\1\253"+
    "\4\176\5\0\4\176\1\0\3\252\1\0\2\176\2\0"+
    "\6\176\1\254\10\176\5\0\1\176\1\253\4\176\5\0"+
    "\4\176\1\0\3\200\55\0\2\201\2\0\17\201\5\0"+
    "\1\201\1\0\4\201\5\0\4\201\36\0\1\255\16\0"+
    "\3\203\55\0\2\204\2\0\17\204\5\0\1\204\1\0"+
    "\4\204\5\0\4\204\2\206\1\0\51\206\35\0\1\256"+
    "\45\0\1\257\64\0\1\260\12\0\1\261\16\0\1\262"+
    "\61\0\1\263\47\0\1\264\56\0\1\265\54\0\1\266"+
    "\56\0\1\267\24\0\32\45\1\221\1\45\1\0\17\45"+
    "\5\0\1\54\3\0\1\54\1\0\15\54\1\55\4\0"+
    "\1\54\1\0\4\54\5\0\4\54\5\0\1\54\1\224"+
    "\2\0\16\54\1\270\5\0\1\54\1\0\4\54\5\0"+
    "\4\54\15\0\1\271\55\0\1\272\2\0\1\273\36\0"+
    "\2\104\2\0\12\104\1\274\4\104\5\0\1\104\1\0"+
    "\4\104\5\0\4\104\5\0\2\104\2\0\6\104\1\275"+
    "\10\104\5\0\1\104\1\0\4\104\5\0\4\104\1\235"+
    "\2\0\4\235\1\276\1\237\43\235\1\0\3\240\25\0"+
    "\1\241\23\0\3\241\7\0\1\277\41\0\3\240\1\0"+
    "\2\145\2\0\17\145\1\0\1\241\3\0\1\300\1\0"+
    "\4\145\5\0\4\145\1\0\3\240\1\0\2\145\2\0"+
    "\2\145\1\301\14\145\1\0\1\241\3\0\1\145\1\0"+
    "\4\145\5\0\4\145\1\0\3\240\1\0\2\145\2\0"+
    "\5\145\1\302\11\145\1\0\1\241\3\0\1\145\1\0"+
    "\4\145\5\0\4\145\30\157\1\245\1\0\22\157\35\0"+
    "\1\303\34\0\1\304\36\0\3\252\32\0\1\253\53\0"+
    "\1\305\16\0\3\252\1\0\2\176\2\0\5\176\1\306"+
    "\11\176\5\0\1\176\1\253\4\176\5\0\4\176\53\0"+
    "\1\307\20\0\1\310\53\0\1\311\46\0\1\312\67\0"+
    "\1\313\44\0\1\314\53\0\1\315\62\0\1\316\53\0"+
    "\1\317\37\0\1\320\45\0\1\54\1\224\2\0\12\54"+
    "\1\321\4\54\5\0\1\54\1\0\4\54\5\0\4\54"+
    "\16\0\1\322\63\0\1\323\50\0\1\324\35\0\2\104"+
    "\2\0\10\104\1\325\6\104\5\0\1\104\1\0\4\104"+
    "\5\0\4\104\5\0\2\104\2\0\12\104\1\326\4\104"+
    "\5\0\1\104\1\0\4\104\5\0\4\104\14\0\1\327"+
    "\40\0\3\240\1\0\2\145\2\0\17\145\1\0\1\241"+
    "\3\0\1\145\1\0\4\145\5\0\1\330\3\145\50\0"+
    "\1\331\14\0\1\332\6\0\1\333\104\0\1\334\20\0"+
    "\1\335\57\0\1\336\66\0\1\337\34\0\1\340\61\0"+
    "\1\341\50\0\1\342\57\0\1\343\33\0\1\54\1\224"+
    "\2\0\6\54\1\344\10\54\5\0\1\54\1\0\4\54"+
    "\5\0\4\54\17\0\1\345\63\0\1\346\50\0\1\347"+
    "\34\0\2\104\2\0\17\104\5\0\1\104\1\0\2\104"+
    "\1\350\1\104\5\0\4\104\35\0\1\351\35\0\1\352"+
    "\52\0\1\353\64\0\1\354\40\0\1\355\60\0\1\356"+
    "\67\0\1\357\45\0\1\360\61\0\1\361\41\0\1\362"+
    "\54\0\1\363\34\0\1\54\1\224\2\0\7\54\1\364"+
    "\7\54\5\0\1\54\1\0\4\54\5\0\4\54\20\0"+
    "\1\365\56\0\1\366\50\0\1\367\103\0\1\370\21\0"+
    "\1\371\64\0\1\372\76\0\1\373\26\0\1\374\51\0"+
    "\1\375\51\0\1\376\67\0\1\377\37\0\1\u0100\56\0"+
    "\1\365\52\0\1\u0101\54\0\1\u0102\64\0\1\u0103\42\0"+
    "\1\u0104\53\0\1\u0105\53\0\1\u0106\53\0\1\u0107\64\0"+
    "\1\u0108\43\0\1\365\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8888];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\17\0\1\10\4\0\2\1\2\0\1\1"+
    "\5\0\1\11\13\1\1\11\30\1\1\11\4\1\2\11"+
    "\1\1\2\11\2\1\2\11\4\1\2\11\2\1\1\11"+
    "\2\1\2\11\2\1\1\11\3\1\1\11\1\1\2\11"+
    "\2\1\2\11\5\1\4\11\4\1\1\11\10\1\1\11"+
    "\1\1\6\0\1\11\4\0\1\1\1\11\1\0\1\1"+
    "\2\0\3\11\2\1\1\0\1\11\3\0\3\1\1\0"+
    "\1\11\1\1\4\0\1\1\1\11\12\0\1\1\3\0"+
    "\3\1\1\0\3\1\1\0\2\11\1\1\11\0\1\11"+
    "\1\1\3\0\2\1\1\0\1\1\1\11\12\0\1\1"+
    "\3\0\1\1\6\0\1\11\2\0\1\11\1\0\1\1"+
    "\1\11\2\0\1\11\4\0\1\11\1\0\2\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }
  private Stack<Integer> stack = new Stack<Integer>();
  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }

  public IElementType validateJavaString(CharSequence match) {
    Matcher matcher = JAVA_LITERAL_PATTERN.matcher(match);
    return matcher.matches()? STRING_LITERAL: com.intellij.psi.TokenType.BAD_CHARACTER;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 112: 
          { yybegin(WAITING_FOR_FSM_FILE); return FSM_FILE_KEYWORD;
          }
        case 117: break;
        case 60: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACE_OPEN;
          }
        case 118: break;
        case 78: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 119: break;
        case 106: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return STATIC_JAVA_KEYWORD;
          }
        case 120: break;
        case 111: 
          { yybegin(WAITING_FOR_HEADER); return HEADER_KEYWORD;
          }
        case 121: break;
        case 41: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return ACTION_NAME;
          }
        case 122: break;
        case 105: 
          { yybegin(WAITING_FOR_START); return START_KEYWORD;
          }
        case 123: break;
        case 82: 
          { yypushState(IN_BLOCK_COMMENT); return BLOCK_COMMENT_OPEN;
          }
        case 124: break;
        case 18: 
          { yybegin(WAITING_FOR_HEADER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 125: break;
        case 70: 
          { yybegin(WAITING_FOR_POP); return PARENTHESES_OPEN;
          }
        case 126: break;
        case 109: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return IMPORT_KEYWORD;
          }
        case 127: break;
        case 84: 
          { yybegin(WAITING_FOR_VERBATIM_CODE);  return VERBATIM_OPEN;
          }
        case 128: break;
        case 63: 
          { yybegin(WAITING_FOR_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 129: break;
        case 62: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return BRACKET_OPEN;
          }
        case 130: break;
        case 50: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 131: break;
        case 89: 
          { yybegin(YYINITIAL); return MAP_SECTION_BOUND;
          }
        case 132: break;
        case 16: 
          { yybegin(YYINITIAL); return FSM_FILE_NAME;
          }
        case 133: break;
        case 93: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return MAP_NAME_STATE_NAME_SEPARATOR;
          }
        case 134: break;
        case 99: 
          { yybegin(WAITING_FOR_MAP); return MAP_KEYWORD;
          }
        case 135: break;
        case 88: 
          { yybegin(WAITING_FOR_STATE); return MAP_SECTION_BOUND;
          }
        case 136: break;
        case 92: 
          { yypopState(); return BLOCK_COMMENT_OPEN;
          }
        case 137: break;
        case 73: 
          { yybegin(WAITING_FOR_PUSH); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 138: break;
        case 108: 
          { yybegin(WAITING_FOR_PROXY_STATE); yypushback(yylength());
          }
        case 139: break;
        case 113: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return PACKAGE_KEYWORD;
          }
        case 140: break;
        case 30: 
          { yybegin(WAITING_FOR_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 141: break;
        case 31: 
          { yybegin(WAITING_FOR_STATE); return STATE_NAME;
          }
        case 142: break;
        case 28: 
          { yybegin(WAITING_FOR_MAP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 143: break;
        case 77: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return PUSH_STATE_NAME;
          }
        case 144: break;
        case 21: 
          { yybegin(YYINITIAL); return DECLARE_STATEMENT;
          }
        case 145: break;
        case 71: 
          { yybegin(WAITING_FOR_POP); return PARENTHESES_CLOSE;
          }
        case 146: break;
        case 33: 
          { yybegin(WAITING_FOR_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 147: break;
        case 54: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return BRACKET_CLOSE;
          }
        case 148: break;
        case 6: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 149: break;
        case 11: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 150: break;
        case 37: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 151: break;
        case 23: 
          { yybegin(YYINITIAL); return INCLUDE_FILE_NAME;
          }
        case 152: break;
        case 94: 
          { yybegin(WAITING_FOR_POP); return POP_KEYWORD;
          }
        case 153: break;
        case 53: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 154: break;
        case 97: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); yypushback(yylength());
          }
        case 155: break;
        case 34: 
          { yybegin(WAITING_FOR_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 156: break;
        case 67: 
          { yybegin(WAITING_FOR_POP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 157: break;
        case 44: 
          { yybegin(WAITING_FOR_TRANSITIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 158: break;
        case 85: 
          { yybegin(YYINITIAL);  return VERBATIM_OPEN;
          }
        case 159: break;
        case 39: 
          { yybegin(WAITING_FOR_STATE); return BRACE_CLOSE;
          }
        case 160: break;
        case 36: 
          { yybegin(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 161: break;
        case 110: 
          { yybegin(WAITING_FOR_ACCESS); return ACCESS_KEYWORD;
          }
        case 162: break;
        case 102: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_KEYWORD;
          }
        case 163: break;
        case 86: 
          { yybegin(YYINITIAL);  return VERBATIM_CLOSE;
          }
        case 164: break;
        case 25: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return START_MAP_NAME;
          }
        case 165: break;
        case 1: 
          { yybegin(WAITING_FOR_VERBATIM_CODE); return VERBATIM_CODE;
          }
        case 166: break;
        case 107: 
          { yybegin(YYINITIAL); return ACCESS_LEVEL;
          }
        case 167: break;
        case 4: 
          { yybegin(IN_BLOCK_COMMENT); return BLOCK_COMMENT_CONTENT;
          }
        case 168: break;
        case 13: 
          { yybegin(WAITING_FOR_FSM_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 169: break;
        case 115: 
          { yybegin(WAITING_FOR_DECLARE); return DECLARE_KEYWORD;
          }
        case 170: break;
        case 87: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return MAP_NAME_STATE_NAME_SEPARATOR;
          }
        case 171: break;
        case 2: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return GUARD_NOT_BRACKET;
          }
        case 172: break;
        case 46: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 173: break;
        case 19: 
          { yybegin(YYINITIAL); return HEADER_FILE_NAME;
          }
        case 174: break;
        case 61: 
          { yybegin(WAITING_FOR_PARAMETER_NAME);  return PARENTHESES_OPEN;
          }
        case 175: break;
        case 66: 
          { yybegin(WAITING_FOR_ACTIONS); return SEMICOLON;
          }
        case 176: break;
        case 51: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return PARAMETER_NAME;
          }
        case 177: break;
        case 43: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return SEMICOLON;
          }
        case 178: break;
        case 38: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return BRACE_OPEN;
          }
        case 179: break;
        case 10: 
          { yybegin(YYINITIAL); return CONTEXT_CLASS_NAME;
          }
        case 180: break;
        case 7: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 181: break;
        case 9: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 182: break;
        case 75: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return PARENTHESES_OPEN;
          }
        case 183: break;
        case 32: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_OPEN;
          }
        case 184: break;
        case 96: 
          { yybegin(WAITING_FOR_PUSH); return NIL_KEYWORD;
          }
        case 185: break;
        case 49: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return COMMA;
          }
        case 186: break;
        case 52: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return COLON;
          }
        case 187: break;
        case 58: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 188: break;
        case 59: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NEXT_STATE_NAME;
          }
        case 189: break;
        case 40: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 190: break;
        case 100: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return EXIT_KEYWORD;
          }
        case 191: break;
        case 29: 
          { yybegin(WAITING_FOR_MAP); return MAP_NAME;
          }
        case 192: break;
        case 80: 
          { yybegin(WAITING_FOR_PROXY_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 193: break;
        case 83: 
          { return LINE_COMMENT;
          }
        case 194: break;
        case 14: 
          { yybegin(YYINITIAL); return FSM_CLASS_NAME;
          }
        case 195: break;
        case 101: 
          { yybegin(WAITING_FOR_PUSH); yypushback(yylength());
          }
        case 196: break;
        case 22: 
          { yybegin(WAITING_FOR_INCLUDE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 197: break;
        case 48: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return PARENTHESES_CLOSE;
          }
        case 198: break;
        case 98: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return NIL_KEYWORD;
          }
        case 199: break;
        case 24: 
          { yybegin(WAITING_FOR_START); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 200: break;
        case 8: 
          { yybegin(YYINITIAL); return PACKAGE_STATEMENT;
          }
        case 201: break;
        case 64: 
          { yybegin(WAITING_FOR_ACTIONS); return ACTION_NAME;
          }
        case 202: break;
        case 72: 
          { yypushState(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 203: break;
        case 45: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return TRANSITION_NAME;
          }
        case 204: break;
        case 12: 
          { yybegin(YYINITIAL); return IMPORT_CLASS_STATEMENT;
          }
        case 205: break;
        case 55: 
          { yypushState(INSIDE_GUARD_BRACKET); return GUARD_BRACKET_OPEN;
          }
        case 206: break;
        case 27: 
          { yybegin(YYINITIAL); return START_STATE_NAME;
          }
        case 207: break;
        case 57: 
          { yypopState(); return GUARD_BRACKET_CLOSE;
          }
        case 208: break;
        case 95: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NIL_KEYWORD;
          }
        case 209: break;
        case 79: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); return PUSH_MAP_NAME;
          }
        case 210: break;
        case 103: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return ENTRY_KEYWORD;
          }
        case 211: break;
        case 81: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_PROXY_STATE_NAME;
          }
        case 212: break;
        case 69: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); yypushback(1);
          }
        case 213: break;
        case 35: 
          { yypopState(); return PARENTHESES_CLOSE;
          }
        case 214: break;
        case 76: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 215: break;
        case 65: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_CLOSE;
          }
        case 216: break;
        case 5: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 217: break;
        case 42: 
          { yypushState(WAITING_FOR_ARGUMENTS);  return PARENTHESES_OPEN;
          }
        case 218: break;
        case 15: 
          { yybegin(WAITING_FOR_FSM_FILE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 219: break;
        case 104: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return CLASS_KEYWORD;
          }
        case 220: break;
        case 17: 
          { yybegin(WAITING_FOR_ACCESS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 221: break;
        case 114: 
          { yybegin(WAITING_FOR_INCLUDE); return INCLUDE_KEYWORD;
          }
        case 222: break;
        case 3: 
          { yybegin(INSIDE_GUARD_BRACKET); return GUARD_NOT_BRACKET;
          }
        case 223: break;
        case 116: 
          { yybegin(WAITING_FOR_FSM_CLASS); return FSM_CLASS_KEYWORD;
          }
        case 224: break;
        case 56: 
          { yybegin(INSIDE_GUARD_BRACKET); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 225: break;
        case 20: 
          { yybegin(WAITING_FOR_DECLARE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 226: break;
        case 91: 
          { yypopState(); return BLOCK_COMMENT_CLOSE;
          }
        case 227: break;
        case 26: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 228: break;
        case 47: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return PARAMETER_TYPE;
          }
        case 229: break;
        case 90: 
          { yybegin(WAITING_FOR_ARGUMENTS); return validateJavaString(yytext());
          }
        case 230: break;
        case 68: 
          { yybegin(WAITING_FOR_POP); return CALLBACK_TRANSITION_NAME;
          }
        case 231: break;
        case 74: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_PROXY_STATE_KEYWORD_SEPARATOR;
          }
        case 232: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
