/* The following code was generated by JFlex 1.4.3 on 01.03.16 10:21 */

package com.smcplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.smcplugin.util.SmcStringUtils;
import static com.smcplugin.psi.SmcTypes.*;
import static com.smcplugin.util.SmcStringUtils.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01.03.16 10:21 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/grammar/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_FOR_NEXT_STATE_NAME = 48;
  public static final int WAITING_FOR_START_STATE_NAME = 24;
  public static final int WAITING_FOR_HEADER = 16;
  public static final int WAITING_FOR_FSM_FILE = 12;
  public static final int WAITING_FOR_ACCESS = 14;
  public static final int WAITING_FOR_ACTIONS = 50;
  public static final int WAITING_FOR_INCLUDE = 20;
  public static final int WAITING_FOR_PUSH_STATE_NAME = 58;
  public static final int IN_BLOCK_COMMENT = 52;
  public static final int WAITING_FOR_ARGUMENTS = 30;
  public static final int WAITING_FOR_GUARD_RAW_CODE = 46;
  public static final int WAITING_FOR_ENTRY_EXIT_ACTIONS = 36;
  public static final int WAITING_FOR_MAP = 26;
  public static final int WAITING_FOR_CONTEXT_CLASS = 6;
  public static final int WAITING_FOR_PACKAGE_STATEMENT = 4;
  public static final int WAITING_FOR_IMPORT_CLASS = 8;
  public static final int WAITING_FOR_PUSH = 56;
  public static final int WAITING_FOR_START = 22;
  public static final int WAITING_FOR_STATE = 28;
  public static final int WAITING_FOR_DECLARE = 18;
  public static final int WAITING_FOR_STATE_ENTRY_EXIT = 32;
  public static final int WAITING_FOR_TRANSITIONS = 38;
  public static final int WAITING_FOR_PARAMETER_NAME = 44;
  public static final int WAITING_FOR_POP = 54;
  public static final int WAITING_FOR_STATE_EXIT = 34;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_PARAMETERS = 40;
  public static final int WAITING_FOR_FSM_CLASS = 10;
  public static final int WAITING_FOR_VERBATIM_CODE = 2;
  public static final int WAITING_FOR_PARAMETER_TYPE = 42;
  public static final int WAITING_FOR_PUSH_MAP_NAME = 60;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 17, 17, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\7"+
    "\2\0\1\27\2\0\1\40\1\41\1\25\1\0\1\42\1\0\1\6"+
    "\1\26\12\6\1\33\1\43\5\0\4\5\1\34\25\5\1\44\1\0"+
    "\1\4\1\0\1\6\1\0\1\24\1\12\1\15\1\22\1\21\1\50"+
    "\1\47\1\45\1\14\1\5\1\46\1\13\1\51\1\35\1\17\1\10"+
    "\1\5\1\16\1\32\1\20\1\11\1\23\1\5\1\37\1\36\1\5"+
    "\1\30\1\0\1\31\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\24\0\1\2\2\0\1\3\4\0\1\4"+
    "\1\5\2\4\1\1\1\4\1\6\1\7\1\10\1\11"+
    "\1\12\2\13\1\14\1\15\1\16\1\17\1\20\1\4"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\4\1\33\1\34\1\4\1\35\1\36"+
    "\1\4\1\37\1\36\1\40\1\41\1\4\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\2\1\64\1\65\1\2\1\66\1\65\2\67\1\70"+
    "\1\67\1\71\1\72\1\73\1\74\1\75\1\76\1\3"+
    "\1\4\1\3\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\4\1\106\1\4\1\107\1\110\2\111\1\112"+
    "\1\113\1\4\1\114\1\115\5\0\1\116\5\0\1\117"+
    "\1\120\3\13\2\0\2\32\1\121\1\122\1\123\2\36"+
    "\1\0\1\124\1\0\1\115\1\125\3\67\1\0\1\126"+
    "\1\127\4\0\1\111\1\130\12\0\1\13\3\0\2\36"+
    "\1\115\1\67\1\131\1\132\1\0\1\133\1\134\1\135"+
    "\11\0\1\136\1\13\3\0\1\36\1\137\2\140\12\0"+
    "\1\13\3\0\1\141\3\0\1\142\2\0\1\143\3\0"+
    "\1\144\1\145\4\0\1\146\1\0\1\147\1\150\3\0"+
    "\1\151\1\152\1\153\1\0\1\154\1\0\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u02ca\0\u04ec"+
    "\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c"+
    "\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c"+
    "\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc"+
    "\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u0a56\0\u0a80\0\u02ca\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u02ca"+
    "\0\u02ca\0\u0b52\0\u02ca\0\u02ca\0\u0b7c\0\u0ba6\0\u02ca\0\u02ca"+
    "\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u02ca\0\u02ca\0\u0c78\0\u0ca2"+
    "\0\u02ca\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u02ca\0\u0d9e"+
    "\0\u0dc8\0\u02ca\0\u0df2\0\u02ca\0\u02ca\0\u0e1c\0\u0e46\0\u02ca"+
    "\0\u02ca\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u02ca\0\u02ca"+
    "\0\u02ca\0\u02ca\0\u0f42\0\u0f6c\0\u0516\0\u0f96\0\u02ca\0\u0fc0"+
    "\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u02ca\0\u10bc\0\u10e6"+
    "\0\u1110\0\u113a\0\u1164\0\u118e\0\u02ca\0\u11b8\0\u11e2\0\u120c"+
    "\0\u1236\0\u1260\0\u056a\0\u02ca\0\u128a\0\u02ca\0\u12b4\0\u12de"+
    "\0\u1308\0\u1332\0\u02ca\0\u02ca\0\u02ca\0\u02ca\0\u135c\0\u1386"+
    "\0\u0b28\0\u0b28\0\u0d20\0\u13b0\0\u02ca\0\u13da\0\u1404\0\u142e"+
    "\0\u1458\0\u02ca\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a"+
    "\0\u02ca\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650"+
    "\0\u167a\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0"+
    "\0\u17ca\0\u17f4\0\u181e\0\u0d9e\0\u0d9e\0\u1848\0\u02ca\0\u02ca"+
    "\0\u0fea\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e"+
    "\0\u1998\0\u19c2\0\u02ca\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94"+
    "\0\u0a56\0\u0d9e\0\u02ca\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66"+
    "\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6"+
    "\0\u1ce0\0\u0a56\0\u1d0a\0\u1d34\0\u1d5e\0\u02ca\0\u1d88\0\u1db2"+
    "\0\u02ca\0\u1ddc\0\u1e06\0\u1e30\0\u0690\0\u02ca\0\u1e5a\0\u1e84"+
    "\0\u1eae\0\u1ed8\0\u02ca\0\u1f02\0\u02ca\0\u02ca\0\u1f2c\0\u1f56"+
    "\0\u1f80\0\u02ca\0\u02ca\0\u02ca\0\u1faa\0\u02ca\0\u1fd4\0\u02ca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\37\3\40\22\37\1\41\1\42\22\37\27\43\1\44"+
    "\22\43\1\37\3\45\1\37\1\46\2\37\15\46\1\37"+
    "\1\41\3\37\1\46\1\37\4\46\5\37\5\46\1\37"+
    "\3\47\1\37\1\50\2\37\15\50\1\37\1\41\3\37"+
    "\1\50\1\37\4\50\5\37\5\50\1\37\3\51\1\37"+
    "\1\52\2\37\15\52\1\37\1\41\3\37\1\53\1\37"+
    "\4\52\5\37\5\52\1\37\3\54\1\37\1\55\2\37"+
    "\15\55\1\37\1\41\3\37\1\55\1\37\4\55\5\37"+
    "\5\55\1\37\3\56\1\37\1\57\2\37\15\57\1\37"+
    "\1\41\3\37\1\57\1\37\4\57\5\37\5\57\1\37"+
    "\3\60\4\37\1\61\15\37\1\41\24\37\3\62\1\37"+
    "\1\63\2\37\15\63\1\37\1\41\3\37\1\63\1\37"+
    "\4\63\5\37\5\63\1\37\3\64\1\37\1\65\2\37"+
    "\15\65\1\37\1\41\3\37\1\65\1\37\4\65\5\37"+
    "\5\65\1\37\3\66\1\37\1\67\2\37\15\67\1\37"+
    "\1\41\3\37\1\67\1\37\4\67\5\37\5\67\1\37"+
    "\3\70\1\37\1\71\2\37\15\71\1\37\1\41\3\37"+
    "\1\71\1\37\4\71\5\37\5\71\1\37\3\72\1\37"+
    "\1\73\2\37\15\73\1\37\1\41\3\37\1\73\1\74"+
    "\4\73\5\37\5\73\1\37\3\75\1\37\1\76\2\37"+
    "\15\76\1\37\1\41\1\77\2\37\1\76\1\37\4\76"+
    "\5\37\5\76\1\37\3\100\1\37\1\101\2\37\15\101"+
    "\1\37\1\41\1\102\1\103\1\37\1\101\1\37\1\104"+
    "\3\101\5\37\5\101\1\37\3\105\1\37\1\106\1\37"+
    "\1\107\15\106\1\37\1\41\3\37\1\106\1\37\4\106"+
    "\1\37\1\110\1\111\2\37\5\106\1\37\3\112\22\37"+
    "\1\41\1\37\1\113\1\114\20\37\52\0\1\37\3\115"+
    "\1\37\1\116\2\37\15\116\1\37\1\41\2\37\1\114"+
    "\1\116\1\37\4\116\1\117\2\37\1\120\1\37\5\116"+
    "\1\37\3\121\1\37\1\122\2\37\15\122\1\37\1\41"+
    "\2\37\1\114\1\122\1\37\4\122\5\37\5\122\1\37"+
    "\3\123\1\37\1\124\2\37\15\124\1\37\1\41\3\37"+
    "\1\124\1\37\4\124\1\37\1\125\1\126\2\37\5\124"+
    "\1\37\3\127\1\37\1\130\2\37\15\130\1\37\1\41"+
    "\3\37\1\130\1\131\4\130\5\37\5\130\1\132\3\133"+
    "\1\134\21\132\1\135\23\132\1\37\3\136\1\137\1\140"+
    "\2\37\1\141\14\140\1\37\1\41\1\37\1\142\1\114"+
    "\1\140\1\37\1\140\1\143\2\140\1\144\3\37\1\145"+
    "\5\140\1\37\3\146\1\37\1\147\2\37\15\147\1\37"+
    "\1\41\2\37\1\150\1\147\1\37\4\147\1\117\2\37"+
    "\1\151\1\37\5\147\25\152\1\153\1\154\23\152\1\37"+
    "\3\155\1\37\1\156\2\37\15\156\1\37\1\41\1\37"+
    "\1\157\1\37\1\156\1\37\4\156\1\160\1\161\1\162"+
    "\2\37\5\156\1\37\3\163\4\37\1\164\15\37\1\165"+
    "\6\37\1\166\2\37\1\167\12\37\3\170\1\37\1\171"+
    "\2\37\15\171\1\37\1\41\3\37\1\171\1\37\1\171"+
    "\1\172\2\171\1\37\1\125\3\37\5\171\1\37\3\173"+
    "\1\37\1\174\2\37\15\174\1\37\1\41\3\37\1\174"+
    "\1\175\4\174\5\37\5\174\1\0\3\40\73\0\1\176"+
    "\1\177\33\0\1\200\3\0\1\201\1\202\4\0\1\203"+
    "\1\0\1\204\3\0\1\205\1\0\1\206\12\0\1\207"+
    "\2\0\1\210\1\211\27\43\1\212\51\43\1\212\1\213"+
    "\1\214\20\43\1\0\3\45\53\0\2\46\1\0\15\46"+
    "\5\0\1\46\1\0\4\46\5\0\5\46\1\0\3\47"+
    "\53\0\2\50\1\0\15\50\5\0\1\50\1\0\4\50"+
    "\5\0\5\50\1\0\3\51\47\0\1\215\1\216\2\0"+
    "\2\52\1\0\16\52\4\0\1\52\1\0\4\52\5\0"+
    "\5\52\1\0\1\215\1\216\2\0\2\52\1\0\10\52"+
    "\1\217\5\52\4\0\1\52\1\0\4\52\5\0\5\52"+
    "\1\0\3\54\53\0\2\55\1\0\15\55\5\0\1\55"+
    "\1\0\4\55\5\0\5\55\1\0\3\56\53\0\2\57"+
    "\1\0\15\57\5\0\1\57\1\0\4\57\5\0\5\57"+
    "\1\0\3\60\57\0\1\220\4\0\1\221\34\0\3\62"+
    "\53\0\2\63\1\0\15\63\5\0\1\63\1\0\4\63"+
    "\5\0\5\63\1\0\3\64\53\0\2\65\1\0\15\65"+
    "\5\0\1\65\1\0\4\65\5\0\5\65\1\0\3\66"+
    "\53\0\2\67\1\0\15\67\5\0\1\67\1\0\4\67"+
    "\5\0\5\67\1\0\3\70\53\0\2\71\1\0\15\71"+
    "\5\0\1\71\1\0\4\71\5\0\5\71\1\0\3\72"+
    "\47\0\1\222\1\223\2\0\2\73\1\0\15\73\5\0"+
    "\1\73\1\0\4\73\5\0\5\73\33\0\1\224\17\0"+
    "\3\75\53\0\2\76\1\0\15\76\5\0\1\76\1\0"+
    "\4\76\5\0\5\76\27\0\1\225\23\0\3\100\53\0"+
    "\2\101\1\0\15\101\5\0\1\101\1\0\4\101\5\0"+
    "\5\101\27\0\1\226\27\0\2\101\1\0\15\101\5\0"+
    "\1\101\1\0\1\101\1\227\1\101\1\230\5\0\5\101"+
    "\1\0\3\105\53\0\2\106\1\0\15\106\5\0\1\106"+
    "\1\0\4\106\5\0\5\106\2\231\1\0\4\231\1\232"+
    "\42\231\1\0\3\112\47\0\3\115\53\0\2\116\1\0"+
    "\15\116\5\0\1\116\1\0\4\116\5\0\5\116\1\0"+
    "\3\121\53\0\2\122\1\0\15\122\5\0\1\122\1\0"+
    "\4\122\5\0\5\122\1\0\3\123\53\0\2\124\1\0"+
    "\15\124\5\0\1\124\1\0\4\124\5\0\5\124\1\0"+
    "\3\127\53\0\2\130\1\0\15\130\5\0\1\130\1\0"+
    "\4\130\5\0\5\130\4\132\1\233\46\132\3\133\1\233"+
    "\46\132\2\0\1\132\1\233\51\132\1\233\21\132\1\234"+
    "\23\132\1\0\3\136\53\0\2\140\1\0\15\140\1\0"+
    "\1\235\3\0\1\140\1\0\4\140\5\0\5\140\5\0"+
    "\2\140\1\0\1\140\1\236\5\140\1\237\5\140\1\0"+
    "\1\235\3\0\1\140\1\0\4\140\5\0\5\140\5\0"+
    "\2\140\1\0\4\140\1\240\10\140\1\0\1\235\3\0"+
    "\1\140\1\0\4\140\5\0\5\140\1\0\3\146\53\0"+
    "\2\147\1\0\15\147\5\0\1\147\1\0\4\147\5\0"+
    "\5\147\25\152\1\241\51\152\1\241\1\242\50\152\1\243"+
    "\24\152\1\0\3\155\53\0\2\156\1\0\15\156\5\0"+
    "\1\156\1\0\4\156\5\0\5\156\1\0\3\163\57\0"+
    "\1\244\54\0\1\245\36\0\3\170\47\0\3\246\1\0"+
    "\2\171\1\0\15\171\5\0\1\171\1\247\4\171\5\0"+
    "\5\171\1\0\3\246\1\0\2\171\1\0\4\171\1\250"+
    "\10\171\5\0\1\171\1\247\4\171\5\0\5\171\1\0"+
    "\3\173\53\0\2\174\1\0\15\174\5\0\1\174\1\0"+
    "\4\174\5\0\5\174\33\0\1\251\16\0\2\177\1\0"+
    "\47\177\24\0\1\252\62\0\1\253\13\0\1\254\13\0"+
    "\1\255\57\0\1\256\45\0\1\257\54\0\1\260\52\0"+
    "\1\261\62\0\1\262\43\0\1\263\25\0\27\43\1\212"+
    "\1\43\1\0\20\43\2\0\1\216\50\0\1\215\1\216"+
    "\2\0\2\52\1\0\14\52\1\264\1\52\4\0\1\52"+
    "\1\0\4\52\5\0\5\52\12\0\1\265\53\0\1\266"+
    "\2\0\1\267\34\0\1\223\54\0\2\101\1\0\10\101"+
    "\1\270\4\101\5\0\1\101\1\0\4\101\5\0\5\101"+
    "\5\0\2\101\1\0\4\101\1\271\10\101\5\0\1\101"+
    "\1\0\4\101\5\0\5\101\2\234\1\132\1\234\1\272"+
    "\45\234\5\0\2\140\1\0\15\140\1\0\1\235\3\0"+
    "\1\273\1\0\4\140\5\0\5\140\5\0\2\140\1\0"+
    "\1\274\14\140\1\0\1\235\3\0\1\140\1\0\4\140"+
    "\5\0\5\140\5\0\2\140\1\0\3\140\1\275\11\140"+
    "\1\0\1\235\3\0\1\140\1\0\4\140\5\0\5\140"+
    "\25\152\1\241\1\0\23\152\32\0\1\276\32\0\1\277"+
    "\37\0\3\246\27\0\1\247\51\0\1\300\17\0\3\246"+
    "\1\0\2\171\1\0\3\171\1\301\11\171\5\0\1\171"+
    "\1\247\4\171\5\0\5\171\15\0\1\302\51\0\1\303"+
    "\44\0\1\304\65\0\1\305\42\0\1\306\51\0\1\307"+
    "\60\0\1\310\51\0\1\311\76\0\1\312\10\0\1\313"+
    "\42\0\1\215\1\216\2\0\2\52\1\0\10\52\1\314"+
    "\5\52\4\0\1\52\1\0\4\52\5\0\5\52\13\0"+
    "\1\315\61\0\1\316\46\0\1\317\36\0\2\101\1\0"+
    "\6\101\1\320\6\101\5\0\1\101\1\0\4\101\5\0"+
    "\5\101\5\0\2\101\1\0\10\101\1\321\4\101\5\0"+
    "\1\101\1\0\4\101\5\0\5\101\1\234\1\177\1\0"+
    "\1\234\1\272\45\234\5\0\2\140\1\0\15\140\1\0"+
    "\1\235\3\0\1\140\1\0\4\140\5\0\1\322\4\140"+
    "\45\0\1\323\52\0\1\324\16\0\1\325\55\0\1\326"+
    "\64\0\1\327\32\0\1\330\57\0\1\331\46\0\1\332"+
    "\55\0\1\333\44\0\1\334\32\0\1\335\2\0\1\215"+
    "\1\216\2\0\2\52\1\0\4\52\1\336\11\52\4\0"+
    "\1\52\1\0\4\52\5\0\5\52\14\0\1\337\61\0"+
    "\1\340\46\0\1\341\35\0\2\101\1\0\15\101\5\0"+
    "\1\101\1\0\2\101\1\342\1\101\5\0\5\101\24\0"+
    "\1\343\36\0\1\344\56\0\1\345\65\0\1\346\43\0"+
    "\1\347\57\0\1\350\37\0\1\351\52\0\1\352\43\0"+
    "\1\353\52\0\1\354\36\0\1\215\1\216\2\0\2\52"+
    "\1\0\5\52\1\355\10\52\4\0\1\52\1\0\4\52"+
    "\5\0\5\52\15\0\1\356\54\0\1\357\46\0\1\360"+
    "\103\0\1\361\24\0\1\362\47\0\1\363\47\0\1\364"+
    "\65\0\1\365\35\0\1\366\57\0\1\367\40\0\1\370"+
    "\57\0\1\356\50\0\1\371\52\0\1\372\51\0\1\373"+
    "\51\0\1\374\62\0\1\375\40\0\1\376\51\0\1\377"+
    "\62\0\1\u0100\41\0\1\356\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8190];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\17\0\1\10\4\0\1\1\2\0\1\1"+
    "\4\0\1\11\43\1\1\11\4\1\2\11\1\1\2\11"+
    "\2\1\2\11\4\1\2\11\2\1\1\11\5\1\1\11"+
    "\2\1\1\11\1\1\2\11\2\1\2\11\5\1\4\11"+
    "\4\1\1\11\6\1\1\11\1\1\5\0\1\11\5\0"+
    "\1\1\1\11\1\1\1\11\1\1\2\0\1\1\4\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\3\1\1\0"+
    "\1\11\1\1\4\0\1\1\1\11\12\0\1\1\3\0"+
    "\6\1\1\0\2\11\1\1\11\0\1\11\1\1\3\0"+
    "\3\1\1\11\12\0\1\1\3\0\1\1\3\0\1\11"+
    "\2\0\1\11\3\0\1\1\1\11\4\0\1\11\1\0"+
    "\2\11\3\0\3\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }
  private Stack<Integer> stack = new Stack<Integer>();
  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }

  public IElementType validateJavaString(CharSequence match) {
    Matcher matcher = JAVA_LITERAL_PATTERN.matcher(match);
    return matcher.matches()? STRING_LITERAL: com.intellij.psi.TokenType.BAD_CHARACTER;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 108: 
          { yybegin(WAITING_FOR_FSM_FILE); return FSM_FILE_KEYWORD;
          }
        case 110: break;
        case 56: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACE_OPEN;
          }
        case 111: break;
        case 74: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 112: break;
        case 100: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return STATIC_JAVA_KEYWORD;
          }
        case 113: break;
        case 104: 
          { yybegin(WAITING_FOR_HEADER); return HEADER_KEYWORD;
          }
        case 114: break;
        case 40: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return ACTION_NAME;
          }
        case 115: break;
        case 99: 
          { yybegin(WAITING_FOR_START); return START_KEYWORD;
          }
        case 116: break;
        case 76: 
          { yypushState(IN_BLOCK_COMMENT); return BLOCK_COMMENT_OPEN;
          }
        case 117: break;
        case 17: 
          { yybegin(WAITING_FOR_HEADER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 118: break;
        case 66: 
          { yybegin(WAITING_FOR_POP); return PARENTHESES_OPEN;
          }
        case 119: break;
        case 102: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return IMPORT_KEYWORD;
          }
        case 120: break;
        case 78: 
          { yybegin(WAITING_FOR_VERBATIM_CODE);  return VERBATIM_OPEN;
          }
        case 121: break;
        case 59: 
          { yybegin(WAITING_FOR_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 122: break;
        case 58: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return BRACKET_OPEN;
          }
        case 123: break;
        case 49: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 124: break;
        case 15: 
          { yybegin(YYINITIAL); return FSM_FILE_NAME;
          }
        case 125: break;
        case 88: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return MAP_NAME_STATE_NAME_SEPARATOR;
          }
        case 126: break;
        case 94: 
          { yybegin(WAITING_FOR_MAP); return MAP_KEYWORD;
          }
        case 127: break;
        case 82: 
          { yybegin(WAITING_FOR_STATE); return MAP_SECTION_BOUND;
          }
        case 128: break;
        case 2: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return GUARD_RAW_CODE;
          }
        case 129: break;
        case 87: 
          { yypopState(); return BLOCK_COMMENT_OPEN;
          }
        case 130: break;
        case 69: 
          { yybegin(WAITING_FOR_PUSH); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 131: break;
        case 85: 
          { yybegin(WAITING_FOR_PUSH); yypushback(1); return PUSH_PROXY_STATE_NAME;
          }
        case 132: break;
        case 105: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return PACKAGE_KEYWORD;
          }
        case 133: break;
        case 29: 
          { yybegin(WAITING_FOR_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 134: break;
        case 30: 
          { yybegin(WAITING_FOR_STATE); return STATE_NAME;
          }
        case 135: break;
        case 27: 
          { yybegin(WAITING_FOR_MAP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 136: break;
        case 73: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return PUSH_STATE_NAME;
          }
        case 137: break;
        case 20: 
          { yybegin(YYINITIAL); return DECLARE_STATEMENT;
          }
        case 138: break;
        case 67: 
          { yybegin(WAITING_FOR_POP); return PARENTHESES_CLOSE;
          }
        case 139: break;
        case 32: 
          { yybegin(WAITING_FOR_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 140: break;
        case 53: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return BRACKET_CLOSE;
          }
        case 141: break;
        case 5: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 142: break;
        case 10: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 143: break;
        case 36: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 144: break;
        case 22: 
          { yybegin(YYINITIAL); return INCLUDE_FILE_NAME;
          }
        case 145: break;
        case 89: 
          { yybegin(WAITING_FOR_POP); return POP_KEYWORD;
          }
        case 146: break;
        case 52: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 147: break;
        case 92: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); yypushback(yylength());
          }
        case 148: break;
        case 33: 
          { yybegin(WAITING_FOR_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 149: break;
        case 63: 
          { yybegin(WAITING_FOR_POP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 150: break;
        case 43: 
          { yybegin(WAITING_FOR_TRANSITIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 151: break;
        case 79: 
          { yybegin(YYINITIAL);  return VERBATIM_OPEN;
          }
        case 152: break;
        case 38: 
          { yybegin(WAITING_FOR_STATE); return BRACE_CLOSE;
          }
        case 153: break;
        case 35: 
          { yybegin(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 154: break;
        case 103: 
          { yybegin(WAITING_FOR_ACCESS); return ACCESS_KEYWORD;
          }
        case 155: break;
        case 96: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_KEYWORD;
          }
        case 156: break;
        case 80: 
          { yybegin(YYINITIAL);  return VERBATIM_CLOSE;
          }
        case 157: break;
        case 24: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return START_MAP_NAME;
          }
        case 158: break;
        case 1: 
          { yybegin(WAITING_FOR_VERBATIM_CODE); return VERBATIM_CODE;
          }
        case 159: break;
        case 101: 
          { yybegin(YYINITIAL); return ACCESS_LEVEL;
          }
        case 160: break;
        case 3: 
          { yybegin(IN_BLOCK_COMMENT); return BLOCK_COMMENT_CONTENT;
          }
        case 161: break;
        case 12: 
          { yybegin(WAITING_FOR_FSM_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 162: break;
        case 107: 
          { yybegin(WAITING_FOR_DECLARE); return DECLARE_KEYWORD;
          }
        case 163: break;
        case 81: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return MAP_NAME_STATE_NAME_SEPARATOR;
          }
        case 164: break;
        case 45: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 165: break;
        case 18: 
          { yybegin(YYINITIAL); return HEADER_FILE_NAME;
          }
        case 166: break;
        case 57: 
          { yybegin(WAITING_FOR_PARAMETER_NAME);  return PARENTHESES_OPEN;
          }
        case 167: break;
        case 62: 
          { yybegin(WAITING_FOR_ACTIONS); return SEMICOLON;
          }
        case 168: break;
        case 50: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return PARAMETER_NAME;
          }
        case 169: break;
        case 42: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return SEMICOLON;
          }
        case 170: break;
        case 37: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return BRACE_OPEN;
          }
        case 171: break;
        case 9: 
          { yybegin(YYINITIAL); return CONTEXT_CLASS_NAME;
          }
        case 172: break;
        case 6: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 173: break;
        case 8: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 174: break;
        case 71: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return PARENTHESES_OPEN;
          }
        case 175: break;
        case 31: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_OPEN;
          }
        case 176: break;
        case 91: 
          { yybegin(WAITING_FOR_PUSH); return NIL_KEYWORD;
          }
        case 177: break;
        case 48: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return COMMA;
          }
        case 178: break;
        case 51: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return COLON;
          }
        case 179: break;
        case 54: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 180: break;
        case 55: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NEXT_STATE_NAME;
          }
        case 181: break;
        case 39: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 182: break;
        case 95: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return EXIT_KEYWORD;
          }
        case 183: break;
        case 28: 
          { yybegin(WAITING_FOR_MAP); return MAP_NAME;
          }
        case 184: break;
        case 77: 
          { return LINE_COMMENT;
          }
        case 185: break;
        case 13: 
          { yybegin(YYINITIAL); return FSM_CLASS_NAME;
          }
        case 186: break;
        case 21: 
          { yybegin(WAITING_FOR_INCLUDE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 187: break;
        case 47: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return PARENTHESES_CLOSE;
          }
        case 188: break;
        case 93: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return NIL_KEYWORD;
          }
        case 189: break;
        case 23: 
          { yybegin(WAITING_FOR_START); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 190: break;
        case 7: 
          { yybegin(YYINITIAL); return PACKAGE_STATEMENT;
          }
        case 191: break;
        case 60: 
          { yybegin(WAITING_FOR_ACTIONS); return ACTION_NAME;
          }
        case 192: break;
        case 68: 
          { yypushState(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 193: break;
        case 44: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return TRANSITION_NAME;
          }
        case 194: break;
        case 11: 
          { yybegin(YYINITIAL); return IMPORT_CLASS_STATEMENT;
          }
        case 195: break;
        case 26: 
          { yybegin(YYINITIAL); return START_STATE_NAME;
          }
        case 196: break;
        case 90: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NIL_KEYWORD;
          }
        case 197: break;
        case 75: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); return PUSH_MAP_NAME;
          }
        case 198: break;
        case 97: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return ENTRY_KEYWORD;
          }
        case 199: break;
        case 65: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); yypushback(1);
          }
        case 200: break;
        case 34: 
          { yypopState(); return PARENTHESES_CLOSE;
          }
        case 201: break;
        case 72: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 202: break;
        case 61: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_CLOSE;
          }
        case 203: break;
        case 4: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 204: break;
        case 41: 
          { yypushState(WAITING_FOR_ARGUMENTS);  return PARENTHESES_OPEN;
          }
        case 205: break;
        case 14: 
          { yybegin(WAITING_FOR_FSM_FILE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 206: break;
        case 98: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return CLASS_KEYWORD;
          }
        case 207: break;
        case 16: 
          { yybegin(WAITING_FOR_ACCESS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 208: break;
        case 106: 
          { yybegin(WAITING_FOR_INCLUDE); return INCLUDE_KEYWORD;
          }
        case 209: break;
        case 109: 
          { yybegin(WAITING_FOR_FSM_CLASS); return FSM_CLASS_KEYWORD;
          }
        case 210: break;
        case 83: 
          { yybegin(WAITING_FOR_MAP); return MAP_SECTION_BOUND;
          }
        case 211: break;
        case 19: 
          { yybegin(WAITING_FOR_DECLARE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 212: break;
        case 86: 
          { yypopState(); return BLOCK_COMMENT_CLOSE;
          }
        case 213: break;
        case 25: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 214: break;
        case 46: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return PARAMETER_TYPE;
          }
        case 215: break;
        case 84: 
          { yybegin(WAITING_FOR_ARGUMENTS); return validateJavaString(yytext());
          }
        case 216: break;
        case 64: 
          { yybegin(WAITING_FOR_POP); return CALLBACK_TRANSITION_NAME;
          }
        case 217: break;
        case 70: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_PROXY_STATE_KEYWORD_SEPARATOR;
          }
        case 218: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
