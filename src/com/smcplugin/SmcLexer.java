/* The following code was generated by JFlex 1.4.3 on 13.03.16 18:43 */

package com.smcplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;
import java.util.regex.Matcher;

import static com.smcplugin.psi.SmcTypes.*;
import static com.smcplugin.util.SmcStringUtils.JAVA_LITERAL_PATTERN;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13.03.16 18:43 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/grammar/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_FOR_NEXT_STATE_NAME = 50;
  public static final int WAITING_FOR_START_STATE_NAME = 24;
  public static final int INSIDE_GUARD_BRACKET = 48;
  public static final int WAITING_FOR_HEADER = 16;
  public static final int WAITING_FOR_FSM_FILE = 12;
  public static final int WAITING_FOR_ACCESS = 14;
  public static final int WAITING_FOR_ACTIONS = 52;
  public static final int WAITING_FOR_INCLUDE = 20;
  public static final int WAITING_FOR_PUSH_STATE_NAME = 60;
  public static final int IN_BLOCK_COMMENT = 54;
  public static final int WAITING_FOR_ARGUMENTS = 30;
  public static final int WAITING_FOR_GUARD_RAW_CODE = 46;
  public static final int WAITING_FOR_ENTRY_EXIT_ACTIONS = 36;
  public static final int WAITING_FOR_MAP = 26;
  public static final int WAITING_FOR_CONTEXT_CLASS = 6;
  public static final int WAITING_FOR_PACKAGE_STATEMENT = 4;
  public static final int WAITING_FOR_IMPORT_CLASS = 8;
  public static final int WAITING_FOR_PUSH = 58;
  public static final int WAITING_FOR_START = 22;
  public static final int WAITING_FOR_STATE = 28;
  public static final int WAITING_FOR_DECLARE = 18;
  public static final int WAITING_FOR_STATE_ENTRY_EXIT = 32;
  public static final int WAITING_FOR_TRANSITIONS = 38;
  public static final int WAITING_FOR_PROXY_STATE = 64;
  public static final int WAITING_FOR_PARAMETER_NAME = 44;
  public static final int WAITING_FOR_POP = 56;
  public static final int WAITING_FOR_STATE_EXIT = 34;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_PARAMETERS = 40;
  public static final int WAITING_FOR_FSM_CLASS = 10;
  public static final int WAITING_FOR_VERBATIM_CODE = 2;
  public static final int WAITING_FOR_PARAMETER_TYPE = 42;
  public static final int WAITING_FOR_PUSH_MAP_NAME = 62;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 17, 17, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\7"+
    "\2\0\1\31\1\0\1\0\1\42\1\43\1\27\1\0\1\44\1\0"+
    "\1\6\1\30\10\6\2\6\1\35\1\45\5\0\4\5\1\36\25\5"+
    "\1\46\1\10\1\4\1\0\1\6\1\0\1\26\1\14\1\17\1\24"+
    "\1\23\1\11\1\51\1\47\1\16\1\5\1\50\1\15\1\52\1\37"+
    "\1\21\1\12\1\5\1\20\1\34\1\22\1\13\1\25\1\5\1\41"+
    "\1\40\1\5\1\32\1\0\1\33\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\24\0\1\2\1\3\2\0\1\4\5\0"+
    "\1\5\1\6\2\5\1\1\1\5\1\7\1\10\1\11"+
    "\1\12\1\13\2\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\5\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\5\1\34\1\35\1\5\1\36"+
    "\1\37\1\5\1\40\1\37\1\41\1\42\1\5\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\2\1\65\1\66\1\67\1\3\1\70\1\71"+
    "\1\72\2\73\1\74\1\73\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\4\1\5\1\4\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\5\1\112\1\5\1\113"+
    "\1\114\2\115\1\116\1\117\1\5\1\120\1\121\1\122"+
    "\1\123\6\0\1\124\4\0\1\125\1\126\3\14\2\0"+
    "\2\33\1\127\1\130\1\131\2\37\1\0\1\132\3\0"+
    "\3\73\1\0\1\133\1\134\4\0\1\115\1\135\12\0"+
    "\1\14\3\0\2\37\1\132\1\0\1\73\1\136\1\137"+
    "\1\0\1\140\1\141\1\142\11\0\1\143\1\14\3\0"+
    "\1\37\1\144\1\0\1\145\1\146\12\0\1\14\3\0"+
    "\1\147\6\0\1\150\2\0\1\151\1\0\1\152\1\153"+
    "\2\0\1\154\4\0\1\155\1\0\1\156\1\157\1\0"+
    "\1\160\1\0\1\161\1\162\1\163\1\0\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535"+
    "\0\u02db\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662"+
    "\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba"+
    "\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912"+
    "\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a"+
    "\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u02db\0\u0b41\0\u0b6c\0\u0b97"+
    "\0\u0bc2\0\u02db\0\u02db\0\u0bed\0\u02db\0\u02db\0\u0c18\0\u0c43"+
    "\0\u02db\0\u02db\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u02db\0\u02db"+
    "\0\u0d1a\0\u0d45\0\u02db\0\u0d70\0\u0d9b\0\u02db\0\u02db\0\u0dc6"+
    "\0\u0df1\0\u02db\0\u0e1c\0\u0e47\0\u0e72\0\u02db\0\u0e9d\0\u02db"+
    "\0\u02db\0\u0ec8\0\u0ef3\0\u02db\0\u02db\0\u0f1e\0\u0f49\0\u0f74"+
    "\0\u0f9f\0\u0fca\0\u02db\0\u02db\0\u02db\0\u02db\0\u0ff5\0\u1020"+
    "\0\u058b\0\u104b\0\u02db\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122"+
    "\0\u114d\0\u1178\0\u11a3\0\u02db\0\u11ce\0\u11f9\0\u1224\0\u124f"+
    "\0\u127a\0\u12a5\0\u12d0\0\u02db\0\u12fb\0\u1326\0\u1351\0\u137c"+
    "\0\u05e1\0\u02db\0\u13a7\0\u02db\0\u13d2\0\u13fd\0\u1428\0\u1453"+
    "\0\u02db\0\u02db\0\u02db\0\u02db\0\u147e\0\u14a9\0\u0bc2\0\u02db"+
    "\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u02db"+
    "\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u02db\0\u16d8"+
    "\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830"+
    "\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u0bc2"+
    "\0\u1988\0\u19b3\0\u0e47\0\u0e47\0\u19de\0\u02db\0\u02db\0\u10a1"+
    "\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36"+
    "\0\u1b61\0\u02db\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38\0\u0aeb"+
    "\0\u1c63\0\u0e47\0\u02db\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a"+
    "\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92"+
    "\0\u1ebd\0\u0aeb\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf"+
    "\0\u02db\0\u1fea\0\u2015\0\u02db\0\u2040\0\u070e\0\u02db\0\u206b"+
    "\0\u2096\0\u02db\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u02db\0\u216d"+
    "\0\u02db\0\u02db\0\u2198\0\u02db\0\u21c3\0\u02db\0\u02db\0\u02db"+
    "\0\u21ee\0\u02db";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\41\3\42\24\41\1\43\1\44\21\41\31\45\1\46"+
    "\21\45\1\41\3\47\1\41\1\50\3\41\16\50\1\41"+
    "\1\43\3\41\1\50\1\41\4\50\5\41\4\50\1\41"+
    "\3\51\1\41\1\52\3\41\16\52\1\41\1\43\3\41"+
    "\1\52\1\41\4\52\5\41\4\52\1\41\3\53\1\41"+
    "\1\54\3\41\16\54\1\41\1\43\3\41\1\55\1\41"+
    "\4\54\5\41\4\54\1\41\3\56\1\41\1\57\3\41"+
    "\16\57\1\41\1\43\3\41\1\57\1\41\4\57\5\41"+
    "\4\57\1\41\3\60\1\41\1\61\3\41\16\61\1\41"+
    "\1\43\3\41\1\61\1\41\4\61\5\41\4\61\1\41"+
    "\3\62\6\41\1\63\15\41\1\43\23\41\3\64\1\41"+
    "\1\65\3\41\16\65\1\41\1\43\3\41\1\65\1\41"+
    "\4\65\5\41\4\65\1\41\3\66\1\41\1\67\3\41"+
    "\16\67\1\41\1\43\3\41\1\67\1\41\4\67\5\41"+
    "\4\67\1\41\3\70\1\41\1\71\3\41\16\71\1\41"+
    "\1\43\3\41\1\71\1\41\4\71\5\41\4\71\1\41"+
    "\3\72\1\41\1\73\3\41\16\73\1\41\1\43\3\41"+
    "\1\73\1\41\4\73\5\41\4\73\1\41\3\74\1\41"+
    "\1\75\3\41\16\75\1\41\1\43\3\41\1\75\1\76"+
    "\4\75\5\41\4\75\1\41\3\77\1\41\1\100\3\41"+
    "\16\100\1\41\1\43\1\101\2\41\1\100\1\41\4\100"+
    "\5\41\4\100\1\41\3\102\1\41\1\103\3\41\16\103"+
    "\1\41\1\43\1\104\1\105\1\41\1\103\1\41\1\106"+
    "\3\103\5\41\4\103\1\41\3\107\1\41\1\110\1\41"+
    "\1\111\1\41\16\110\1\41\1\43\3\41\1\110\1\41"+
    "\4\110\1\41\1\112\1\113\2\41\4\110\1\41\3\114"+
    "\24\41\1\43\1\41\1\115\1\116\17\41\53\0\1\41"+
    "\3\117\1\41\1\120\3\41\16\120\1\41\1\43\2\41"+
    "\1\116\1\120\1\41\4\120\1\121\2\41\1\122\1\41"+
    "\4\120\1\41\3\123\1\41\1\124\3\41\16\124\1\41"+
    "\1\43\2\41\1\116\1\124\1\41\4\124\5\41\4\124"+
    "\1\41\3\125\1\41\1\126\3\41\16\126\1\41\1\43"+
    "\3\41\1\126\1\41\4\126\1\41\1\127\1\130\2\41"+
    "\4\126\1\41\3\131\1\41\1\132\3\41\16\132\1\41"+
    "\1\43\3\41\1\132\1\133\4\132\5\41\4\132\1\134"+
    "\3\135\1\136\41\134\1\137\4\134\1\140\3\141\1\142"+
    "\41\140\1\137\4\140\1\41\3\143\1\136\1\144\3\41"+
    "\1\144\1\145\14\144\1\41\1\43\1\41\1\146\1\116"+
    "\1\144\1\41\1\144\1\147\2\144\1\150\3\41\1\151"+
    "\4\144\1\41\3\152\1\41\1\153\3\41\16\153\1\41"+
    "\1\43\2\41\1\154\1\153\1\41\4\153\1\121\2\41"+
    "\1\155\1\41\4\153\27\156\1\157\1\160\22\156\1\41"+
    "\3\161\1\41\1\162\3\41\16\162\1\41\1\43\1\41"+
    "\1\163\1\41\1\162\1\41\4\162\1\164\1\165\1\166"+
    "\2\41\4\162\1\41\3\167\6\41\1\170\15\41\1\171"+
    "\6\41\1\172\2\41\1\173\11\41\3\174\1\41\1\175"+
    "\3\41\16\175\1\41\1\43\3\41\1\175\1\41\1\175"+
    "\1\176\2\175\1\41\1\127\3\41\4\175\1\41\3\177"+
    "\1\41\1\200\3\41\16\200\1\41\1\43\3\41\1\200"+
    "\1\201\4\200\5\41\4\200\1\41\3\202\1\41\1\203"+
    "\3\41\16\203\1\41\1\43\3\41\1\203\1\41\4\203"+
    "\5\41\4\203\1\0\3\42\76\0\1\204\1\205\33\0"+
    "\1\206\1\207\3\0\1\210\1\211\4\0\1\212\1\0"+
    "\1\213\3\0\1\214\1\0\1\215\12\0\1\216\2\0"+
    "\1\217\31\45\1\220\52\45\1\220\1\221\1\222\17\45"+
    "\1\0\3\47\54\0\2\50\2\0\16\50\5\0\1\50"+
    "\1\0\4\50\5\0\4\50\1\0\3\51\54\0\2\52"+
    "\2\0\16\52\5\0\1\52\1\0\4\52\5\0\4\52"+
    "\1\0\3\53\50\0\1\223\1\224\2\0\2\54\2\0"+
    "\17\54\4\0\1\54\1\0\4\54\5\0\4\54\1\0"+
    "\1\223\1\224\2\0\2\54\2\0\11\54\1\225\5\54"+
    "\4\0\1\54\1\0\4\54\5\0\4\54\1\0\3\56"+
    "\54\0\2\57\2\0\16\57\5\0\1\57\1\0\4\57"+
    "\5\0\4\57\1\0\3\60\54\0\2\61\2\0\16\61"+
    "\5\0\1\61\1\0\4\61\5\0\4\61\1\0\3\62"+
    "\62\0\1\226\4\0\1\227\33\0\3\64\54\0\2\65"+
    "\2\0\16\65\5\0\1\65\1\0\4\65\5\0\4\65"+
    "\1\0\3\66\54\0\2\67\2\0\16\67\5\0\1\67"+
    "\1\0\4\67\5\0\4\67\1\0\3\70\54\0\2\71"+
    "\2\0\16\71\5\0\1\71\1\0\4\71\5\0\4\71"+
    "\1\0\3\72\54\0\2\73\2\0\16\73\5\0\1\73"+
    "\1\0\4\73\5\0\4\73\1\0\3\74\50\0\1\230"+
    "\1\231\2\0\2\75\2\0\16\75\5\0\1\75\1\0"+
    "\4\75\5\0\4\75\35\0\1\232\16\0\3\77\54\0"+
    "\2\100\2\0\16\100\5\0\1\100\1\0\4\100\5\0"+
    "\4\100\31\0\1\233\22\0\3\102\54\0\2\103\2\0"+
    "\16\103\5\0\1\103\1\0\4\103\5\0\4\103\31\0"+
    "\1\234\26\0\2\103\2\0\16\103\5\0\1\103\1\0"+
    "\1\103\1\235\1\103\1\236\5\0\4\103\1\0\3\107"+
    "\54\0\2\110\2\0\16\110\5\0\1\110\1\0\4\110"+
    "\5\0\4\110\1\237\2\0\4\237\1\240\1\241\42\237"+
    "\1\0\3\114\50\0\3\117\54\0\2\120\2\0\16\120"+
    "\5\0\1\120\1\0\4\120\5\0\4\120\1\0\3\123"+
    "\54\0\2\124\2\0\16\124\5\0\1\124\1\0\4\124"+
    "\5\0\4\124\1\0\3\125\54\0\2\126\2\0\16\126"+
    "\5\0\1\126\1\0\4\126\5\0\4\126\1\0\3\131"+
    "\54\0\2\132\2\0\16\132\5\0\1\132\1\0\4\132"+
    "\5\0\4\132\4\134\1\0\41\134\1\0\5\134\3\135"+
    "\1\0\41\134\1\0\4\134\4\140\1\0\41\140\1\0"+
    "\5\140\3\141\1\0\41\140\1\0\4\140\1\0\3\143"+
    "\50\0\3\242\1\0\2\144\2\0\16\144\1\0\1\243"+
    "\3\0\1\144\1\0\4\144\5\0\4\144\1\0\3\242"+
    "\1\0\2\144\2\0\2\144\1\244\5\144\1\245\5\144"+
    "\1\0\1\243\3\0\1\144\1\0\4\144\5\0\4\144"+
    "\1\0\3\242\1\0\2\144\2\0\5\144\1\246\10\144"+
    "\1\0\1\243\3\0\1\144\1\0\4\144\5\0\4\144"+
    "\1\0\3\152\54\0\2\153\2\0\16\153\5\0\1\153"+
    "\1\0\4\153\5\0\4\153\27\156\1\247\52\156\1\247"+
    "\1\250\51\156\1\251\23\156\1\0\3\161\54\0\2\162"+
    "\2\0\16\162\5\0\1\162\1\0\4\162\5\0\4\162"+
    "\1\0\3\167\62\0\1\252\55\0\1\253\35\0\3\174"+
    "\50\0\3\254\1\0\2\175\2\0\16\175\5\0\1\175"+
    "\1\255\4\175\5\0\4\175\1\0\3\254\1\0\2\175"+
    "\2\0\5\175\1\256\10\175\5\0\1\175\1\255\4\175"+
    "\5\0\4\175\1\0\3\177\54\0\2\200\2\0\16\200"+
    "\5\0\1\200\1\0\4\200\5\0\4\200\35\0\1\257"+
    "\16\0\3\202\54\0\2\203\2\0\16\203\5\0\1\203"+
    "\1\0\4\203\5\0\4\203\2\205\1\0\50\205\34\0"+
    "\1\260\44\0\1\261\63\0\1\262\12\0\1\263\15\0"+
    "\1\264\60\0\1\265\46\0\1\266\55\0\1\267\53\0"+
    "\1\270\55\0\1\271\24\0\31\45\1\220\1\45\1\0"+
    "\17\45\2\0\1\224\51\0\1\223\1\224\2\0\2\54"+
    "\2\0\15\54\1\272\1\54\4\0\1\54\1\0\4\54"+
    "\5\0\4\54\14\0\1\273\54\0\1\274\2\0\1\275"+
    "\33\0\1\231\55\0\2\103\2\0\11\103\1\276\4\103"+
    "\5\0\1\103\1\0\4\103\5\0\4\103\5\0\2\103"+
    "\2\0\5\103\1\277\10\103\5\0\1\103\1\0\4\103"+
    "\5\0\4\103\1\237\2\0\4\237\1\300\1\241\42\237"+
    "\1\0\3\242\24\0\1\243\23\0\3\243\6\0\1\301"+
    "\41\0\3\242\1\0\2\144\2\0\16\144\1\0\1\243"+
    "\3\0\1\302\1\0\4\144\5\0\4\144\1\0\3\242"+
    "\1\0\2\144\2\0\1\144\1\303\14\144\1\0\1\243"+
    "\3\0\1\144\1\0\4\144\5\0\4\144\1\0\3\242"+
    "\1\0\2\144\2\0\4\144\1\304\11\144\1\0\1\243"+
    "\3\0\1\144\1\0\4\144\5\0\4\144\27\156\1\247"+
    "\1\0\22\156\34\0\1\305\33\0\1\306\36\0\3\254"+
    "\31\0\1\255\52\0\1\307\16\0\3\254\1\0\2\175"+
    "\2\0\4\175\1\310\11\175\5\0\1\175\1\255\4\175"+
    "\5\0\4\175\52\0\1\311\17\0\1\312\52\0\1\313"+
    "\45\0\1\314\66\0\1\315\43\0\1\316\52\0\1\317"+
    "\61\0\1\320\52\0\1\321\36\0\1\322\41\0\1\223"+
    "\1\224\2\0\2\54\2\0\11\54\1\323\5\54\4\0"+
    "\1\54\1\0\4\54\5\0\4\54\15\0\1\324\62\0"+
    "\1\325\47\0\1\326\35\0\2\103\2\0\7\103\1\327"+
    "\6\103\5\0\1\103\1\0\4\103\5\0\4\103\5\0"+
    "\2\103\2\0\11\103\1\330\4\103\5\0\1\103\1\0"+
    "\4\103\5\0\4\103\13\0\1\331\40\0\3\242\1\0"+
    "\2\144\2\0\16\144\1\0\1\243\3\0\1\144\1\0"+
    "\4\144\5\0\1\332\3\144\47\0\1\333\14\0\1\334"+
    "\5\0\1\335\103\0\1\336\17\0\1\337\56\0\1\340"+
    "\65\0\1\341\33\0\1\342\60\0\1\343\47\0\1\344"+
    "\56\0\1\345\27\0\1\223\1\224\2\0\2\54\2\0"+
    "\5\54\1\346\11\54\4\0\1\54\1\0\4\54\5\0"+
    "\4\54\16\0\1\347\62\0\1\350\47\0\1\351\34\0"+
    "\2\103\2\0\16\103\5\0\1\103\1\0\2\103\1\352"+
    "\1\103\5\0\4\103\34\0\1\353\34\0\1\354\51\0"+
    "\1\355\63\0\1\356\37\0\1\357\57\0\1\360\66\0"+
    "\1\361\44\0\1\362\60\0\1\363\40\0\1\364\53\0"+
    "\1\365\30\0\1\223\1\224\2\0\2\54\2\0\6\54"+
    "\1\366\10\54\4\0\1\54\1\0\4\54\5\0\4\54"+
    "\17\0\1\367\55\0\1\370\47\0\1\371\102\0\1\372"+
    "\20\0\1\373\63\0\1\374\75\0\1\375\25\0\1\376"+
    "\50\0\1\377\50\0\1\u0100\66\0\1\u0101\36\0\1\u0102"+
    "\55\0\1\367\51\0\1\u0103\53\0\1\u0104\63\0\1\u0105"+
    "\41\0\1\u0106\52\0\1\u0107\52\0\1\u0108\52\0\1\u0109"+
    "\63\0\1\u010a\42\0\1\367\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8729];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\17\0\1\10\4\0\2\1\2\0\1\1"+
    "\5\0\1\11\43\1\1\11\4\1\2\11\1\1\2\11"+
    "\2\1\2\11\4\1\2\11\2\1\1\11\2\1\2\11"+
    "\2\1\1\11\3\1\1\11\1\1\2\11\2\1\2\11"+
    "\5\1\4\11\4\1\1\11\10\1\1\11\1\1\6\0"+
    "\1\11\4\0\1\1\1\11\1\1\1\11\1\1\2\0"+
    "\1\1\4\11\2\1\1\0\1\11\3\0\3\1\1\0"+
    "\1\11\1\1\4\0\1\1\1\11\12\0\1\1\3\0"+
    "\3\1\1\0\3\1\1\0\2\11\1\1\11\0\1\11"+
    "\1\1\3\0\2\1\1\0\1\1\1\11\12\0\1\1"+
    "\3\0\1\1\6\0\1\11\2\0\1\11\1\0\1\1"+
    "\1\11\2\0\1\11\4\0\1\11\1\0\2\11\1\0"+
    "\1\11\1\0\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }
  private Stack<Integer> stack = new Stack<Integer>();
  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }

  public IElementType validateJavaString(CharSequence match) {
    Matcher matcher = JAVA_LITERAL_PATTERN.matcher(match);
    return matcher.matches()? STRING_LITERAL: com.intellij.psi.TokenType.BAD_CHARACTER;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 112: 
          { yybegin(WAITING_FOR_FSM_FILE); return FSM_FILE_KEYWORD;
          }
        case 117: break;
        case 60: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACE_OPEN;
          }
        case 118: break;
        case 78: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 119: break;
        case 106: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return STATIC_JAVA_KEYWORD;
          }
        case 120: break;
        case 111: 
          { yybegin(WAITING_FOR_HEADER); return HEADER_KEYWORD;
          }
        case 121: break;
        case 41: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return ACTION_NAME;
          }
        case 122: break;
        case 105: 
          { yybegin(WAITING_FOR_START); return START_KEYWORD;
          }
        case 123: break;
        case 82: 
          { yypushState(IN_BLOCK_COMMENT); return BLOCK_COMMENT_OPEN;
          }
        case 124: break;
        case 18: 
          { yybegin(WAITING_FOR_HEADER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 125: break;
        case 70: 
          { yybegin(WAITING_FOR_POP); return PARENTHESES_OPEN;
          }
        case 126: break;
        case 109: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return IMPORT_KEYWORD;
          }
        case 127: break;
        case 84: 
          { yybegin(WAITING_FOR_VERBATIM_CODE);  return VERBATIM_OPEN;
          }
        case 128: break;
        case 63: 
          { yybegin(WAITING_FOR_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 129: break;
        case 62: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return BRACKET_OPEN;
          }
        case 130: break;
        case 50: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 131: break;
        case 89: 
          { yybegin(YYINITIAL); return MAP_SECTION_BOUND;
          }
        case 132: break;
        case 16: 
          { yybegin(YYINITIAL); return FSM_FILE_NAME;
          }
        case 133: break;
        case 93: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return MAP_NAME_STATE_NAME_SEPARATOR;
          }
        case 134: break;
        case 99: 
          { yybegin(WAITING_FOR_MAP); return MAP_KEYWORD;
          }
        case 135: break;
        case 88: 
          { yybegin(WAITING_FOR_STATE); return MAP_SECTION_BOUND;
          }
        case 136: break;
        case 92: 
          { yypopState(); return BLOCK_COMMENT_OPEN;
          }
        case 137: break;
        case 73: 
          { yybegin(WAITING_FOR_PUSH); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 138: break;
        case 108: 
          { yybegin(WAITING_FOR_PROXY_STATE); yypushback(yylength());
          }
        case 139: break;
        case 113: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return PACKAGE_KEYWORD;
          }
        case 140: break;
        case 30: 
          { yybegin(WAITING_FOR_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 141: break;
        case 31: 
          { yybegin(WAITING_FOR_STATE); return STATE_NAME;
          }
        case 142: break;
        case 28: 
          { yybegin(WAITING_FOR_MAP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 143: break;
        case 77: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return PUSH_STATE_NAME;
          }
        case 144: break;
        case 21: 
          { yybegin(YYINITIAL); return DECLARE_STATEMENT;
          }
        case 145: break;
        case 71: 
          { yybegin(WAITING_FOR_POP); return PARENTHESES_CLOSE;
          }
        case 146: break;
        case 33: 
          { yybegin(WAITING_FOR_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 147: break;
        case 54: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return BRACKET_CLOSE;
          }
        case 148: break;
        case 6: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 149: break;
        case 11: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 150: break;
        case 37: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 151: break;
        case 23: 
          { yybegin(YYINITIAL); return INCLUDE_FILE_NAME;
          }
        case 152: break;
        case 94: 
          { yybegin(WAITING_FOR_POP); return POP_KEYWORD;
          }
        case 153: break;
        case 53: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 154: break;
        case 97: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); yypushback(yylength());
          }
        case 155: break;
        case 34: 
          { yybegin(WAITING_FOR_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 156: break;
        case 67: 
          { yybegin(WAITING_FOR_POP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 157: break;
        case 44: 
          { yybegin(WAITING_FOR_TRANSITIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 158: break;
        case 85: 
          { yybegin(YYINITIAL);  return VERBATIM_OPEN;
          }
        case 159: break;
        case 39: 
          { yybegin(WAITING_FOR_STATE); return BRACE_CLOSE;
          }
        case 160: break;
        case 36: 
          { yybegin(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 161: break;
        case 110: 
          { yybegin(WAITING_FOR_ACCESS); return ACCESS_KEYWORD;
          }
        case 162: break;
        case 102: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_KEYWORD;
          }
        case 163: break;
        case 86: 
          { yybegin(YYINITIAL);  return VERBATIM_CLOSE;
          }
        case 164: break;
        case 25: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return START_MAP_NAME;
          }
        case 165: break;
        case 1: 
          { yybegin(WAITING_FOR_VERBATIM_CODE); return VERBATIM_CODE;
          }
        case 166: break;
        case 107: 
          { yybegin(YYINITIAL); return ACCESS_LEVEL;
          }
        case 167: break;
        case 4: 
          { yybegin(IN_BLOCK_COMMENT); return BLOCK_COMMENT_CONTENT;
          }
        case 168: break;
        case 13: 
          { yybegin(WAITING_FOR_FSM_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 169: break;
        case 115: 
          { yybegin(WAITING_FOR_DECLARE); return DECLARE_KEYWORD;
          }
        case 170: break;
        case 87: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return MAP_NAME_STATE_NAME_SEPARATOR;
          }
        case 171: break;
        case 2: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return GUARD_NOT_BRACKET;
          }
        case 172: break;
        case 46: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 173: break;
        case 19: 
          { yybegin(YYINITIAL); return HEADER_FILE_NAME;
          }
        case 174: break;
        case 61: 
          { yybegin(WAITING_FOR_PARAMETER_NAME);  return PARENTHESES_OPEN;
          }
        case 175: break;
        case 66: 
          { yybegin(WAITING_FOR_ACTIONS); return SEMICOLON;
          }
        case 176: break;
        case 51: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return PARAMETER_NAME;
          }
        case 177: break;
        case 43: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return SEMICOLON;
          }
        case 178: break;
        case 38: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return BRACE_OPEN;
          }
        case 179: break;
        case 10: 
          { yybegin(YYINITIAL); return CONTEXT_CLASS_NAME;
          }
        case 180: break;
        case 7: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 181: break;
        case 9: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 182: break;
        case 75: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return PARENTHESES_OPEN;
          }
        case 183: break;
        case 32: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_OPEN;
          }
        case 184: break;
        case 96: 
          { yybegin(WAITING_FOR_PUSH); return NIL_KEYWORD;
          }
        case 185: break;
        case 49: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return COMMA;
          }
        case 186: break;
        case 52: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return COLON;
          }
        case 187: break;
        case 58: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 188: break;
        case 59: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NEXT_STATE_NAME;
          }
        case 189: break;
        case 40: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 190: break;
        case 100: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return EXIT_KEYWORD;
          }
        case 191: break;
        case 29: 
          { yybegin(WAITING_FOR_MAP); return MAP_NAME;
          }
        case 192: break;
        case 80: 
          { yybegin(WAITING_FOR_PROXY_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 193: break;
        case 83: 
          { return LINE_COMMENT;
          }
        case 194: break;
        case 14: 
          { yybegin(YYINITIAL); return FSM_CLASS_NAME;
          }
        case 195: break;
        case 101: 
          { yybegin(WAITING_FOR_PUSH); yypushback(yylength());
          }
        case 196: break;
        case 22: 
          { yybegin(WAITING_FOR_INCLUDE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 197: break;
        case 48: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return PARENTHESES_CLOSE;
          }
        case 198: break;
        case 98: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return NIL_KEYWORD;
          }
        case 199: break;
        case 24: 
          { yybegin(WAITING_FOR_START); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 200: break;
        case 8: 
          { yybegin(YYINITIAL); return PACKAGE_STATEMENT;
          }
        case 201: break;
        case 64: 
          { yybegin(WAITING_FOR_ACTIONS); return ACTION_NAME;
          }
        case 202: break;
        case 72: 
          { yypushState(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 203: break;
        case 45: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return TRANSITION_NAME;
          }
        case 204: break;
        case 12: 
          { yybegin(YYINITIAL); return IMPORT_CLASS_STATEMENT;
          }
        case 205: break;
        case 55: 
          { yypushState(INSIDE_GUARD_BRACKET); return GUARD_BRACKET_OPEN;
          }
        case 206: break;
        case 27: 
          { yybegin(YYINITIAL); return START_STATE_NAME;
          }
        case 207: break;
        case 57: 
          { yypopState(); return GUARD_BRACKET_CLOSE;
          }
        case 208: break;
        case 95: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NIL_KEYWORD;
          }
        case 209: break;
        case 79: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); return PUSH_MAP_NAME;
          }
        case 210: break;
        case 103: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return ENTRY_KEYWORD;
          }
        case 211: break;
        case 81: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_PROXY_STATE_NAME;
          }
        case 212: break;
        case 69: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); yypushback(1);
          }
        case 213: break;
        case 35: 
          { yypopState(); return PARENTHESES_CLOSE;
          }
        case 214: break;
        case 76: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 215: break;
        case 65: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_CLOSE;
          }
        case 216: break;
        case 5: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 217: break;
        case 42: 
          { yypushState(WAITING_FOR_ARGUMENTS);  return PARENTHESES_OPEN;
          }
        case 218: break;
        case 15: 
          { yybegin(WAITING_FOR_FSM_FILE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 219: break;
        case 104: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return CLASS_KEYWORD;
          }
        case 220: break;
        case 17: 
          { yybegin(WAITING_FOR_ACCESS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 221: break;
        case 114: 
          { yybegin(WAITING_FOR_INCLUDE); return INCLUDE_KEYWORD;
          }
        case 222: break;
        case 3: 
          { yybegin(INSIDE_GUARD_BRACKET); return GUARD_NOT_BRACKET;
          }
        case 223: break;
        case 116: 
          { yybegin(WAITING_FOR_FSM_CLASS); return FSM_CLASS_KEYWORD;
          }
        case 224: break;
        case 56: 
          { yybegin(INSIDE_GUARD_BRACKET); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 225: break;
        case 20: 
          { yybegin(WAITING_FOR_DECLARE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 226: break;
        case 91: 
          { yypopState(); return BLOCK_COMMENT_CLOSE;
          }
        case 227: break;
        case 26: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 228: break;
        case 47: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return PARAMETER_TYPE;
          }
        case 229: break;
        case 90: 
          { yybegin(WAITING_FOR_ARGUMENTS); return validateJavaString(yytext());
          }
        case 230: break;
        case 68: 
          { yybegin(WAITING_FOR_POP); return CALLBACK_TRANSITION_NAME;
          }
        case 231: break;
        case 74: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_PROXY_STATE_KEYWORD_SEPARATOR;
          }
        case 232: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
