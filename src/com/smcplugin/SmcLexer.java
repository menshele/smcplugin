/* The following code was generated by JFlex 1.4.3 on 23.04.16 13:57 */

package com.smcplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;
import java.util.regex.Matcher;

import static com.smcplugin.psi.SmcTypes.*;
import static com.smcplugin.util.SmcStringUtils.JAVA_LITERAL_PATTERN;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23.04.16 13:57 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/grammar/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_FOR_ACTIONS = 52;
  public static final int WAITING_FOR_QUALIFIED_IDENTIFIER = 72;
  public static final int WAITING_FOR_STATE_EXIT = 34;
  public static final int WAITING_FOR_STATE_ENTRY_EXIT = 32;
  public static final int WAITING_FOR_ARGUMENTS = 30;
  public static final int WAITING_FOR_PARAMETER_GENERIC = 74;
  public static final int WAITING_FOR_HEADER = 16;
  public static final int WAITING_FOR_IMPORT_CLASS_NAME = 68;
  public static final int INSIDE_GUARD_BRACKET = 48;
  public static final int WAITING_FOR_PARAMETER_TYPE = 42;
  public static final int WAITING_FOR_ACCESS = 14;
  public static final int WAITING_FOR_FSM_FILE = 12;
  public static final int WAITING_FOR_PUSH_STATE_NAME = 60;
  public static final int WAITING_FOR_VERBATIM_CODE = 2;
  public static final int WAITING_FOR_PROXY_STATE = 64;
  public static final int WAITING_FOR_STATE = 28;
  public static final int WAITING_FOR_PUSH = 58;
  public static final int WAITING_FOR_PUSH_MAP_NAME = 62;
  public static final int WAITING_FOR_PARAMETERS = 40;
  public static final int WAITING_FOR_NEXT_STATE_NAME = 50;
  public static final int WAITING_FOR_TRANSITIONS = 38;
  public static final int WAITING_FOR_QUALIFIED_NAME = 70;
  public static final int IN_BLOCK_COMMENT = 54;
  public static final int WAITING_FOR_MAP = 26;
  public static final int WAITING_FOR_CONTEXT_CLASS_NAME = 66;
  public static final int WAITING_FOR_INCLUDE = 20;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_DECLARE = 18;
  public static final int WAITING_FOR_POP = 56;
  public static final int WAITING_FOR_PARAMETER_NAME = 44;
  public static final int WAITING_FOR_PACKAGE_STATEMENT = 4;
  public static final int WAITING_FOR_CONTEXT_CLASS = 6;
  public static final int WAITING_FOR_IMPORT_CLASS = 8;
  public static final int WAITING_FOR_GUARD_RAW_CODE = 46;
  public static final int WAITING_FOR_START_STATE_NAME = 24;
  public static final int WAITING_FOR_PARAMETER_GENERIC_TYPE = 76;
  public static final int WAITING_FOR_START = 22;
  public static final int WAITING_FOR_PARAMETER_GENERIC_KEYWORD = 78;
  public static final int WAITING_FOR_FSM_CLASS = 10;
  public static final int WAITING_FOR_ENTRY_EXIT_ACTIONS = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 17, 17, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\13\1\0\1\7"+
    "\2\0\1\33\1\0\1\0\1\44\1\45\1\31\1\0\1\46\1\0"+
    "\1\6\1\32\10\12\2\12\1\37\1\47\1\55\1\0\1\56\1\57"+
    "\1\0\4\5\1\40\25\5\1\50\1\10\1\4\1\0\1\12\1\0"+
    "\1\30\1\16\1\21\1\26\1\25\1\11\1\53\1\51\1\20\1\5"+
    "\1\52\1\17\1\54\1\41\1\23\1\14\1\5\1\22\1\36\1\24"+
    "\1\15\1\27\1\5\1\43\1\42\1\5\1\34\1\0\1\35\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\24\0\1\2\1\3\2\0\1\4\14\0"+
    "\1\5\1\6\2\5\1\1\1\5\1\7\2\10\1\11"+
    "\1\12\1\10\1\13\1\14\1\15\1\16\1\17\1\5"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\5\1\32\1\33\1\5\1\34\1\35"+
    "\1\5\1\36\1\35\1\37\1\40\1\5\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\2\1\64\1\65\1\66\1\3\1\67\1\70"+
    "\1\71\2\72\1\73\1\72\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\4\1\5\1\4\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\5\1\111\1\5\1\112"+
    "\1\113\2\114\1\115\1\116\1\5\1\117\1\120\1\121"+
    "\1\122\1\123\2\124\2\125\1\126\1\127\1\130\1\127"+
    "\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\2\5\1\141\1\142\6\0\1\143\4\0\1\144\1\145"+
    "\1\10\2\0\1\146\1\147\1\150\2\35\1\0\1\151"+
    "\3\0\3\72\1\0\1\152\1\153\4\0\1\114\1\154"+
    "\14\0\1\10\3\0\2\35\1\151\1\0\1\72\1\155"+
    "\1\156\1\0\1\157\1\160\1\161\13\0\1\162\1\10"+
    "\3\0\1\35\1\163\1\0\1\164\1\165\14\0\1\10"+
    "\3\0\1\166\2\0\1\167\5\0\1\170\2\0\1\171"+
    "\1\0\1\172\1\173\2\0\1\174\5\0\1\175\1\0"+
    "\1\176\1\177\1\0\1\200\1\201\1\0\1\202\1\203"+
    "\1\204\1\0\1\205";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0330"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u0330"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\u0d50\0\u0330\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0330"+
    "\0\u0330\0\u0e40\0\u0330\0\u0330\0\u0e70\0\u0ea0\0\u0330\0\u0330"+
    "\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0330\0\u0330\0\u0330\0\u0f90"+
    "\0\u0fc0\0\u0330\0\u0ff0\0\u1020\0\u0330\0\u0330\0\u1050\0\u1080"+
    "\0\u0330\0\u10b0\0\u10e0\0\u1110\0\u0330\0\u1140\0\u0330\0\u0330"+
    "\0\u1170\0\u11a0\0\u0330\0\u0330\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u1290\0\u0330\0\u0330\0\u0330\0\u0330\0\u12c0\0\u12f0\0\u0780"+
    "\0\u1320\0\u0330\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440"+
    "\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u0330\0\u1590"+
    "\0\u0330\0\u0330\0\u15c0\0\u0330\0\u0330\0\u0330\0\u15f0\0\u0330"+
    "\0\u0330\0\u1620\0\u1650\0\u0330\0\u1680\0\u16b0\0\u16e0\0\u0330"+
    "\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u0330"+
    "\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u07e0\0\u0330\0\u1920\0\u1950"+
    "\0\u1980\0\u0330\0\u0330\0\u0330\0\u19b0\0\u19e0\0\u0e10\0\u0330"+
    "\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u0330"+
    "\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u0330\0\u1c50"+
    "\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0"+
    "\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50"+
    "\0\u1f80\0\u0e10\0\u1fb0\0\u1fe0\0\u10e0\0\u10e0\0\u2010\0\u0330"+
    "\0\u0330\0\u1380\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130"+
    "\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u0330\0\u2250\0\u2280"+
    "\0\u22b0\0\u22e0\0\u2310\0\u0d20\0\u2340\0\u10e0\0\u0330\0\u2370"+
    "\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0"+
    "\0\u2520\0\u2550\0\u2580\0\u25b0\0\u25e0\0\u2610\0\u2640\0\u0d20"+
    "\0\u2670\0\u26a0\0\u0330\0\u26d0\0\u2700\0\u2730\0\u2760\0\u2790"+
    "\0\u0330\0\u27c0\0\u27f0\0\u0330\0\u2820\0\u0870\0\u0330\0\u2850"+
    "\0\u2880\0\u0330\0\u28b0\0\u28e0\0\u2910\0\u2940\0\u2970\0\u0330"+
    "\0\u29a0\0\u0330\0\u0330\0\u29d0\0\u0330\0\u0330\0\u2a00\0\u0330"+
    "\0\u0330\0\u0330\0\u2a30\0\u0330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\50\3\51\7\50\1\51\16\50\1\52\1\53\24\50"+
    "\33\54\1\55\24\54\1\50\3\56\1\50\1\57\3\50"+
    "\1\57\1\50\1\56\15\57\1\60\1\52\3\50\1\57"+
    "\1\50\4\57\5\50\4\57\4\50\3\61\1\50\1\57"+
    "\3\50\1\57\1\50\1\61\15\57\1\60\1\52\3\50"+
    "\1\57\1\50\4\57\5\50\4\57\4\50\3\62\1\50"+
    "\1\57\3\50\1\57\1\50\1\62\15\57\1\60\1\52"+
    "\3\50\1\63\1\50\4\57\5\50\4\57\4\50\3\64"+
    "\1\50\1\65\3\50\1\65\1\50\1\64\15\65\1\50"+
    "\1\52\3\50\1\65\1\50\4\65\5\50\4\65\4\50"+
    "\3\66\1\50\1\67\3\50\1\67\1\50\1\66\15\67"+
    "\1\50\1\52\3\50\1\67\1\50\4\67\5\50\4\67"+
    "\4\50\3\70\7\50\1\70\1\71\15\50\1\52\26\50"+
    "\3\72\1\50\1\73\3\50\1\73\1\50\1\72\15\73"+
    "\1\50\1\52\3\50\1\73\1\50\4\73\5\50\4\73"+
    "\4\50\3\74\1\50\1\75\3\50\1\75\1\50\1\74"+
    "\15\75\1\50\1\52\3\50\1\75\1\50\4\75\5\50"+
    "\4\75\4\50\3\76\1\50\1\77\3\50\1\77\1\50"+
    "\1\76\15\77\1\50\1\52\3\50\1\77\1\50\4\77"+
    "\5\50\4\77\4\50\3\100\1\50\1\101\3\50\1\101"+
    "\1\50\1\100\15\101\1\50\1\52\3\50\1\101\1\50"+
    "\4\101\5\50\4\101\4\50\3\102\1\50\1\103\3\50"+
    "\1\103\1\50\1\102\15\103\1\50\1\52\3\50\1\103"+
    "\1\104\4\103\5\50\4\103\4\50\3\105\1\50\1\106"+
    "\3\50\1\106\1\50\1\105\15\106\1\50\1\52\1\107"+
    "\2\50\1\106\1\50\4\106\5\50\4\106\4\50\3\110"+
    "\1\50\1\111\3\50\1\111\1\50\1\110\15\111\1\50"+
    "\1\52\1\112\1\113\1\50\1\111\1\50\1\114\3\111"+
    "\5\50\4\111\4\50\3\115\1\50\1\116\1\50\1\117"+
    "\1\50\1\116\1\50\1\115\15\116\1\50\1\52\3\50"+
    "\1\116\1\50\4\116\1\50\1\120\1\121\2\50\4\116"+
    "\4\50\3\122\7\50\1\122\16\50\1\52\1\50\1\123"+
    "\1\124\22\50\60\0\1\50\3\125\1\50\1\126\3\50"+
    "\1\126\1\50\1\125\15\126\1\50\1\52\2\50\1\124"+
    "\1\126\1\50\4\126\1\127\2\50\1\130\1\50\4\126"+
    "\4\50\3\131\1\50\1\132\3\50\1\132\1\50\1\131"+
    "\15\132\1\50\1\52\2\50\1\124\1\132\1\50\4\132"+
    "\5\50\4\132\4\50\3\133\1\50\1\134\3\50\1\134"+
    "\1\50\1\133\15\134\1\50\1\52\3\50\1\134\1\50"+
    "\4\134\1\50\1\135\1\136\2\50\4\134\1\50\1\137"+
    "\2\50\3\140\1\50\1\141\3\50\1\141\1\50\1\140"+
    "\15\141\1\50\1\52\3\50\1\141\1\142\4\141\5\50"+
    "\4\141\3\50\1\143\3\144\1\145\6\143\1\144\34\143"+
    "\1\146\7\143\1\147\3\150\1\151\6\147\1\150\34\147"+
    "\1\146\7\147\1\50\3\152\1\145\1\153\3\50\1\153"+
    "\1\50\1\152\1\154\14\153\1\50\1\52\1\50\1\155"+
    "\1\124\1\153\1\50\1\153\1\156\2\153\1\157\3\50"+
    "\1\160\4\153\4\50\3\161\1\50\1\162\3\50\1\162"+
    "\1\50\1\161\15\162\1\50\1\52\2\50\1\163\1\162"+
    "\1\50\4\162\1\127\2\50\1\164\1\50\4\162\3\50"+
    "\31\165\1\166\1\167\25\165\1\50\3\170\1\50\1\171"+
    "\3\50\1\171\1\50\1\170\15\171\1\50\1\52\1\50"+
    "\1\172\1\50\1\171\1\50\4\171\1\173\1\174\1\175"+
    "\2\50\4\171\4\50\3\176\7\50\1\176\1\177\15\50"+
    "\1\200\6\50\1\201\2\50\1\202\14\50\3\203\1\50"+
    "\1\204\3\50\1\204\1\50\1\203\15\204\1\50\1\52"+
    "\3\50\1\204\1\50\1\204\1\205\2\204\1\50\1\135"+
    "\3\50\4\204\4\50\3\206\1\50\1\207\3\50\1\207"+
    "\1\50\1\206\15\207\1\50\1\52\3\50\1\207\1\210"+
    "\4\207\5\50\4\207\4\50\3\211\1\50\1\212\3\50"+
    "\1\212\1\50\1\211\15\212\1\50\1\52\3\50\1\212"+
    "\1\50\4\212\5\50\4\212\4\50\3\213\1\50\1\214"+
    "\3\50\1\214\1\50\1\213\15\214\1\50\1\52\3\50"+
    "\1\214\1\50\4\214\5\50\4\214\4\50\3\215\1\50"+
    "\1\216\3\50\1\216\1\50\1\215\15\216\1\217\1\52"+
    "\3\50\1\216\1\50\4\216\5\50\4\216\4\50\1\220"+
    "\1\221\1\222\1\50\1\223\1\224\2\50\1\223\1\50"+
    "\1\222\15\223\1\225\1\52\3\50\1\223\1\50\4\223"+
    "\5\50\4\223\6\50\1\226\1\50\1\223\3\50\1\223"+
    "\1\50\1\226\15\223\1\225\1\52\3\50\1\223\1\50"+
    "\4\223\5\50\4\223\4\50\3\227\7\50\1\227\16\50"+
    "\1\52\12\50\1\135\1\136\6\50\1\230\1\231\2\50"+
    "\3\232\1\50\1\233\3\50\1\233\1\50\1\232\15\233"+
    "\1\50\1\52\3\50\1\233\1\50\4\233\5\50\4\233"+
    "\2\50\1\234\1\50\3\235\7\50\1\235\11\50\1\236"+
    "\4\50\1\52\3\50\1\237\17\50\1\137\1\50\1\0"+
    "\3\51\7\0\1\51\75\0\1\240\1\241\36\0\1\242"+
    "\2\0\1\243\3\0\1\244\1\245\4\0\1\246\1\0"+
    "\1\247\3\0\1\250\1\0\1\251\12\0\1\252\2\0"+
    "\1\253\3\0\33\54\1\254\57\54\1\254\1\255\1\256"+
    "\22\54\1\0\3\56\7\0\1\56\51\0\1\57\3\0"+
    "\2\57\1\0\15\57\5\0\1\57\1\0\4\57\5\0"+
    "\4\57\4\0\3\61\7\0\1\61\45\0\3\62\7\0"+
    "\1\62\51\0\1\57\3\0\2\57\1\0\10\57\1\257"+
    "\4\57\5\0\1\57\1\0\4\57\5\0\4\57\4\0"+
    "\3\64\7\0\1\64\51\0\2\65\2\0\2\65\1\0"+
    "\15\65\5\0\1\65\1\0\4\65\5\0\4\65\4\0"+
    "\3\66\7\0\1\66\51\0\2\67\2\0\2\67\1\0"+
    "\15\67\5\0\1\67\1\0\4\67\5\0\4\67\4\0"+
    "\3\70\7\0\1\70\61\0\1\260\4\0\1\261\36\0"+
    "\3\72\7\0\1\72\51\0\2\73\2\0\2\73\1\0"+
    "\15\73\5\0\1\73\1\0\4\73\5\0\4\73\4\0"+
    "\3\74\7\0\1\74\51\0\2\75\2\0\2\75\1\0"+
    "\15\75\5\0\1\75\1\0\4\75\5\0\4\75\4\0"+
    "\3\76\7\0\1\76\51\0\2\77\2\0\2\77\1\0"+
    "\15\77\5\0\1\77\1\0\4\77\5\0\4\77\4\0"+
    "\3\100\7\0\1\100\51\0\2\101\2\0\2\101\1\0"+
    "\15\101\5\0\1\101\1\0\4\101\5\0\4\101\4\0"+
    "\3\102\7\0\1\102\51\0\2\103\2\0\2\103\1\0"+
    "\15\103\5\0\1\103\1\0\4\103\5\0\4\103\42\0"+
    "\1\262\21\0\3\105\7\0\1\105\51\0\2\106\2\0"+
    "\2\106\1\0\15\106\5\0\1\106\1\0\4\106\5\0"+
    "\4\106\36\0\1\263\25\0\3\110\7\0\1\110\51\0"+
    "\2\111\2\0\2\111\1\0\15\111\5\0\1\111\1\0"+
    "\4\111\5\0\4\111\36\0\1\264\31\0\2\111\2\0"+
    "\2\111\1\0\15\111\5\0\1\111\1\0\1\111\1\265"+
    "\1\111\1\266\5\0\4\111\4\0\3\115\7\0\1\115"+
    "\51\0\2\116\2\0\2\116\1\0\15\116\5\0\1\116"+
    "\1\0\4\116\5\0\4\116\3\0\1\267\2\0\4\267"+
    "\1\270\1\271\47\267\1\0\3\122\7\0\1\122\45\0"+
    "\3\125\7\0\1\125\51\0\2\126\2\0\2\126\1\0"+
    "\15\126\5\0\1\126\1\0\4\126\5\0\4\126\4\0"+
    "\3\131\7\0\1\131\51\0\2\132\2\0\2\132\1\0"+
    "\15\132\5\0\1\132\1\0\4\132\5\0\4\132\4\0"+
    "\3\133\7\0\1\133\51\0\1\134\3\0\20\134\5\0"+
    "\1\134\1\0\4\134\5\0\4\134\4\0\3\140\7\0"+
    "\1\140\51\0\2\141\2\0\2\141\1\0\15\141\5\0"+
    "\1\141\1\0\4\141\5\0\4\141\3\0\4\143\1\0"+
    "\43\143\1\0\10\143\3\144\1\0\6\143\1\144\34\143"+
    "\1\0\7\143\4\147\1\0\43\147\1\0\10\147\3\150"+
    "\1\0\6\147\1\150\34\147\1\0\7\147\1\0\3\152"+
    "\7\0\1\152\45\0\3\272\1\0\2\153\2\0\2\153"+
    "\1\272\15\153\1\0\1\273\3\0\1\153\1\0\4\153"+
    "\5\0\4\153\4\0\3\272\1\0\2\153\2\0\2\153"+
    "\1\272\1\153\1\274\5\153\1\275\5\153\1\0\1\273"+
    "\3\0\1\153\1\0\4\153\5\0\4\153\4\0\3\272"+
    "\1\0\2\153\2\0\2\153\1\272\4\153\1\276\10\153"+
    "\1\0\1\273\3\0\1\153\1\0\4\153\5\0\4\153"+
    "\4\0\3\161\7\0\1\161\51\0\2\162\2\0\2\162"+
    "\1\0\15\162\5\0\1\162\1\0\4\162\5\0\4\162"+
    "\3\0\31\165\1\277\57\165\1\277\1\300\56\165\1\301"+
    "\26\165\1\0\3\170\7\0\1\170\51\0\2\171\2\0"+
    "\2\171\1\0\15\171\5\0\1\171\1\0\4\171\5\0"+
    "\4\171\4\0\3\176\7\0\1\176\61\0\1\302\62\0"+
    "\1\303\40\0\3\203\7\0\1\203\45\0\3\304\1\0"+
    "\2\204\2\0\2\204\1\304\15\204\5\0\1\204\1\305"+
    "\4\204\5\0\4\204\4\0\3\304\1\0\2\204\2\0"+
    "\2\204\1\304\4\204\1\306\10\204\5\0\1\204\1\305"+
    "\4\204\5\0\4\204\4\0\3\206\7\0\1\206\51\0"+
    "\2\207\2\0\2\207\1\0\15\207\5\0\1\207\1\0"+
    "\4\207\5\0\4\207\42\0\1\307\21\0\3\211\7\0"+
    "\1\211\51\0\2\212\2\0\2\212\1\0\15\212\5\0"+
    "\1\212\1\0\4\212\5\0\4\212\4\0\3\213\7\0"+
    "\1\213\51\0\1\214\3\0\2\214\1\0\15\214\5\0"+
    "\1\214\1\0\4\214\5\0\4\214\4\0\3\215\7\0"+
    "\1\215\51\0\1\216\3\0\2\216\1\0\15\216\5\0"+
    "\1\216\1\0\4\216\5\0\4\216\5\0\1\221\62\0"+
    "\1\223\3\0\2\223\1\0\15\223\5\0\1\223\1\0"+
    "\4\223\5\0\4\223\4\0\3\227\7\0\1\227\45\0"+
    "\3\232\7\0\1\232\51\0\1\233\3\0\2\233\1\0"+
    "\15\233\5\0\1\233\1\0\4\233\5\0\4\233\4\0"+
    "\3\235\7\0\1\235\107\0\1\310\31\0\1\311\42\0"+
    "\2\241\1\0\55\241\36\0\1\312\51\0\1\313\70\0"+
    "\1\314\12\0\1\315\22\0\1\316\65\0\1\317\53\0"+
    "\1\320\62\0\1\321\60\0\1\322\62\0\1\323\27\0"+
    "\33\54\1\254\1\54\1\0\22\54\5\0\1\57\3\0"+
    "\2\57\1\0\14\57\1\324\5\0\1\57\1\0\4\57"+
    "\5\0\4\57\21\0\1\325\61\0\1\326\2\0\1\327"+
    "\41\0\2\111\2\0\2\111\1\0\10\111\1\330\4\111"+
    "\5\0\1\111\1\0\4\111\5\0\4\111\10\0\2\111"+
    "\2\0\2\111\1\0\4\111\1\331\10\111\5\0\1\111"+
    "\1\0\4\111\5\0\4\111\3\0\1\267\2\0\4\267"+
    "\1\332\1\271\47\267\1\0\3\272\7\0\1\272\16\0"+
    "\1\273\26\0\3\273\7\0\1\273\1\333\44\0\3\272"+
    "\1\0\2\153\2\0\2\153\1\272\15\153\1\0\1\273"+
    "\3\0\1\334\1\0\4\153\5\0\4\153\4\0\3\272"+
    "\1\0\2\153\2\0\2\153\1\272\1\335\14\153\1\0"+
    "\1\273\3\0\1\153\1\0\4\153\5\0\4\153\4\0"+
    "\3\272\1\0\2\153\2\0\2\153\1\272\3\153\1\336"+
    "\11\153\1\0\1\273\3\0\1\153\1\0\4\153\5\0"+
    "\4\153\3\0\31\165\1\277\1\0\25\165\36\0\1\337"+
    "\40\0\1\340\41\0\3\304\7\0\1\304\23\0\1\305"+
    "\57\0\1\341\21\0\3\304\1\0\2\204\2\0\2\204"+
    "\1\304\3\204\1\342\11\204\5\0\1\204\1\305\4\204"+
    "\5\0\4\204\27\0\1\343\47\0\1\344\117\0\1\345"+
    "\24\0\1\346\57\0\1\347\52\0\1\350\73\0\1\351"+
    "\50\0\1\352\57\0\1\353\66\0\1\354\57\0\1\355"+
    "\43\0\1\356\50\0\1\57\3\0\2\57\1\0\10\57"+
    "\1\357\4\57\5\0\1\57\1\0\4\57\5\0\4\57"+
    "\22\0\1\360\67\0\1\361\54\0\1\362\40\0\2\111"+
    "\2\0\2\111\1\0\6\111\1\363\6\111\5\0\1\111"+
    "\1\0\4\111\5\0\4\111\10\0\2\111\2\0\2\111"+
    "\1\0\10\111\1\364\4\111\5\0\1\111\1\0\4\111"+
    "\5\0\4\111\20\0\1\365\43\0\3\272\1\0\2\153"+
    "\2\0\2\153\1\272\15\153\1\0\1\273\3\0\1\153"+
    "\1\0\4\153\5\0\1\366\3\153\54\0\1\367\33\0"+
    "\1\370\57\0\1\371\43\0\1\372\7\0\1\373\110\0"+
    "\1\374\24\0\1\375\63\0\1\376\72\0\1\377\40\0"+
    "\1\u0100\65\0\1\u0101\54\0\1\u0102\63\0\1\u0103\36\0"+
    "\1\57\3\0\2\57\1\0\4\57\1\u0104\10\57\5\0"+
    "\1\57\1\0\4\57\5\0\4\57\23\0\1\u0105\67\0"+
    "\1\u0106\54\0\1\u0107\37\0\2\111\2\0\2\111\1\0"+
    "\15\111\5\0\1\111\1\0\2\111\1\u0108\1\111\5\0"+
    "\4\111\41\0\1\u0109\62\0\1\u010a\40\0\1\u010b\55\0"+
    "\1\u010c\56\0\1\u010d\70\0\1\u010e\44\0\1\u010f\64\0"+
    "\1\u0110\73\0\1\u0111\51\0\1\u0112\65\0\1\u0113\45\0"+
    "\1\u0114\60\0\1\u0115\37\0\1\57\3\0\2\57\1\0"+
    "\5\57\1\u0116\7\57\5\0\1\57\1\0\4\57\5\0"+
    "\4\57\24\0\1\u0117\62\0\1\u0118\54\0\1\u0119\107\0"+
    "\1\u011a\34\0\1\u011b\50\0\1\u011c\70\0\1\u011d\102\0"+
    "\1\u011e\32\0\1\u011f\55\0\1\u0120\55\0\1\u0121\73\0"+
    "\1\u0122\43\0\1\u0123\62\0\1\u0117\56\0\1\u0124\71\0"+
    "\1\u0125\46\0\1\u0126\70\0\1\u0127\46\0\1\u0128\57\0"+
    "\1\u0129\57\0\1\u012a\57\0\1\u012b\70\0\1\u012c\47\0"+
    "\1\u0117\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10848];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\17\0\1\10\4\0\2\1\2\0\1\1"+
    "\14\0\1\11\7\1\1\11\32\1\1\11\4\1\2\11"+
    "\1\1\2\11\2\1\2\11\4\1\3\11\2\1\1\11"+
    "\2\1\2\11\2\1\1\11\3\1\1\11\1\1\2\11"+
    "\2\1\2\11\5\1\4\11\4\1\1\11\14\1\1\11"+
    "\1\1\2\11\1\1\3\11\1\1\2\11\2\1\1\11"+
    "\3\1\1\11\1\1\6\0\1\11\4\0\1\1\1\11"+
    "\1\1\2\0\3\11\2\1\1\0\1\11\3\0\3\1"+
    "\1\0\1\11\1\1\4\0\1\1\1\11\14\0\1\1"+
    "\3\0\3\1\1\0\3\1\1\0\2\11\1\1\13\0"+
    "\1\11\1\1\3\0\2\1\1\0\1\1\1\11\14\0"+
    "\1\1\3\0\1\1\2\0\1\11\5\0\1\11\2\0"+
    "\1\11\1\0\1\1\1\11\2\0\1\11\5\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }
  private Stack<Integer> stack = new Stack<Integer>();
  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }

  public IElementType validateJavaString(CharSequence match) {
    Matcher matcher = JAVA_LITERAL_PATTERN.matcher(match);
    return matcher.matches()? STRING_LITERAL: com.intellij.psi.TokenType.BAD_CHARACTER;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 129: 
          { yybegin(WAITING_FOR_FSM_FILE); return FSM_FILE_KEYWORD;
          }
        case 134: break;
        case 59: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACE_OPEN;
          }
        case 135: break;
        case 77: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 136: break;
        case 127: 
          { yybegin(WAITING_FOR_HEADER); return HEADER_KEYWORD;
          }
        case 137: break;
        case 39: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return ACTION_NAME;
          }
        case 138: break;
        case 121: 
          { yybegin(WAITING_FOR_START); return START_KEYWORD;
          }
        case 139: break;
        case 97: 
          { yypushState(IN_BLOCK_COMMENT); return BLOCK_COMMENT_OPEN;
          }
        case 140: break;
        case 16: 
          { yybegin(WAITING_FOR_HEADER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 141: break;
        case 69: 
          { yybegin(WAITING_FOR_POP); return PARENTHESES_OPEN;
          }
        case 142: break;
        case 125: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return IMPORT_KEYWORD;
          }
        case 143: break;
        case 99: 
          { yybegin(WAITING_FOR_VERBATIM_CODE);  return VERBATIM_OPEN;
          }
        case 144: break;
        case 62: 
          { yybegin(WAITING_FOR_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 145: break;
        case 61: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return BRACKET_OPEN;
          }
        case 146: break;
        case 49: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 147: break;
        case 104: 
          { yybegin(YYINITIAL); return MAP_SECTION_BOUND;
          }
        case 148: break;
        case 14: 
          { yybegin(YYINITIAL); return FSM_FILE_NAME;
          }
        case 149: break;
        case 108: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return MAP_NAME_STATE_NAME_SEPARATOR;
          }
        case 150: break;
        case 114: 
          { yybegin(WAITING_FOR_MAP); return MAP_KEYWORD;
          }
        case 151: break;
        case 103: 
          { yybegin(WAITING_FOR_STATE); return MAP_SECTION_BOUND;
          }
        case 152: break;
        case 107: 
          { yypopState(); return BLOCK_COMMENT_OPEN;
          }
        case 153: break;
        case 72: 
          { yybegin(WAITING_FOR_PUSH); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 154: break;
        case 124: 
          { yybegin(WAITING_FOR_PROXY_STATE); yypushback(yylength());
          }
        case 155: break;
        case 8: 
          { yybegin(WAITING_FOR_QUALIFIED_NAME); yypushback(yylength());
          }
        case 156: break;
        case 130: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return PACKAGE_KEYWORD;
          }
        case 157: break;
        case 88: 
          { yybegin(WAITING_FOR_QUALIFIED_IDENTIFIER); return DOT;
          }
        case 158: break;
        case 28: 
          { yybegin(WAITING_FOR_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 159: break;
        case 29: 
          { yybegin(WAITING_FOR_STATE); return STATE_NAME;
          }
        case 160: break;
        case 26: 
          { yybegin(WAITING_FOR_MAP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 161: break;
        case 93: 
          { yybegin(WAITING_FOR_PARAMETER_GENERIC_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 162: break;
        case 76: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return PUSH_STATE_NAME;
          }
        case 163: break;
        case 19: 
          { yybegin(YYINITIAL); return DECLARE_STATEMENT;
          }
        case 164: break;
        case 70: 
          { yybegin(WAITING_FOR_POP); return PARENTHESES_CLOSE;
          }
        case 165: break;
        case 31: 
          { yybegin(WAITING_FOR_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 166: break;
        case 92: 
          { yybegin(WAITING_FOR_PARAMETER_GENERIC); return ANGLE_CLOSE;
          }
        case 167: break;
        case 53: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return BRACKET_CLOSE;
          }
        case 168: break;
        case 6: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 169: break;
        case 10: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 170: break;
        case 35: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 171: break;
        case 21: 
          { yybegin(YYINITIAL); return INCLUDE_FILE_NAME;
          }
        case 172: break;
        case 109: 
          { yybegin(WAITING_FOR_POP); return POP_KEYWORD;
          }
        case 173: break;
        case 52: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 174: break;
        case 112: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); yypushback(yylength());
          }
        case 175: break;
        case 32: 
          { yybegin(WAITING_FOR_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 176: break;
        case 66: 
          { yybegin(WAITING_FOR_POP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 177: break;
        case 42: 
          { yybegin(WAITING_FOR_TRANSITIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 178: break;
        case 100: 
          { yybegin(YYINITIAL);  return VERBATIM_OPEN;
          }
        case 179: break;
        case 90: 
          { yybegin(WAITING_FOR_PARAMETER_GENERIC); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 180: break;
        case 37: 
          { yybegin(WAITING_FOR_STATE); return BRACE_CLOSE;
          }
        case 181: break;
        case 34: 
          { yybegin(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 182: break;
        case 126: 
          { yybegin(WAITING_FOR_ACCESS); return ACCESS_KEYWORD;
          }
        case 183: break;
        case 117: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_KEYWORD;
          }
        case 184: break;
        case 101: 
          { yybegin(YYINITIAL);  return VERBATIM_CLOSE;
          }
        case 185: break;
        case 23: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return START_MAP_NAME;
          }
        case 186: break;
        case 1: 
          { yybegin(WAITING_FOR_VERBATIM_CODE); return VERBATIM_CODE;
          }
        case 187: break;
        case 123: 
          { yybegin(YYINITIAL); return ACCESS_LEVEL;
          }
        case 188: break;
        case 4: 
          { yybegin(IN_BLOCK_COMMENT); return BLOCK_COMMENT_CONTENT;
          }
        case 189: break;
        case 11: 
          { yybegin(WAITING_FOR_FSM_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 190: break;
        case 132: 
          { yybegin(WAITING_FOR_DECLARE); return DECLARE_KEYWORD;
          }
        case 191: break;
        case 102: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return MAP_NAME_STATE_NAME_SEPARATOR;
          }
        case 192: break;
        case 2: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return GUARD_NOT_BRACKET;
          }
        case 193: break;
        case 96: 
          { yybegin(WAITING_FOR_PARAMETER_GENERIC_KEYWORD); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 194: break;
        case 44: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 195: break;
        case 17: 
          { yybegin(YYINITIAL); return HEADER_FILE_NAME;
          }
        case 196: break;
        case 60: 
          { yybegin(WAITING_FOR_PARAMETER_NAME);  return PARENTHESES_OPEN;
          }
        case 197: break;
        case 65: 
          { yybegin(WAITING_FOR_ACTIONS); return SEMICOLON;
          }
        case 198: break;
        case 50: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return PARAMETER_NAME;
          }
        case 199: break;
        case 41: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return SEMICOLON;
          }
        case 200: break;
        case 36: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return BRACE_OPEN;
          }
        case 201: break;
        case 82: 
          { yybegin(YYINITIAL); return CONTEXT_CLASS_NAME;
          }
        case 202: break;
        case 7: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 203: break;
        case 9: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 204: break;
        case 45: 
          { yybegin(WAITING_FOR_PARAMETER_GENERIC); return PARAMETER_TYPE_NAME;
          }
        case 205: break;
        case 74: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return PARENTHESES_OPEN;
          }
        case 206: break;
        case 85: 
          { yybegin(YYINITIAL); yypushback(yylength());
          }
        case 207: break;
        case 30: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_OPEN;
          }
        case 208: break;
        case 111: 
          { yybegin(WAITING_FOR_PUSH); return NIL_KEYWORD;
          }
        case 209: break;
        case 47: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return COMMA;
          }
        case 210: break;
        case 51: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return COLON;
          }
        case 211: break;
        case 57: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 212: break;
        case 58: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NEXT_STATE_NAME;
          }
        case 213: break;
        case 38: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 214: break;
        case 128: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return EXTENDS_KEYWORD;
          }
        case 215: break;
        case 115: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return EXIT_KEYWORD;
          }
        case 216: break;
        case 27: 
          { yybegin(WAITING_FOR_MAP); return MAP_NAME;
          }
        case 217: break;
        case 81: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 218: break;
        case 79: 
          { yybegin(WAITING_FOR_PROXY_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 219: break;
        case 98: 
          { return LINE_COMMENT;
          }
        case 220: break;
        case 12: 
          { yybegin(YYINITIAL); return FSM_CLASS_NAME;
          }
        case 221: break;
        case 48: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return ANGLE_CLOSE;
          }
        case 222: break;
        case 116: 
          { yybegin(WAITING_FOR_PUSH); yypushback(yylength());
          }
        case 223: break;
        case 20: 
          { yybegin(WAITING_FOR_INCLUDE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 224: break;
        case 46: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return PARENTHESES_CLOSE;
          }
        case 225: break;
        case 113: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return NIL_KEYWORD;
          }
        case 226: break;
        case 122: 
          { yybegin(WAITING_FOR_QUALIFIED_NAME); return STATIC_JAVA_KEYWORD;
          }
        case 227: break;
        case 22: 
          { yybegin(WAITING_FOR_START); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 228: break;
        case 95: 
          { yybegin(WAITING_FOR_PARAMETER_GENERIC_KEYWORD); return QUESTION_MARK;
          }
        case 229: break;
        case 91: 
          { yybegin(WAITING_FOR_PARAMETER_GENERIC_TYPE); return ANGLE_OPEN;
          }
        case 230: break;
        case 63: 
          { yybegin(WAITING_FOR_ACTIONS); return ACTION_NAME;
          }
        case 231: break;
        case 71: 
          { yypushState(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 232: break;
        case 43: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return TRANSITION_NAME;
          }
        case 233: break;
        case 84: 
          { yybegin(YYINITIAL); return IMPORT_CLASS_STATEMENT;
          }
        case 234: break;
        case 54: 
          { yypushState(INSIDE_GUARD_BRACKET); return GUARD_BRACKET_OPEN;
          }
        case 235: break;
        case 25: 
          { yybegin(YYINITIAL); return START_STATE_NAME;
          }
        case 236: break;
        case 86: 
          { yybegin(WAITING_FOR_QUALIFIED_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 237: break;
        case 119: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return SUPER_KEYWORD;
          }
        case 238: break;
        case 87: 
          { yybegin(WAITING_FOR_QUALIFIED_NAME); return IDENTIFIER_NAME;
          }
        case 239: break;
        case 56: 
          { yypopState(); return GUARD_BRACKET_CLOSE;
          }
        case 240: break;
        case 110: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NIL_KEYWORD;
          }
        case 241: break;
        case 78: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); return PUSH_MAP_NAME;
          }
        case 242: break;
        case 118: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return ENTRY_KEYWORD;
          }
        case 243: break;
        case 80: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_PROXY_STATE_NAME;
          }
        case 244: break;
        case 68: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); yypushback(1);
          }
        case 245: break;
        case 33: 
          { yypopState(); return PARENTHESES_CLOSE;
          }
        case 246: break;
        case 75: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 247: break;
        case 64: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_CLOSE;
          }
        case 248: break;
        case 5: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 249: break;
        case 40: 
          { yypushState(WAITING_FOR_ARGUMENTS);  return PARENTHESES_OPEN;
          }
        case 250: break;
        case 13: 
          { yybegin(WAITING_FOR_FSM_FILE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 251: break;
        case 120: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return CLASS_KEYWORD;
          }
        case 252: break;
        case 15: 
          { yybegin(WAITING_FOR_ACCESS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 253: break;
        case 89: 
          { yybegin(WAITING_FOR_QUALIFIED_IDENTIFIER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 254: break;
        case 131: 
          { yybegin(WAITING_FOR_INCLUDE); return INCLUDE_KEYWORD;
          }
        case 255: break;
        case 3: 
          { yybegin(INSIDE_GUARD_BRACKET); return GUARD_NOT_BRACKET;
          }
        case 256: break;
        case 133: 
          { yybegin(WAITING_FOR_FSM_CLASS); return FSM_CLASS_KEYWORD;
          }
        case 257: break;
        case 55: 
          { yybegin(INSIDE_GUARD_BRACKET); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 258: break;
        case 18: 
          { yybegin(WAITING_FOR_DECLARE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 259: break;
        case 94: 
          { yybegin(WAITING_FOR_PARAMETER_GENERIC_KEYWORD); return TYPE_PARAMETER;
          }
        case 260: break;
        case 106: 
          { yypopState(); return BLOCK_COMMENT_CLOSE;
          }
        case 261: break;
        case 83: 
          { yybegin(WAITING_FOR_IMPORT_CLASS_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 262: break;
        case 24: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 263: break;
        case 105: 
          { yybegin(WAITING_FOR_ARGUMENTS); return validateJavaString(yytext());
          }
        case 264: break;
        case 67: 
          { yybegin(WAITING_FOR_POP); return CALLBACK_TRANSITION_NAME;
          }
        case 265: break;
        case 73: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_PROXY_STATE_KEYWORD_SEPARATOR;
          }
        case 266: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
