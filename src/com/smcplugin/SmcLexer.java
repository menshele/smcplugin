/* The following code was generated by JFlex 1.4.3 on 03.04.16 13:33 */

package com.smcplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;
import java.util.regex.Matcher;

import static com.smcplugin.psi.SmcTypes.*;
import static com.smcplugin.util.SmcStringUtils.JAVA_LITERAL_PATTERN;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03.04.16 13:33 from the specification file
 * <tt>C:/learn/git/scmplugin/src/com/smcplugin/grammar/SmcLexer.flex</tt>
 */
public class SmcLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_FOR_ACTIONS = 52;
  public static final int WAITING_FOR_QUALIFIED_IDENTIFIER = 72;
  public static final int WAITING_FOR_STATE_EXIT = 34;
  public static final int WAITING_FOR_STATE_ENTRY_EXIT = 32;
  public static final int WAITING_FOR_ARGUMENTS = 30;
  public static final int WAITING_FOR_HEADER = 16;
  public static final int WAITING_FOR_IMPORT_CLASS_NAME = 68;
  public static final int INSIDE_GUARD_BRACKET = 48;
  public static final int WAITING_FOR_PARAMETER_TYPE = 42;
  public static final int WAITING_FOR_ACCESS = 14;
  public static final int WAITING_FOR_FSM_FILE = 12;
  public static final int WAITING_FOR_PUSH_STATE_NAME = 60;
  public static final int WAITING_FOR_VERBATIM_CODE = 2;
  public static final int WAITING_FOR_PROXY_STATE = 64;
  public static final int WAITING_FOR_STATE = 28;
  public static final int WAITING_FOR_PUSH = 58;
  public static final int WAITING_FOR_PUSH_MAP_NAME = 62;
  public static final int WAITING_FOR_PARAMETERS = 40;
  public static final int WAITING_FOR_NEXT_STATE_NAME = 50;
  public static final int WAITING_FOR_TRANSITIONS = 38;
  public static final int WAITING_FOR_QUALIFIED_NAME = 70;
  public static final int IN_BLOCK_COMMENT = 54;
  public static final int WAITING_FOR_MAP = 26;
  public static final int WAITING_FOR_CONTEXT_CLASS_NAME = 66;
  public static final int WAITING_FOR_INCLUDE = 20;
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_DECLARE = 18;
  public static final int WAITING_FOR_POP = 56;
  public static final int WAITING_FOR_PARAMETER_NAME = 44;
  public static final int WAITING_FOR_PACKAGE_STATEMENT = 4;
  public static final int WAITING_FOR_CONTEXT_CLASS = 6;
  public static final int WAITING_FOR_IMPORT_CLASS = 8;
  public static final int WAITING_FOR_GUARD_RAW_CODE = 46;
  public static final int WAITING_FOR_START_STATE_NAME = 24;
  public static final int WAITING_FOR_START = 22;
  public static final int WAITING_FOR_FSM_CLASS = 10;
  public static final int WAITING_FOR_ENTRY_EXIT_ACTIONS = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 17, 17, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 35, 35
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\14\1\0\1\7"+
    "\2\0\1\34\1\13\1\0\1\45\1\46\1\32\1\0\1\47\1\0"+
    "\1\6\1\33\10\12\2\12\1\40\1\50\1\13\1\0\2\13\1\0"+
    "\4\5\1\41\25\5\1\51\1\10\1\4\1\0\1\12\1\0\1\31"+
    "\1\17\1\22\1\27\1\26\1\11\1\54\1\52\1\21\1\5\1\53"+
    "\1\20\1\55\1\42\1\24\1\15\1\5\1\23\1\37\1\25\1\16"+
    "\1\30\1\5\1\44\1\43\1\5\1\35\1\0\1\36\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\24\0\1\2\1\3\2\0\1\4\11\0"+
    "\1\5\1\6\2\5\1\1\1\5\1\7\2\10\1\11"+
    "\1\12\1\10\1\13\1\14\1\15\1\16\1\17\1\5"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\5\1\32\1\33\1\5\1\34\1\35"+
    "\1\5\1\36\1\35\1\37\1\40\1\5\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\2\1\63\1\64\1\65\1\3\1\66\1\67\1\70"+
    "\2\71\1\72\1\71\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\4\1\5\1\4\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\5\1\110\1\5\1\111\1\112"+
    "\2\113\1\114\1\115\1\5\1\116\1\117\1\120\1\121"+
    "\1\122\2\123\2\124\1\125\1\126\1\127\1\126\1\130"+
    "\1\131\1\132\6\0\1\133\4\0\1\134\1\135\1\10"+
    "\2\0\1\136\1\137\1\140\2\35\1\0\1\141\3\0"+
    "\3\71\1\0\1\142\1\143\4\0\1\113\1\144\12\0"+
    "\1\10\3\0\2\35\1\141\1\0\1\71\1\145\1\146"+
    "\1\0\1\147\1\150\1\151\11\0\1\152\1\10\3\0"+
    "\1\35\1\153\1\0\1\154\1\155\12\0\1\10\3\0"+
    "\1\156\6\0\1\157\2\0\1\160\1\0\1\161\1\162"+
    "\2\0\1\163\4\0\1\164\1\0\1\165\1\166\1\0"+
    "\1\167\1\0\1\170\1\171\1\172\1\0\1\173";

  private static int [] zzUnpackAction() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592"+
    "\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u030e\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\u078c\0\u030e\0\u07ba\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u030e"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u030e\0\u030e\0\u0d1e\0\u030e"+
    "\0\u030e\0\u0d4c\0\u0d7a\0\u030e\0\u030e\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u030e\0\u030e\0\u0e60\0\u0e8e\0\u030e\0\u0ebc\0\u0eea"+
    "\0\u030e\0\u030e\0\u0f18\0\u0f46\0\u030e\0\u0f74\0\u0fa2\0\u0fd0"+
    "\0\u030e\0\u0ffe\0\u030e\0\u030e\0\u102c\0\u105a\0\u030e\0\u030e"+
    "\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u030e\0\u030e\0\u030e"+
    "\0\u030e\0\u116e\0\u119c\0\u06a6\0\u11ca\0\u030e\0\u11f8\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u030e\0\u1420\0\u030e\0\u030e\0\u144e\0\u030e"+
    "\0\u030e\0\u030e\0\u030e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534"+
    "\0\u1562\0\u1590\0\u030e\0\u15be\0\u15ec\0\u161a\0\u1648\0\u0702"+
    "\0\u030e\0\u1676\0\u16a4\0\u16d2\0\u030e\0\u030e\0\u030e\0\u1700"+
    "\0\u172e\0\u0cf0\0\u030e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814"+
    "\0\u1842\0\u1870\0\u030e\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928"+
    "\0\u1956\0\u030e\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a"+
    "\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda"+
    "\0\u1c08\0\u1c36\0\u0cf0\0\u1c64\0\u1c92\0\u0fa2\0\u0fa2\0\u1cc0"+
    "\0\u030e\0\u030e\0\u1226\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6"+
    "\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u030e\0\u1e8c\0\u1eba\0\u1ee8"+
    "\0\u1f16\0\u1f44\0\u0c0a\0\u1f72\0\u0fa2\0\u030e\0\u1fa0\0\u1fce"+
    "\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e"+
    "\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u0c0a\0\u2224\0\u2252\0\u2280"+
    "\0\u22ae\0\u22dc\0\u230a\0\u030e\0\u2338\0\u2366\0\u030e\0\u2394"+
    "\0\u078c\0\u030e\0\u23c2\0\u23f0\0\u030e\0\u241e\0\u244c\0\u247a"+
    "\0\u24a8\0\u030e\0\u24d6\0\u030e\0\u030e\0\u2504\0\u030e\0\u2532"+
    "\0\u030e\0\u030e\0\u030e\0\u2560\0\u030e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\45\3\46\10\45\1\46\16\45\1\47\1\50\21\45"+
    "\34\51\1\52\21\51\1\45\3\53\1\45\1\54\3\45"+
    "\1\54\2\45\1\53\15\54\1\55\1\47\3\45\1\54"+
    "\1\45\4\54\5\45\4\54\1\45\3\56\1\45\1\54"+
    "\3\45\1\54\2\45\1\56\15\54\1\55\1\47\3\45"+
    "\1\54\1\45\4\54\5\45\4\54\1\45\3\57\1\45"+
    "\1\54\3\45\1\54\2\45\1\57\15\54\1\55\1\47"+
    "\3\45\1\60\1\45\4\54\5\45\4\54\1\45\3\61"+
    "\1\45\1\62\3\45\1\62\2\45\1\61\15\62\1\45"+
    "\1\47\3\45\1\62\1\45\4\62\5\45\4\62\1\45"+
    "\3\63\1\45\1\64\3\45\1\64\2\45\1\63\15\64"+
    "\1\45\1\47\3\45\1\64\1\45\4\64\5\45\4\64"+
    "\1\45\3\65\10\45\1\65\1\66\15\45\1\47\23\45"+
    "\3\67\1\45\1\70\3\45\1\70\2\45\1\67\15\70"+
    "\1\45\1\47\3\45\1\70\1\45\4\70\5\45\4\70"+
    "\1\45\3\71\1\45\1\72\3\45\1\72\2\45\1\71"+
    "\15\72\1\45\1\47\3\45\1\72\1\45\4\72\5\45"+
    "\4\72\1\45\3\73\1\45\1\74\3\45\1\74\2\45"+
    "\1\73\15\74\1\45\1\47\3\45\1\74\1\45\4\74"+
    "\5\45\4\74\1\45\3\75\1\45\1\76\3\45\1\76"+
    "\2\45\1\75\15\76\1\45\1\47\3\45\1\76\1\45"+
    "\4\76\5\45\4\76\1\45\3\77\1\45\1\100\3\45"+
    "\1\100\2\45\1\77\15\100\1\45\1\47\3\45\1\100"+
    "\1\101\4\100\5\45\4\100\1\45\3\102\1\45\1\103"+
    "\3\45\1\103\2\45\1\102\15\103\1\45\1\47\1\104"+
    "\2\45\1\103\1\45\4\103\5\45\4\103\1\45\3\105"+
    "\1\45\1\106\3\45\1\106\2\45\1\105\15\106\1\45"+
    "\1\47\1\107\1\110\1\45\1\106\1\45\1\111\3\106"+
    "\5\45\4\106\1\45\3\112\1\45\1\113\1\45\1\114"+
    "\1\45\1\113\2\45\1\112\15\113\1\45\1\47\3\45"+
    "\1\113\1\45\4\113\1\45\1\115\1\116\2\45\4\113"+
    "\1\45\3\117\10\45\1\117\16\45\1\47\1\45\1\120"+
    "\1\121\17\45\56\0\1\45\3\122\1\45\1\123\3\45"+
    "\1\123\2\45\1\122\15\123\1\45\1\47\2\45\1\121"+
    "\1\123\1\45\4\123\1\124\2\45\1\125\1\45\4\123"+
    "\1\45\3\126\1\45\1\127\3\45\1\127\2\45\1\126"+
    "\15\127\1\45\1\47\2\45\1\121\1\127\1\45\4\127"+
    "\5\45\4\127\1\45\3\130\1\45\1\131\3\45\1\131"+
    "\2\45\1\130\15\131\1\45\1\47\3\45\1\131\1\45"+
    "\4\131\1\45\1\132\1\133\2\45\4\131\1\45\3\134"+
    "\1\45\1\135\3\45\1\135\2\45\1\134\15\135\1\45"+
    "\1\47\3\45\1\135\1\136\4\135\5\45\4\135\1\137"+
    "\3\140\1\141\7\137\1\140\34\137\1\142\4\137\1\143"+
    "\3\144\1\145\7\143\1\144\34\143\1\142\4\143\1\45"+
    "\3\146\1\141\1\147\3\45\1\147\2\45\1\146\1\150"+
    "\14\147\1\45\1\47\1\45\1\151\1\121\1\147\1\45"+
    "\1\147\1\152\2\147\1\153\3\45\1\154\4\147\1\45"+
    "\3\155\1\45\1\156\3\45\1\156\2\45\1\155\15\156"+
    "\1\45\1\47\2\45\1\157\1\156\1\45\4\156\1\124"+
    "\2\45\1\160\1\45\4\156\32\161\1\162\1\163\22\161"+
    "\1\45\3\164\1\45\1\165\3\45\1\165\2\45\1\164"+
    "\15\165\1\45\1\47\1\45\1\166\1\45\1\165\1\45"+
    "\4\165\1\167\1\170\1\171\2\45\4\165\1\45\3\172"+
    "\10\45\1\172\1\173\15\45\1\174\6\45\1\175\2\45"+
    "\1\176\11\45\3\177\1\45\1\200\3\45\1\200\2\45"+
    "\1\177\15\200\1\45\1\47\3\45\1\200\1\45\1\200"+
    "\1\201\2\200\1\45\1\132\3\45\4\200\1\45\3\202"+
    "\1\45\1\203\3\45\1\203\2\45\1\202\15\203\1\45"+
    "\1\47\3\45\1\203\1\204\4\203\5\45\4\203\1\45"+
    "\3\205\1\45\1\206\3\45\1\206\2\45\1\205\15\206"+
    "\1\45\1\47\3\45\1\206\1\45\4\206\5\45\4\206"+
    "\1\45\3\207\1\45\1\210\3\45\1\210\2\45\1\207"+
    "\15\210\1\45\1\47\3\45\1\210\1\45\4\210\5\45"+
    "\4\210\1\45\3\211\1\45\1\212\3\45\1\212\2\45"+
    "\1\211\15\212\1\213\1\47\3\45\1\212\1\45\4\212"+
    "\5\45\4\212\1\45\1\214\1\215\1\216\1\45\1\217"+
    "\1\220\2\45\1\217\2\45\1\216\15\217\1\221\1\47"+
    "\3\45\1\217\1\45\4\217\5\45\4\217\3\45\1\222"+
    "\1\45\1\217\3\45\1\217\2\45\1\222\15\217\1\221"+
    "\1\47\3\45\1\217\1\45\4\217\5\45\4\217\1\0"+
    "\3\46\10\0\1\46\73\0\1\223\1\224\33\0\1\225"+
    "\3\0\1\226\3\0\1\227\1\230\4\0\1\231\1\0"+
    "\1\232\3\0\1\233\1\0\1\234\12\0\1\235\2\0"+
    "\1\236\34\51\1\237\55\51\1\237\1\240\1\241\17\51"+
    "\1\0\3\53\10\0\1\53\46\0\1\54\3\0\2\54"+
    "\2\0\15\54\5\0\1\54\1\0\4\54\5\0\4\54"+
    "\1\0\3\56\10\0\1\56\42\0\3\57\10\0\1\57"+
    "\46\0\1\54\3\0\2\54\2\0\10\54\1\242\4\54"+
    "\5\0\1\54\1\0\4\54\5\0\4\54\1\0\3\61"+
    "\10\0\1\61\46\0\2\62\2\0\2\62\2\0\15\62"+
    "\5\0\1\62\1\0\4\62\5\0\4\62\1\0\3\63"+
    "\10\0\1\63\46\0\2\64\2\0\2\64\2\0\15\64"+
    "\5\0\1\64\1\0\4\64\5\0\4\64\1\0\3\65"+
    "\10\0\1\65\57\0\1\243\4\0\1\244\33\0\3\67"+
    "\10\0\1\67\46\0\2\70\2\0\2\70\2\0\15\70"+
    "\5\0\1\70\1\0\4\70\5\0\4\70\1\0\3\71"+
    "\10\0\1\71\46\0\2\72\2\0\2\72\2\0\15\72"+
    "\5\0\1\72\1\0\4\72\5\0\4\72\1\0\3\73"+
    "\10\0\1\73\46\0\2\74\2\0\2\74\2\0\15\74"+
    "\5\0\1\74\1\0\4\74\5\0\4\74\1\0\3\75"+
    "\10\0\1\75\46\0\2\76\2\0\2\76\2\0\15\76"+
    "\5\0\1\76\1\0\4\76\5\0\4\76\1\0\3\77"+
    "\10\0\1\77\46\0\2\100\2\0\2\100\2\0\15\100"+
    "\5\0\1\100\1\0\4\100\5\0\4\100\40\0\1\245"+
    "\16\0\3\102\10\0\1\102\46\0\2\103\2\0\2\103"+
    "\2\0\15\103\5\0\1\103\1\0\4\103\5\0\4\103"+
    "\34\0\1\246\22\0\3\105\10\0\1\105\46\0\2\106"+
    "\2\0\2\106\2\0\15\106\5\0\1\106\1\0\4\106"+
    "\5\0\4\106\34\0\1\247\26\0\2\106\2\0\2\106"+
    "\2\0\15\106\5\0\1\106\1\0\1\106\1\250\1\106"+
    "\1\251\5\0\4\106\1\0\3\112\10\0\1\112\46\0"+
    "\2\113\2\0\2\113\2\0\15\113\5\0\1\113\1\0"+
    "\4\113\5\0\4\113\1\252\2\0\4\252\1\253\1\254"+
    "\45\252\1\0\3\117\10\0\1\117\42\0\3\122\10\0"+
    "\1\122\46\0\2\123\2\0\2\123\2\0\15\123\5\0"+
    "\1\123\1\0\4\123\5\0\4\123\1\0\3\126\10\0"+
    "\1\126\46\0\2\127\2\0\2\127\2\0\15\127\5\0"+
    "\1\127\1\0\4\127\5\0\4\127\1\0\3\130\10\0"+
    "\1\130\46\0\2\131\2\0\21\131\5\0\1\131\1\0"+
    "\4\131\5\0\4\131\1\0\3\134\10\0\1\134\46\0"+
    "\2\135\2\0\2\135\2\0\15\135\5\0\1\135\1\0"+
    "\4\135\5\0\4\135\4\137\1\0\44\137\1\0\5\137"+
    "\3\140\1\0\7\137\1\140\34\137\1\0\4\137\4\143"+
    "\1\0\44\143\1\0\5\143\3\144\1\0\7\143\1\144"+
    "\34\143\1\0\4\143\1\0\3\146\10\0\1\146\42\0"+
    "\3\255\1\0\2\147\2\0\2\147\1\0\1\255\15\147"+
    "\1\0\1\256\3\0\1\147\1\0\4\147\5\0\4\147"+
    "\1\0\3\255\1\0\2\147\2\0\2\147\1\0\1\255"+
    "\1\147\1\257\5\147\1\260\5\147\1\0\1\256\3\0"+
    "\1\147\1\0\4\147\5\0\4\147\1\0\3\255\1\0"+
    "\2\147\2\0\2\147\1\0\1\255\4\147\1\261\10\147"+
    "\1\0\1\256\3\0\1\147\1\0\4\147\5\0\4\147"+
    "\1\0\3\155\10\0\1\155\46\0\2\156\2\0\2\156"+
    "\2\0\15\156\5\0\1\156\1\0\4\156\5\0\4\156"+
    "\32\161\1\262\55\161\1\262\1\263\54\161\1\264\23\161"+
    "\1\0\3\164\10\0\1\164\46\0\2\165\2\0\2\165"+
    "\2\0\15\165\5\0\1\165\1\0\4\165\5\0\4\165"+
    "\1\0\3\172\10\0\1\172\57\0\1\265\60\0\1\266"+
    "\35\0\3\177\10\0\1\177\42\0\3\267\1\0\2\200"+
    "\2\0\2\200\1\0\1\267\15\200\5\0\1\200\1\270"+
    "\4\200\5\0\4\200\1\0\3\267\1\0\2\200\2\0"+
    "\2\200\1\0\1\267\4\200\1\271\10\200\5\0\1\200"+
    "\1\270\4\200\5\0\4\200\1\0\3\202\10\0\1\202"+
    "\46\0\2\203\2\0\2\203\2\0\15\203\5\0\1\203"+
    "\1\0\4\203\5\0\4\203\40\0\1\272\16\0\3\205"+
    "\10\0\1\205\46\0\2\206\2\0\2\206\2\0\15\206"+
    "\5\0\1\206\1\0\4\206\5\0\4\206\1\0\3\207"+
    "\10\0\1\207\46\0\1\210\3\0\2\210\2\0\15\210"+
    "\5\0\1\210\1\0\4\210\5\0\4\210\1\0\3\211"+
    "\10\0\1\211\46\0\1\212\3\0\2\212\2\0\15\212"+
    "\5\0\1\212\1\0\4\212\5\0\4\212\2\0\1\215"+
    "\60\0\1\217\3\0\2\217\2\0\15\217\5\0\1\217"+
    "\1\0\4\217\5\0\4\217\2\224\1\0\53\224\37\0"+
    "\1\273\47\0\1\274\66\0\1\275\12\0\1\276\20\0"+
    "\1\277\63\0\1\300\51\0\1\301\60\0\1\302\56\0"+
    "\1\303\60\0\1\304\24\0\34\51\1\237\1\51\1\0"+
    "\17\51\5\0\1\54\3\0\2\54\2\0\14\54\1\305"+
    "\5\0\1\54\1\0\4\54\5\0\4\54\17\0\1\306"+
    "\57\0\1\307\2\0\1\310\36\0\2\106\2\0\2\106"+
    "\2\0\10\106\1\311\4\106\5\0\1\106\1\0\4\106"+
    "\5\0\4\106\5\0\2\106\2\0\2\106\2\0\4\106"+
    "\1\312\10\106\5\0\1\106\1\0\4\106\5\0\4\106"+
    "\1\252\2\0\4\252\1\313\1\254\45\252\1\0\3\255"+
    "\10\0\1\255\16\0\1\256\23\0\3\256\10\0\1\256"+
    "\1\314\41\0\3\255\1\0\2\147\2\0\2\147\1\0"+
    "\1\255\15\147\1\0\1\256\3\0\1\315\1\0\4\147"+
    "\5\0\4\147\1\0\3\255\1\0\2\147\2\0\2\147"+
    "\1\0\1\255\1\316\14\147\1\0\1\256\3\0\1\147"+
    "\1\0\4\147\5\0\4\147\1\0\3\255\1\0\2\147"+
    "\2\0\2\147\1\0\1\255\3\147\1\317\11\147\1\0"+
    "\1\256\3\0\1\147\1\0\4\147\5\0\4\147\32\161"+
    "\1\262\1\0\22\161\37\0\1\320\36\0\1\321\36\0"+
    "\3\267\10\0\1\267\23\0\1\270\55\0\1\322\16\0"+
    "\3\267\1\0\2\200\2\0\2\200\1\0\1\267\3\200"+
    "\1\323\11\200\5\0\1\200\1\270\4\200\5\0\4\200"+
    "\55\0\1\324\22\0\1\325\55\0\1\326\50\0\1\327"+
    "\71\0\1\330\46\0\1\331\55\0\1\332\64\0\1\333"+
    "\55\0\1\334\41\0\1\335\45\0\1\54\3\0\2\54"+
    "\2\0\10\54\1\336\4\54\5\0\1\54\1\0\4\54"+
    "\5\0\4\54\20\0\1\337\65\0\1\340\52\0\1\341"+
    "\35\0\2\106\2\0\2\106\2\0\6\106\1\342\6\106"+
    "\5\0\1\106\1\0\4\106\5\0\4\106\5\0\2\106"+
    "\2\0\2\106\2\0\10\106\1\343\4\106\5\0\1\106"+
    "\1\0\4\106\5\0\4\106\16\0\1\344\40\0\3\255"+
    "\1\0\2\147\2\0\2\147\1\0\1\255\15\147\1\0"+
    "\1\256\3\0\1\147\1\0\4\147\5\0\1\345\3\147"+
    "\52\0\1\346\14\0\1\347\10\0\1\350\106\0\1\351"+
    "\22\0\1\352\61\0\1\353\70\0\1\354\36\0\1\355"+
    "\63\0\1\356\52\0\1\357\61\0\1\360\33\0\1\54"+
    "\3\0\2\54\2\0\4\54\1\361\10\54\5\0\1\54"+
    "\1\0\4\54\5\0\4\54\21\0\1\362\65\0\1\363"+
    "\52\0\1\364\34\0\2\106\2\0\2\106\2\0\15\106"+
    "\5\0\1\106\1\0\2\106\1\365\1\106\5\0\4\106"+
    "\37\0\1\366\37\0\1\367\54\0\1\370\66\0\1\371"+
    "\42\0\1\372\62\0\1\373\71\0\1\374\47\0\1\375"+
    "\63\0\1\376\43\0\1\377\56\0\1\u0100\34\0\1\54"+
    "\3\0\2\54\2\0\5\54\1\u0101\7\54\5\0\1\54"+
    "\1\0\4\54\5\0\4\54\22\0\1\u0102\60\0\1\u0103"+
    "\52\0\1\u0104\105\0\1\u0105\23\0\1\u0106\66\0\1\u0107"+
    "\100\0\1\u0108\30\0\1\u0109\53\0\1\u010a\53\0\1\u010b"+
    "\71\0\1\u010c\41\0\1\u010d\60\0\1\u0102\54\0\1\u010e"+
    "\56\0\1\u010f\66\0\1\u0110\44\0\1\u0111\55\0\1\u0112"+
    "\55\0\1\u0113\55\0\1\u0114\66\0\1\u0115\45\0\1\u0102"+
    "\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9614];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\17\0\1\10\4\0\2\1\2\0\1\1"+
    "\11\0\1\11\7\1\1\11\32\1\1\11\4\1\2\11"+
    "\1\1\2\11\2\1\2\11\4\1\2\11\2\1\1\11"+
    "\2\1\2\11\2\1\1\11\3\1\1\11\1\1\2\11"+
    "\2\1\2\11\5\1\4\11\4\1\1\11\14\1\1\11"+
    "\1\1\2\11\1\1\4\11\1\1\6\0\1\11\4\0"+
    "\1\1\1\11\1\1\2\0\3\11\2\1\1\0\1\11"+
    "\3\0\3\1\1\0\1\11\1\1\4\0\1\1\1\11"+
    "\12\0\1\1\3\0\3\1\1\0\3\1\1\0\2\11"+
    "\1\1\11\0\1\11\1\1\3\0\2\1\1\0\1\1"+
    "\1\11\12\0\1\1\3\0\1\1\6\0\1\11\2\0"+
    "\1\11\1\0\1\1\1\11\2\0\1\11\4\0\1\11"+
    "\1\0\2\11\1\0\1\11\1\0\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public SmcLexer() {
    this((java.io.Reader)null);
  }
  private Stack<Integer> stack = new Stack<Integer>();
  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }

  public IElementType validateJavaString(CharSequence match) {
    Matcher matcher = JAVA_LITERAL_PATTERN.matcher(match);
    return matcher.matches()? STRING_LITERAL: com.intellij.psi.TokenType.BAD_CHARACTER;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmcLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 119: 
          { yybegin(WAITING_FOR_FSM_FILE); return FSM_FILE_KEYWORD;
          }
        case 124: break;
        case 58: 
          { yybegin(WAITING_FOR_ACTIONS); return BRACE_OPEN;
          }
        case 125: break;
        case 76: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 126: break;
        case 118: 
          { yybegin(WAITING_FOR_HEADER); return HEADER_KEYWORD;
          }
        case 127: break;
        case 39: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return ACTION_NAME;
          }
        case 128: break;
        case 112: 
          { yybegin(WAITING_FOR_START); return START_KEYWORD;
          }
        case 129: break;
        case 89: 
          { yypushState(IN_BLOCK_COMMENT); return BLOCK_COMMENT_OPEN;
          }
        case 130: break;
        case 16: 
          { yybegin(WAITING_FOR_HEADER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 131: break;
        case 68: 
          { yybegin(WAITING_FOR_POP); return PARENTHESES_OPEN;
          }
        case 132: break;
        case 116: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return IMPORT_KEYWORD;
          }
        case 133: break;
        case 91: 
          { yybegin(WAITING_FOR_VERBATIM_CODE);  return VERBATIM_OPEN;
          }
        case 134: break;
        case 61: 
          { yybegin(WAITING_FOR_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 135: break;
        case 60: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return BRACKET_OPEN;
          }
        case 136: break;
        case 48: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 137: break;
        case 96: 
          { yybegin(YYINITIAL); return MAP_SECTION_BOUND;
          }
        case 138: break;
        case 14: 
          { yybegin(YYINITIAL); return FSM_FILE_NAME;
          }
        case 139: break;
        case 100: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return MAP_NAME_STATE_NAME_SEPARATOR;
          }
        case 140: break;
        case 106: 
          { yybegin(WAITING_FOR_MAP); return MAP_KEYWORD;
          }
        case 141: break;
        case 95: 
          { yybegin(WAITING_FOR_STATE); return MAP_SECTION_BOUND;
          }
        case 142: break;
        case 99: 
          { yypopState(); return BLOCK_COMMENT_OPEN;
          }
        case 143: break;
        case 71: 
          { yybegin(WAITING_FOR_PUSH); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 144: break;
        case 115: 
          { yybegin(WAITING_FOR_PROXY_STATE); yypushback(yylength());
          }
        case 145: break;
        case 8: 
          { yybegin(WAITING_FOR_QUALIFIED_NAME); yypushback(yylength());
          }
        case 146: break;
        case 120: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return PACKAGE_KEYWORD;
          }
        case 147: break;
        case 87: 
          { yybegin(WAITING_FOR_QUALIFIED_IDENTIFIER); return DOT;
          }
        case 148: break;
        case 28: 
          { yybegin(WAITING_FOR_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 149: break;
        case 29: 
          { yybegin(WAITING_FOR_STATE); return STATE_NAME;
          }
        case 150: break;
        case 26: 
          { yybegin(WAITING_FOR_MAP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 151: break;
        case 75: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return PUSH_STATE_NAME;
          }
        case 152: break;
        case 19: 
          { yybegin(YYINITIAL); return DECLARE_STATEMENT;
          }
        case 153: break;
        case 69: 
          { yybegin(WAITING_FOR_POP); return PARENTHESES_CLOSE;
          }
        case 154: break;
        case 31: 
          { yybegin(WAITING_FOR_ARGUMENTS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 155: break;
        case 52: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return BRACKET_CLOSE;
          }
        case 156: break;
        case 6: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 157: break;
        case 10: 
          { yybegin(WAITING_FOR_IMPORT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 158: break;
        case 35: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 159: break;
        case 21: 
          { yybegin(YYINITIAL); return INCLUDE_FILE_NAME;
          }
        case 160: break;
        case 101: 
          { yybegin(WAITING_FOR_POP); return POP_KEYWORD;
          }
        case 161: break;
        case 51: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 162: break;
        case 104: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); yypushback(yylength());
          }
        case 163: break;
        case 32: 
          { yybegin(WAITING_FOR_ARGUMENTS); return ARGUMENT_STATEMENT;
          }
        case 164: break;
        case 65: 
          { yybegin(WAITING_FOR_POP); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 165: break;
        case 42: 
          { yybegin(WAITING_FOR_TRANSITIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 166: break;
        case 92: 
          { yybegin(YYINITIAL);  return VERBATIM_OPEN;
          }
        case 167: break;
        case 37: 
          { yybegin(WAITING_FOR_STATE); return BRACE_CLOSE;
          }
        case 168: break;
        case 34: 
          { yybegin(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 169: break;
        case 117: 
          { yybegin(WAITING_FOR_ACCESS); return ACCESS_KEYWORD;
          }
        case 170: break;
        case 109: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_KEYWORD;
          }
        case 171: break;
        case 93: 
          { yybegin(YYINITIAL);  return VERBATIM_CLOSE;
          }
        case 172: break;
        case 23: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return START_MAP_NAME;
          }
        case 173: break;
        case 1: 
          { yybegin(WAITING_FOR_VERBATIM_CODE); return VERBATIM_CODE;
          }
        case 174: break;
        case 114: 
          { yybegin(YYINITIAL); return ACCESS_LEVEL;
          }
        case 175: break;
        case 4: 
          { yybegin(IN_BLOCK_COMMENT); return BLOCK_COMMENT_CONTENT;
          }
        case 176: break;
        case 11: 
          { yybegin(WAITING_FOR_FSM_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 177: break;
        case 122: 
          { yybegin(WAITING_FOR_DECLARE); return DECLARE_KEYWORD;
          }
        case 178: break;
        case 94: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return MAP_NAME_STATE_NAME_SEPARATOR;
          }
        case 179: break;
        case 2: 
          { yybegin(WAITING_FOR_GUARD_RAW_CODE); return GUARD_NOT_BRACKET;
          }
        case 180: break;
        case 44: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 181: break;
        case 17: 
          { yybegin(YYINITIAL); return HEADER_FILE_NAME;
          }
        case 182: break;
        case 59: 
          { yybegin(WAITING_FOR_PARAMETER_NAME);  return PARENTHESES_OPEN;
          }
        case 183: break;
        case 64: 
          { yybegin(WAITING_FOR_ACTIONS); return SEMICOLON;
          }
        case 184: break;
        case 49: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return PARAMETER_NAME;
          }
        case 185: break;
        case 41: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return SEMICOLON;
          }
        case 186: break;
        case 36: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return BRACE_OPEN;
          }
        case 187: break;
        case 81: 
          { yybegin(YYINITIAL); return CONTEXT_CLASS_NAME;
          }
        case 188: break;
        case 7: 
          { yybegin(WAITING_FOR_PACKAGE_STATEMENT); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 189: break;
        case 9: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 190: break;
        case 73: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return PARENTHESES_OPEN;
          }
        case 191: break;
        case 84: 
          { yybegin(YYINITIAL); yypushback(yylength());
          }
        case 192: break;
        case 30: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_OPEN;
          }
        case 193: break;
        case 103: 
          { yybegin(WAITING_FOR_PUSH); return NIL_KEYWORD;
          }
        case 194: break;
        case 47: 
          { yybegin(WAITING_FOR_PARAMETER_NAME); return COMMA;
          }
        case 195: break;
        case 50: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return COLON;
          }
        case 196: break;
        case 56: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 197: break;
        case 57: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NEXT_STATE_NAME;
          }
        case 198: break;
        case 38: 
          { yybegin(WAITING_FOR_ENTRY_EXIT_ACTIONS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 199: break;
        case 107: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return EXIT_KEYWORD;
          }
        case 200: break;
        case 27: 
          { yybegin(WAITING_FOR_MAP); return MAP_NAME;
          }
        case 201: break;
        case 80: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 202: break;
        case 78: 
          { yybegin(WAITING_FOR_PROXY_STATE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 203: break;
        case 90: 
          { return LINE_COMMENT;
          }
        case 204: break;
        case 12: 
          { yybegin(YYINITIAL); return FSM_CLASS_NAME;
          }
        case 205: break;
        case 108: 
          { yybegin(WAITING_FOR_PUSH); yypushback(yylength());
          }
        case 206: break;
        case 20: 
          { yybegin(WAITING_FOR_INCLUDE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 207: break;
        case 46: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return PARENTHESES_CLOSE;
          }
        case 208: break;
        case 105: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return NIL_KEYWORD;
          }
        case 209: break;
        case 113: 
          { yybegin(WAITING_FOR_QUALIFIED_NAME); return STATIC_JAVA_KEYWORD;
          }
        case 210: break;
        case 22: 
          { yybegin(WAITING_FOR_START); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 211: break;
        case 62: 
          { yybegin(WAITING_FOR_ACTIONS); return ACTION_NAME;
          }
        case 212: break;
        case 70: 
          { yypushState(WAITING_FOR_ARGUMENTS); return COMMA;
          }
        case 213: break;
        case 43: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return TRANSITION_NAME;
          }
        case 214: break;
        case 83: 
          { yybegin(YYINITIAL); return IMPORT_CLASS_STATEMENT;
          }
        case 215: break;
        case 53: 
          { yypushState(INSIDE_GUARD_BRACKET); return GUARD_BRACKET_OPEN;
          }
        case 216: break;
        case 25: 
          { yybegin(YYINITIAL); return START_STATE_NAME;
          }
        case 217: break;
        case 85: 
          { yybegin(WAITING_FOR_QUALIFIED_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 218: break;
        case 86: 
          { yybegin(WAITING_FOR_QUALIFIED_NAME); return IDENTIFIER_NAME;
          }
        case 219: break;
        case 55: 
          { yypopState(); return GUARD_BRACKET_CLOSE;
          }
        case 220: break;
        case 102: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); return NIL_KEYWORD;
          }
        case 221: break;
        case 77: 
          { yybegin(WAITING_FOR_PUSH_MAP_NAME); return PUSH_MAP_NAME;
          }
        case 222: break;
        case 110: 
          { yybegin(WAITING_FOR_STATE_ENTRY_EXIT); return ENTRY_KEYWORD;
          }
        case 223: break;
        case 79: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_PROXY_STATE_NAME;
          }
        case 224: break;
        case 67: 
          { yybegin(WAITING_FOR_NEXT_STATE_NAME); yypushback(1);
          }
        case 225: break;
        case 33: 
          { yypopState(); return PARENTHESES_CLOSE;
          }
        case 226: break;
        case 74: 
          { yybegin(WAITING_FOR_PUSH_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 227: break;
        case 63: 
          { yybegin(WAITING_FOR_TRANSITIONS); return BRACE_CLOSE;
          }
        case 228: break;
        case 5: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 229: break;
        case 40: 
          { yypushState(WAITING_FOR_ARGUMENTS);  return PARENTHESES_OPEN;
          }
        case 230: break;
        case 13: 
          { yybegin(WAITING_FOR_FSM_FILE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 231: break;
        case 111: 
          { yybegin(WAITING_FOR_CONTEXT_CLASS); return CLASS_KEYWORD;
          }
        case 232: break;
        case 15: 
          { yybegin(WAITING_FOR_ACCESS); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 233: break;
        case 88: 
          { yybegin(WAITING_FOR_QUALIFIED_IDENTIFIER); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 234: break;
        case 121: 
          { yybegin(WAITING_FOR_INCLUDE); return INCLUDE_KEYWORD;
          }
        case 235: break;
        case 3: 
          { yybegin(INSIDE_GUARD_BRACKET); return GUARD_NOT_BRACKET;
          }
        case 236: break;
        case 123: 
          { yybegin(WAITING_FOR_FSM_CLASS); return FSM_CLASS_KEYWORD;
          }
        case 237: break;
        case 54: 
          { yybegin(INSIDE_GUARD_BRACKET); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 238: break;
        case 18: 
          { yybegin(WAITING_FOR_DECLARE); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 239: break;
        case 98: 
          { yypopState(); return BLOCK_COMMENT_CLOSE;
          }
        case 240: break;
        case 82: 
          { yybegin(WAITING_FOR_IMPORT_CLASS_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 241: break;
        case 24: 
          { yybegin(WAITING_FOR_START_STATE_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 242: break;
        case 45: 
          { yybegin(WAITING_FOR_PARAMETER_TYPE); return PARAMETER_TYPE;
          }
        case 243: break;
        case 97: 
          { yybegin(WAITING_FOR_ARGUMENTS); return validateJavaString(yytext());
          }
        case 244: break;
        case 66: 
          { yybegin(WAITING_FOR_POP); return CALLBACK_TRANSITION_NAME;
          }
        case 245: break;
        case 72: 
          { yybegin(WAITING_FOR_PUSH); return PUSH_PROXY_STATE_KEYWORD_SEPARATOR;
          }
        case 246: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
