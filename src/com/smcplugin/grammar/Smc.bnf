{
  parserClass="com.smcplugin.parser.SmcParser"

  parserImports=["static com.smcplugin.psi.impl.SmcPsiImplUtil.*"]
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Smc"
  psiImplClassSuffix="Impl"
  psiPackage="com.smcplugin.psi"
  psiImplPackage="com.smcplugin.psi.impl"

  elementTypeHolderClass="com.smcplugin.psi.SmcTypes"
  elementTypeClass="com.smcplugin.psi.SmcElementType"
  tokenTypeClass="com.smcplugin.psi.SmcTokenType"

  psiImplUtilClass="com.smcplugin.psi.impl.SmcPsiImplUtil"

  tokens = [
      VERBATIM_OPEN="%{"
      VERBATIM_CODE="<row code block>"
      VERBATIM_CLOSE="%}"
      CLASS_KEYWORD="%class"
      PACKAGE_KEYWORD="%package"
      FSM_CLASS_KEYWORD="%fsmclass"
      FSM_FILE_KEYWORD="%fsmfile"
      ACCESS_KEYWORD="%access"
      HEADER_KEYWORD="%header"
      DECLARE_KEYWORD="%declare"
      IMPORT_KEYWORD="%import"
      INCLUDE_KEYWORD="%include"
      START_KEYWORD="%start"
      MAP_KEYWORD="%map"
      BRACE_OPEN="{"
      BRACE_CLOSE="}"
      PARENTHESES_OPEN="("
      PARENTHESES_CLOSE=")"
      ENTRY_KEYWORD="Entry"
      EXIT_KEYWORD="Exit"
      BRACKET_OPEN="["
      BRACKET_CLOSE="]"

      COLON=":"
      COMMA=","
      SEMICOLON=";"
      POP_KEYWORD="pop"
      PUSH_KEYWORD="push"
      NIL_KEYWORD="nil"

      BLOCK_COMMENT_OPEN="/*"
      BLOCK_COMMENT_CONTENT="<comment body>"
      BLOCK_COMMENT_CLOSE="*/"
      LINE_COMMENT="//"
      FSM_FILE_NAME="<file name>"
      ACTION_NAME="<method name>"
      FSM_CLASS_NAME="<fsm class name>"
      START_MAP_NAME="<start map name>"
      MAP_NAME_STATE_NAME_SEPARATOR="::"
      START_STATE_NAME="<start state name>"
      CONTEXT_CLASS_NAME="<context class name>"
      HEADER_FILE_NAME="<header file name>"
      INCLUDE_FILE_NAME="<include file name>"
      PACKAGE_STATEMENT="<package: like com.foo.bar>"
      STATIC_JAVA_KEYWORD="<keyword \"static\">"
      IMPORT_CLASS_STATEMENT="<java import statement>"
      DECLARE_STATEMENT="<declare statement>"
      ACCESS_LEVEL="<public|protected|private>"
      MAP_NAME="<map name>"
      MAP_SECTION_BOUND="%%"
      STATE_NAME="<state name>"
      TRANSITION_NAME="<transition name>"
      PARAMETER_NAME="<parameter name>"
      PARAMETER_TYPE="<parameter type>"
      GUARD_BRACKET_OPEN="inner ["
      GUARD_BRACKET_CLOSE="inner ]"
      GUARD_NOT_BRACKET="<any char except '[' or ']' >"
      NEXT_STATE_NAME="<next state name>"
      PUSH_PROXY_STATE_NAME="<proxy state name>"
      PUSH_PROXY_STATE_KEYWORD_SEPARATOR="/"
      PUSH_MAP_NAME="<push map name>"
      PUSH_STATE_NAME="<push state name>"
      CALLBACK_TRANSITION_NAME="<pop state transition name>"
      STRING_LITERAL="<string literal>"
      ARGUMENT_STATEMENT="<argument>"
      CONTEXT_CLASS_PACKAGE="<context package name>"
     ]
}

fsmFile ::= (verbatim_code_section|fsm_package| context_class_declaration| start_state|fsm_class_declaration|fsm_file| header_file| include_file|
 import_class_declaration| declare| access| comment)* map_declaration+ comment*

comment ::=LINE_COMMENT|block_comment

block_comment::=(BLOCK_COMMENT_OPEN BLOCK_COMMENT_CONTENT? BLOCK_COMMENT_CLOSE)

verbatim_code_section::= VERBATIM_OPEN VERBATIM_CODE? VERBATIM_CLOSE

fsm_file ::= FSM_FILE_KEYWORD comment* FSM_FILE_NAME

fsm_class_declaration ::= FSM_CLASS_KEYWORD comment* fsm_class

fsm_class ::= comment* FSM_CLASS_NAME {pin=3 mixin="com.smcplugin.psi.impl.SmcQualifiedNamedElementImpl" implements="com.smcplugin.psi.SmcQualifiedNamedElement" methods=[ getPackageText getNameIdentifier]}


start_state ::= START_KEYWORD comment* start_map_name_element MAP_NAME_STATE_NAME_SEPARATOR comment* start_state_name_element { implements="com.smcplugin.psi.SmcStateFullName" methods=[getMapName getStateName]}


start_state_name_element ::= START_STATE_NAME comment* {pin=1 mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcNamedElement"  methods=[ getNameIdentifier ]}


start_map_name_element ::= START_MAP_NAME comment* {  mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcNamedElement" methods=[ getNameIdentifier ]}


context_class_declaration ::= CLASS_KEYWORD comment* context_class_name_full

context_class_name_full ::= (context_class_package_element)? context_class

context_class_package_element ::=  comment* CONTEXT_CLASS_PACKAGE {pin=2 mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcNamedElement" methods=[ getNameIdentifier ]}

context_class ::= comment*  CONTEXT_CLASS_NAME  {pin=3 mixin="com.smcplugin.psi.impl.SmcQualifiedNamedElementImpl" implements="com.smcplugin.psi.SmcQualifiedNamedElement" methods=[ getPackageText getNameIdentifier]}

header_file ::= HEADER_KEYWORD comment* HEADER_FILE_NAME

include_file ::= INCLUDE_KEYWORD comment* INCLUDE_FILE_NAME

fsm_package ::= PACKAGE_KEYWORD comment* PACKAGE_STATEMENT {pin=1 implements="com.smcplugin.psi.SmcCustomNamed" methods=[getName]}

import_class_declaration ::= IMPORT_KEYWORD comment* STATIC_JAVA_KEYWORD? comment* import_class

import_class ::= comment* import_class_package_element import_class_statement_element

import_class_package_element ::=  comment* IMPORT_CLASS_PACKAGE  {pin=2 mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcNamedElement" methods=[ getNameIdentifier ]}

import_class_statement_element ::= comment* IMPORT_CLASS_STATEMENT {pin=2 mixin="com.smcplugin.psi.impl.SmcQualifiedNamedElementImpl" implements="com.smcplugin.psi.SmcQualifiedNamedElement" methods=[ getPackageText isWildcard isClassName getNameIdentifier ]}


declare ::= DECLARE_KEYWORD comment* DECLARE_STATEMENT

access ::= ACCESS_KEYWORD comment* ACCESS_LEVEL

map_declaration ::= comment* MAP_KEYWORD comment* map
map ::= MAP_NAME comment* MAP_SECTION_BOUND states MAP_SECTION_BOUND {pin=3 mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcMapElement" methods=[ getNameIdentifier getPresentation getElementIcon ]}

states ::= comment* state* comment*

state ::= comment * STATE_NAME comment* on_state? comment* transitions_block comment* {pin=2 mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcStateElement" methods=[ getNameIdentifier getPresentation getElementIcon]}

on_state ::= (entry exit)|(exit entry)|((entry|exit)?)

transitions_block ::= BRACE_OPEN comment* transitions comment* BRACE_CLOSE

transitions ::= comment* transition* comment*

transition ::= comment* TRANSITION_NAME comment* transition_args? comment* guard? comment* (push_transition|pop_transition|next_state) comment* actions_block  {pin=2 mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcTransitionElement" methods=[ getNameIdentifier]}

entry ::= comment* ENTRY_KEYWORD comment* actions_block {pin=2 implements="com.smcplugin.psi.SmcOnStateNestedElement" methods=[getType]}

exit ::= comment* EXIT_KEYWORD comment* actions_block {pin=2 implements="com.smcplugin.psi.SmcOnStateNestedElement"  methods=[getType] }

transition_args ::=PARENTHESES_OPEN comment* parameters comment* PARENTHESES_CLOSE {pin=1}

parameters ::= parameter (COMMA comment* parameter)*

parameter ::= comment* PARAMETER_NAME comment* COLON comment* PARAMETER_TYPE comment*

guard ::= BRACKET_OPEN comment*  guard_raw_code? comment* BRACKET_CLOSE

guard_raw_code::= (GUARD_NOT_BRACKET|bracket_expression)*

private bracket_expression::=  GUARD_BRACKET_OPEN (GUARD_NOT_BRACKET|bracket_expression)* GUARD_BRACKET_CLOSE {pin=1}

next_state ::= comment* (NEXT_STATE_NAME|NIL_KEYWORD) comment* {pin=2 mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcNamedElement"  methods=[ getNameIdentifier ]}


push_transition ::= (push_proxy_state)? comment* PUSH_KEYWORD comment* PARENTHESES_OPEN (push_state|comment_nil) PARENTHESES_CLOSE {pin=3}

private comment_nil ::= comment* NIL_KEYWORD comment*

push_proxy_state ::= (push_proxy_state_name_element|NIL_KEYWORD) comment* PUSH_PROXY_STATE_KEYWORD_SEPARATOR

push_proxy_state_name_element ::= PUSH_PROXY_STATE_NAME {mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcNamedElement"  methods=[getNameIdentifier]}

push_state ::= comment* (push_map_name_element comment* MAP_NAME_STATE_NAME_SEPARATOR )? comment* push_state_name_element { implements="com.smcplugin.psi.SmcStateFullName" methods=[ getMapName getStateName ]}

push_state_name_element ::= PUSH_STATE_NAME comment* {pin=1 mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcNamedElement"  methods=[ getNameIdentifier ]}

push_map_name_element ::= PUSH_MAP_NAME {  mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcNamedElement" methods=[ getNameIdentifier ]}

pop_transition ::= POP_KEYWORD callback_transition? {pin=1}

callback_transition ::= comment*  PARENTHESES_OPEN comment* CALLBACK_TRANSITION_NAME comment* (COMMA comment* arguments)? PARENTHESES_CLOSE

actions_block ::= BRACE_OPEN actions BRACE_CLOSE

actions ::= (comment* action comment*)*

action ::= ACTION_NAME comment* PARENTHESES_OPEN comment* arguments? PARENTHESES_CLOSE comment* SEMICOLON {pin=1  mixin="com.smcplugin.psi.impl.SmcNamedElementImpl" implements="com.smcplugin.psi.SmcNamedElement"  methods=[ getNameIdentifier getContextClassName getArgumentCount getPresentation getFullName getQualifiedFullName getElementIcon]}

arguments ::= argument (COMMA comment* argument)* { methods=[getArgumentsCount]}
argument ::= ARGUMENT_STATEMENT|STRING_LITERAL comment*
