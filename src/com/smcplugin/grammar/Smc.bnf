{
  parserClass="com.smcplugin.parser.SmcParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Smc"
  psiImplClassSuffix="Impl"
  psiPackage="com.smcplugin.psi"
  psiImplPackage="com.smcplugin.psi.impl"

  elementTypeHolderClass="com.smcplugin.psi.SmcTypes"
  elementTypeClass="com.smcplugin.psi.SmcElementType"
  tokenTypeClass="com.smcplugin.psi.SmcTokenType"

  psiImplUtilClass="com.smcplugin.psi.impl.SmcPsiImplUtil"

  tokens = [
      VERBATIM_OPEN="%{"
      VERBATIM_CLOSE="%}"
      CLASS_KEYWORD="%class"
      PACKAGE_KEYWORD="%package"
      FSM_CLASS_KEYWORD="%fsmclass"
      FSM_FILE_KEYWORD="%fsmfile"
      ACCESS_KEYWORD="%access"
      HEADER_KEYWORD="%header"
      DECLARE_KEYWORD="%declare"
      IMPORT_KEYWORD="%import"
      INCLUDE_KEYWORD="%include"
      START_KEYWORD="%start"
      MAP_KEYWORD="%map"
      BRACE_OPEN="{"
      BRACE_CLOSE="}"
      PARENTHESES_OPEN="("
      PARENTHESES_CLOSE=")"
      ENTRY_KEYWORD="Entry"
      EXIT_KEYWORD="Exit"
      BRACKET_OPEN="["
      BRACKET_CLOSE="]"

      COLON=":"
      COMMA=","
      SEMICOLON=";"
      POP_KEYWORD="pop"
      PUSH_KEYWORD="push"
      ASSIGN_OP="="
      NIL_KEYWORD="nil"
      SLASH_SIGN="/"
     ]
}

fsmFile ::= (verbatim_code_section|class_name| start_state|fsm_class|fsm_file| header_file| include_file|
package_name| import_class| declare| access| map+|comment)*

comment ::=LINE_COMMENT|block_comment

block_comment::=(BLOCK_COMMENT_OPEN BLOCK_COMMENT_CONTENT? BLOCK_COMMENT_CLOSE)

verbatim_code_section::= VERBATIM_OPEN VERBATIM_CODE? VERBATIM_CLOSE

fsm_file ::= FSM_FILE_KEYWORD comment* FSM_FILE_NAME

fsm_class ::= FSM_CLASS_KEYWORD comment* FSM_CLASS_NAME

start_state ::= START_KEYWORD comment* START_MAP_NAME comment* MAP_NAME_STATE_NAME_SEPARATOR comment* START_STATE_NAME

class_name ::= CLASS_KEYWORD comment* CONTEXT_CLASS_NAME

header_file ::= HEADER_KEYWORD comment* HEADER_FILE_NAME

include_file ::= INCLUDE_KEYWORD comment* INCLUDE_FILE_NAME

package_name ::= PACKAGE_KEYWORD comment* PACKAGE_STATEMENT

import_class ::= IMPORT_KEYWORD comment* STATIC_JAVA_KEYWORD? comment* IMPORT_CLASS_STATEMENT

declare ::= DECLARE_KEYWORD comment* DECLARE_STATEMENT

access ::= ACCESS_KEYWORD comment* ACCESS_LEVEL

map ::= comment* MAP_KEYWORD comment* MAP_NAME comment* MAP_SECTION_BOUND states MAP_SECTION_BOUND {pin=2}

states ::= comment* state* comment*

state ::=STATE_NAME comment* ((entry exit)|(exit entry)|((entry|exit)?))? comment* BRACE_OPEN comment* transitions comment* BRACE_CLOSE {pin=1}

transitions ::= comment* transition* comment*

transition ::= comment* TRANSITION_NAME comment* transition_args? comment* guard? comment* (push_transition|pop_transition|next_state) comment* BRACE_OPEN comment* actions comment* BRACE_CLOSE {pin=2}

entry ::= comment* ENTRY_KEYWORD comment* BRACE_OPEN comment*  actions comment* BRACE_CLOSE {pin=2}

exit ::= comment* EXIT_KEYWORD comment* BRACE_OPEN comment* actions comment* BRACE_CLOSE {pin=2}

transition_args ::=PARENTHESES_OPEN comment* parameters comment* PARENTHESES_CLOSE {pin=1}

parameters ::= parameter comment* COMMA comment* parameters |comment* parameter

parameter ::= comment* PARAMETER_NAME comment* COLON comment* PARAMETER_TYPE

guard ::= BRACKET_OPEN comment* GUARD_RAW_CODE comment* BRACKET_CLOSE

//TODO: Need to implement push/pop transitions
next_state ::= comment* (NEXT_STATE_NAME|NIL_KEYWORD) comment*

push_transition ::= (push_proxy_state)? comment* PUSH_KEYWORD comment* PARENTHESES_OPEN (push_state|comment_nil) PARENTHESES_CLOSE {pin=3}

private comment_nil ::= comment* NIL_KEYWORD comment*

push_proxy_state ::= (PUSH_PROXY_STATE_NAME|NIL_KEYWORD) comment* PUSH_PROXY_STATE_KEYWORD_SEPARATOR

push_state ::= comment* (PUSH_MAP_NAME comment* MAP_NAME_STATE_NAME_SEPARATOR)? comment* PUSH_STATE_NAME comment*

pop_transition ::= POP_KEYWORD callback_transition? {pin=1}

callback_transition ::= comment*  PARENTHESES_OPEN comment* CALLBACK_TRANSITION_NAME comment* (COMMA comment* arguments)? PARENTHESES_CLOSE

actions ::= (action comment*)*

action ::= ACTION_NAME comment* PARENTHESES_OPEN comment* arguments? PARENTHESES_CLOSE comment* SEMICOLON {pin=1}

arguments ::= (ARGUMENT_STATEMENT | STRING_LITERAL) comment* COMMA comment* arguments|comment* (STRING_LITERAL|ARGUMENT_STATEMENT) comment* {pin=1}
